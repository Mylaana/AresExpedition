@use "sass:map";
$transition-delay : 0.15s;
$shape-name: ('hex', 'small', 'large', 'hex_floating', 'left', 'right', 'action', 'selection_rounded_square');
$border-shape-name: ('hex_floating', 'action');
$shape-width: (
	'hex': 25%,
	'hex_floating': 25%,
	'small': 15%,
	'large': 10%,
	'left': 21%,
	'right': 35%,
	'action': 15%,
	'selection_rounded_square': 0
);
$disabled-color: gray;
$disabled-border: darken(gray, 10%);
$color-buttons: ('blue', 'red', 'green', 'yellow', 'purple', 'orange', 'white');

.wrapper-button{
	height: 100%;
	display: flex;
	justify-content: center;
	align-items: center;
	position: relative;
}
.main {
	position: relative;
	z-index: 1;
	display: flex;
	justify-content: center;
	align-items: center;
	border: 0;
	height: 100%;

	background: transparent;

	&.hovered.enabled{
		cursor: pointer;
	}
	&.disabled, .hovered.disabled{
		filter: grayscale(40%);
		& > *{
			filter: grayscale(50%);
		}
	}
	&::ng-deep app-text-with-image .text-tag {
		max-width: 100%;
		max-height: 25px;
		font-weight: bold;
	}
	&.enabled::ng-deep app-text-with-image p {
		font-weight: 550;
		font-size: 100%;
	}
	&.disabled::ng-deep app-text-with-image p {
		color: rgb(61, 61, 61);
		font-size: 100%;
	}
}

.wrapper-elements {
	position: relative;
	display: flex;
	height: 100%;
	width: 100%;
	top: 0;
	left: 0;
}

.gradiant-mask {
	@each $name in $shape-name {
		&--#{$name} {
			z-index: 3;
			position: absolute;
			top: 0;
			left: 0px;
			display: flex;
			height: 100%;
			width: 100%;

			$color1: rgba(0, 0, 0, 0.15);
			$color2: rgba(0, 0, 0, 0);
			$color3: rgba(0, 0, 0, .5);
			-webkit-mask-image: linear-gradient(to bottom, $color1 0%, $color2 100%);
			mask-image: linear-gradient(to top, $color1 30%, $color2 70%);

			&:hover {
				-webkit-mask-image: linear-gradient(to bottom, $color2 0%, $color1 100%);
				mask-image: linear-gradient(to top, $color2 0%, $color1 100%);
			}

			&:active {
				-webkit-mask-image: linear-gradient(to bottom, $color3 0%, $color3 100%);
				mask-image: linear-gradient(to top, $color3 0%, $color3 100%);
			}
		}
	}
}

.button-gradiant-background {
	@each $name in $shape-name {
		&--#{$name} {
			z-index: 2;
			background: black;
		}
	}
}

.button-main {
	@each $name, $width in $shape-width {
		&--#{$name} {
			display: flex;
			justify-content: center;
			align-items: center;

			z-index: 2;
			left: 1px;
			top: 1px;
			height: calc(100% - 2px);
			width: calc(100% - 2px);
			position: absolute;

			background-color: var(--color-ares-orange);

			& app-text-with-image {
				width: calc(100% - #{$width});
				color: white;
			}
		}
		&.disabled{
			background-color: $disabled-color;
		}
	}
	&--left{
		width: calc(100% - 1px);
		background-color: var(--color-ares-blue-light2);
		&::ng-deep > *{
			margin-left: 15%;
		}
		&.disabled{
			filter: grayscale(50%);
		}
	}
	&--right{
		width: calc(100% - 1px);
		background-color: var(--color-ares-blue-dark);
		left: 0;
		&::ng-deep > *{
			margin-right: 20%;
		}
		&.disabled{
			filter: grayscale(50%);
		}
	}
	&--hex_floating.enabled, &--action.enabled, &--selection_rounded_square.enabled{
		background: transparent;
	}
	&--selection_rounded_square{
		&.enabled{
			border: rgba(0, 0, 0, 0.5) solid 2px;
			background-color: rgba(0, 0, 0, 0.1);
			box-shadow: 2px 2px rgba(0, 0, 0, 0.5) ;
		}
		&.enabled.hovered{
			border: rgba(black, 0.55) solid 2px;
			//background-color: rgba(rgb(255, 129, 25), 0.3);
			background-color: rgba(black, 0.3);
			//box-shadow: 2px 2px rgb(255, 129, 25);
			&:active{
				box-shadow: 1px 1px rgba(0, 0, 0, 0.5) ;
				margin-top: 1px;
				margin-left: 1px;
			}
		}
		& app-text-with-image {
			color: black;
		}
	}
}

.button-background {
	@each $name in $shape-name {
		&--#{$name} {
			position: relative;
			left: 0;
			top: 0;
			z-index: 0;
			background-color: var(--color-ares-orange-dark);
		}
	}
	&--selection_rounded_square{
		background-color: transparent;

	}
	&--hex_floating, &--action{
		background: rgba(181, 128, 108, .8);

		&.enabled::before {
			content: '';
			position: absolute;
			inset: 0;
			opacity: 1;
			transition: opacity $transition-delay ease;
			z-index: -1;
		}
		&.enabled::after {
			content: '';
			position: absolute;
			inset: 0;
			background: rgba(255, 255, 255, .2);
			opacity: 0;
			transition: opacity $transition-delay ease;
			z-index: 10;
		}
		&.hovered::before {
			opacity: 0;
		}
		&.hovered::after {
			opacity: 1;
		}
	}
	&--left, &--right{
		background: var(--color-ares-blue);
	}
}

.button-shape{
	&--hex, &--hex_floating{
		aspect-ratio: 1.15 / 1;
	}
	&--small{
		aspect-ratio: 3.5 / 1;
	}
	&--large{
		aspect-ratio: 5 / 1;
	}
	&--action{
		aspect-ratio: 2 / 1;
	}

	@each $name, $width in $shape-width {
		&--#{$name} {
			-webkit-clip-path: polygon(0% 50%, #{$width} 0%, calc(100% - #{$width}) 0%, 100% 50%, calc(100% - #{$width}) 100%, #{$width} 100%);
			clip-path: polygon(0% 50%, #{$width} 0%, calc(100% - #{$width}) 0%, 100% 50%, calc(100% - #{$width}) 100%, #{$width} 100%);
		}
	}

	&--left{
		$width: map.get($shape-width, $key:'left' );
		aspect-ratio: 2.5 / 1;
		-webkit-clip-path: polygon(0% 50%, #{$width} 0%, calc(100% - #{$width}) 0%, calc(100% - #{$width}) 100%, #{$width} 100%);
		clip-path: polygon(0% 50%, #{$width} 0%, 100% 0%, 100% 100%, #{$width} 100%);
	}
	&--right{
		$width: map.get($shape-width, $key:'right' );
		aspect-ratio: 1.5 / 1;
		-webkit-clip-path: polygon(0% 0%,calc(100% - #{$width}) 0%, 100% 50%, calc(100% - #{$width}) 100%, 0% 100%);
		clip-path: polygon(0% 0%,calc(100% - #{$width}) 0%, 100% 50%, calc(100% - #{$width}) 100%, 0% 100%);
	}
	&--selection_rounded_square{
		//aspect-ratio: 1;
		border-radius: 10px;
		width: 100%;
	}
}
.button-border {
	$border-thickness: 3px;
	$inner-offset: calc($border-thickness / 2);
	&--hex_floating{
		$width: map.get($shape-width, 'hex_floating');
		-webkit-clip-path: polygon(0% 50%, #{$width} 0%, calc(100% - #{$width}) 0%, 100% 50%, calc(100% - #{$width}) 100%, #{$width} 100%, 0% 50%, calc($border-thickness) 50%, calc($width + $inner-offset) calc(100% - $border-thickness), calc(100% - calc($width + $inner-offset)) calc(100% - $border-thickness), calc(100% - $border-thickness) 50%, calc(100% - calc($width + $inner-offset)) calc($border-thickness), calc($width + $inner-offset) calc($border-thickness), calc($border-thickness) 50%);
		clip-path: polygon(0% 50%, #{$width} 0%, calc(100% - #{$width}) 0%, 100% 50%, calc(100% - #{$width}) 100%, #{$width} 100%, 0% 50%, calc($border-thickness) 50%, calc($width + $inner-offset) calc(100% - $border-thickness), calc(100% - calc($width + $inner-offset)) calc(100% - $border-thickness), calc(100% - $border-thickness) 50%, calc(100% - calc($width + $inner-offset)) calc($border-thickness), calc($width + $inner-offset) calc($border-thickness), calc($border-thickness) 50%);
	}
	&--action{
		$width: map.get($shape-width, 'action');
		-webkit-clip-path: polygon(0% 50%, #{$width} 0%, calc(100% - #{$width}) 0%, 100% 50%, calc(100% - #{$width}) 100%, #{$width} 100%, 0% 50%, calc($border-thickness) 50%, calc($width + $inner-offset) calc(100% - $border-thickness), calc(100% - calc($width + $inner-offset)) calc(100% - $border-thickness), calc(100% - $border-thickness) 50%, calc(100% - calc($width + $inner-offset)) calc($border-thickness), calc($width + $inner-offset) calc($border-thickness), calc($border-thickness) 50%);
		clip-path: polygon(0% 50%, #{$width} 0%, calc(100% - #{$width}) 0%, 100% 50%, calc(100% - #{$width}) 100%, #{$width} 100%, 0% 50%, calc($border-thickness) 50%, calc($width + $inner-offset) calc(100% - $border-thickness), calc(100% - calc($width + $inner-offset)) calc(100% - $border-thickness), calc(100% - $border-thickness) 50%, calc(100% - calc($width + $inner-offset)) calc($border-thickness), calc($width + $inner-offset) calc($border-thickness), calc($border-thickness) 50%);
	}
	@each $name in $border-shape-name{
		&--#{$name}{
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;

			&.enabled::before {
				content: '';
				position: absolute;
				inset: 0;
				background-image: linear-gradient(135deg, rgb(215, 215, 215) 30%, rgb(147, 147, 147) 60%, rgb(234, 234, 234) 90%);
				opacity: 1;
				transition: opacity $transition-delay ease;
				z-index: -1;
			}

			&.enabled::after {
				content: '';
				position: absolute;
				inset: 0;
				background-image: linear-gradient(to right, var(--color-ares-orange) 0%, var(--color-ares-orange) 100%);
				opacity: 0;
				transition: opacity $transition-delay ease;
				z-index: -1;
			}

			&.enabled.hovered::before {
				opacity: 0;
			}

			&.enabled.hovered::after {
				opacity: 1;
			}
		}
	}
}
.shadow{
	z-index: 0;
	position: absolute;
	height: 100%;
	width: 90%;
	background: transparent;
	border-radius: 50%;
	&.hovered.enabled{
		box-shadow: 0px 0px 15px 10px rgba($color: #ff7700, $alpha: .3);
	}
	&.enabled{
		box-shadow: 0px 0px 15px 10px rgba($color: #c4c4c4, $alpha: .2);
	}
}

.color-button{
	@each $color in $color-buttons{
		&--#{$color}{
			position: relative;
			pointer-events: all;
			z-index: 1;
			height: 100%;
			aspect-ratio: 1.5;
			background-color: var(--color-ares-#{$color});
			border-radius: 5px;
			border: 0;
			box-shadow: 0 0 2px 1px black;

			&.hovered{
				cursor: pointer;
				filter: grayscale(20%);
				box-shadow: 0 0 2px 2px black;
			}
		}
	}
}
