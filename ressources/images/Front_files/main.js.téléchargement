// src/main.ts
import { bootstrapApplication } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_platform-browser.js?v=ba073120";

// src/app/app.config.ts
import { provideRouter } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_router.js?v=ba073120";

// src/app/app.routes.ts
var routes = [];

// src/app/app.config.ts
import { provideClientHydration } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_platform-browser.js?v=ba073120";
import { provideAnimations } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_platform-browser_animations.js?v=ba073120";
var appConfig = {
  providers: [provideRouter(routes), provideClientHydration(), provideAnimations()]
};

// src/app/app.component.ts
import { CommonModule as CommonModule25 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import { Component as Component33, HostListener, ViewChild as ViewChild2, inject as inject3 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/components/cards/project/project-card-list/project-card-list.component.ts
import { Component as Component6, Input as Input4, Output as Output2, EventEmitter as EventEmitter2, ViewChildren } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/components/cards/project/project-card/project-card.component.ts
import { Component as Component5, Input as Input3, inject } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule2 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";

// src/app/components/tools/text-with-image/text-with-image.component.ts
import { Component, Input } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/services/global/global-info.service.ts
import { Injectable } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/assets/data/game-item_data.json
var game_item_data_default = [
  {
    id: 0,
    description: "building",
    imageUrl: "assets/tag/building.png",
    name: "$tag_building$"
  },
  {
    id: 1,
    description: "space",
    imageUrl: "assets/tag/space.png",
    name: "$tag_space$"
  },
  {
    id: 2,
    description: "science",
    imageUrl: "assets/tag/science.png",
    name: "$tag_science$"
  },
  {
    id: 3,
    description: "power",
    imageUrl: "assets/tag/power.png",
    name: "$tag_power$"
  },
  {
    id: 4,
    description: "earth",
    imageUrl: "assets/tag/earth.png",
    name: "$tag_earth$"
  },
  {
    id: 5,
    description: "jovian",
    imageUrl: "assets/tag/jovian.png",
    name: "$tag_jovian$"
  },
  {
    id: 6,
    description: "plant",
    imageUrl: "assets/tag/plant.png",
    name: "$tag_plant$"
  },
  {
    id: 7,
    description: "animal",
    imageUrl: "assets/tag/animal.png",
    name: "$tag_animal$"
  },
  {
    id: 8,
    description: "microbe",
    imageUrl: "assets/tag/microbe.png",
    name: "$tag_microbe$"
  },
  {
    id: 9,
    description: "event",
    imageUrl: "assets/tag/event.png",
    name: "$tag_event$"
  },
  {
    id: 100,
    description: "redarrow",
    imageUrl: "assets/other/arrow.png",
    name: "$other_redarrow$"
  },
  {
    id: 101,
    description: "arrow",
    imageUrl: "assets/other/arrow.png",
    name: "$other_arrow$"
  },
  {
    id: 102,
    description: "card",
    imageUrl: "assets/other/card.png",
    name: "$other_card$"
  },
  {
    id: 103,
    description: "tr",
    imageUrl: "assets/other/tr.png",
    name: "$other_tr$"
  },
  {
    id: 104,
    description: "ocean",
    imageUrl: "assets/other/ocean.png",
    name: "$other_ocean$"
  },
  {
    id: 105,
    description: "oxygen",
    imageUrl: "assets/other/oxygen.png",
    name: "$other_oxygen$"
  },
  {
    id: 106,
    description: "forest",
    imageUrl: "assets/other/forest.png",
    name: "$other_forest$"
  },
  {
    id: 107,
    description: "temperature",
    imageUrl: "assets/other/temperature.png",
    name: "$other_temperature$"
  },
  {
    id: 108,
    description: "infrastructure",
    imageUrl: "assets/other/infrastructure.png",
    name: "$other_infrastructure$"
  },
  {
    id: 109,
    description: "objective",
    imageUrl: "assets/other/objective.png",
    name: "$other_objective$"
  },
  {
    id: 110,
    description: "research symbol",
    imageUrl: "assets/other/research_symbol.png",
    name: "$other_researchsymbol$"
  },
  {
    id: 111,
    description: "research card",
    imageUrl: "assets/other/research_card.png",
    name: "$other_researchcard$"
  },
  {
    id: 112,
    description: "validate_circle",
    imageUrl: "assets/other/validate_circle.png",
    name: "$other_validate_circle$"
  },
  {
    id: 113,
    description: "cancel",
    imageUrl: "assets/other/cancel.png",
    name: "$other_cancel$"
  },
  {
    id: 114,
    description: "rollback",
    imageUrl: "assets/other/rollback.png",
    name: "$other_rollback$"
  },
  {
    id: 115,
    description: "phase_planification",
    imageUrl: "assets/other/phase_planification.png",
    name: "$other_planification$"
  },
  {
    id: 116,
    description: "sell_card",
    imageUrl: "assets/other/sell_card.png",
    name: "$other_sell_card$"
  },
  {
    id: 117,
    description: "validate",
    imageUrl: "assets/other/validate.png",
    name: "$other_validate$"
  },
  {
    id: 118,
    description: "settings",
    imageUrl: "assets/other/settings.png",
    name: "$other_settings$"
  },
  {
    id: 119,
    description: "next",
    imageUrl: "assets/other/next.png",
    name: "$other_next$"
  },
  {
    id: 120,
    description: "development",
    imageUrl: "assets/other/phase_development.png",
    name: "$other_phase_development$"
  },
  {
    id: 121,
    description: "construction",
    imageUrl: "assets/other/phase_construction.png",
    name: "$other_phase_construction$"
  },
  {
    id: 122,
    description: "action",
    imageUrl: "assets/other/phase_action.png",
    name: "$other_phase_action$"
  },
  {
    id: 123,
    description: "production",
    imageUrl: "assets/other/phase_production.png",
    name: "$other_phase_production$"
  },
  {
    id: 124,
    description: "research",
    imageUrl: "assets/other/phase_research.png",
    name: "$other_phase_research$"
  },
  {
    id: 125,
    description: "cancel circle",
    imageUrl: "assets/other/cancel_circle.png",
    name: "$other_cancel_circle$"
  },
  {
    id: 1e3,
    description: "steel",
    imageUrl: "assets/ressource/steel.png",
    name: "$ressource_steel$"
  },
  {
    id: 1001,
    description: "titanium",
    imageUrl: "assets/ressource/titanium.png",
    name: "$ressource_titanium$"
  },
  {
    id: 1002,
    description: "science",
    imageUrl: "assets/ressource/science.png",
    name: "$ressource_science$"
  },
  {
    id: 1003,
    description: "power",
    imageUrl: "assets/ressource/power.png",
    name: "$ressource_power$"
  },
  {
    id: 1004,
    description: "plant",
    imageUrl: "assets/ressource/plant.png",
    name: "$ressource_plant$"
  },
  {
    id: 1005,
    description: "animal",
    imageUrl: "assets/ressource/animal.png",
    name: "$ressource_animal$"
  },
  {
    id: 1006,
    description: "microbe",
    imageUrl: "assets/ressource/microbe.png",
    name: "$ressource_microbe$"
  },
  {
    id: 1007,
    description: "heat",
    imageUrl: "assets/ressource/heat.png",
    name: "$ressource_heat$"
  },
  {
    id: 1008,
    description: "card",
    imageUrl: "assets/ressource/card.png",
    name: "$ressource_card$"
  },
  {
    id: 1009,
    description: "megacredit",
    imageUrl: "assets/ressource/megacredit.png",
    name: "$ressource_megacredit$"
  },
  {
    id: 1009,
    description: "megacreditvoid",
    imageUrl: "assets/ressource/megacreditvoid.png",
    name: "$ressource_megacreditvoid$"
  }
];

// src/app/services/global/global-info.service.ts
import * as i0 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var GlobalInfo = class _GlobalInfo {
  static {
    this.gameItems = _GlobalInfo.loadJson();
  }
  static loadJson() {
    let result = [];
    for (let data of game_item_data_default) {
      result.push(data);
    }
    return result;
  }
  static getUrlFromID(id) {
    let result = "";
    for (let item of this.gameItems) {
      if (item.id === id) {
        return item.imageUrl;
      }
    }
    return result;
  }
  static getUrlFromName(name) {
    let result = "";
    for (let item of this.gameItems) {
      if (item.name === name) {
        return item.imageUrl;
      }
    }
    return result;
  }
  static getIdFromType(type) {
    let tagId = -1;
    for (let item of this.gameItems) {
      if (item.description === type) {
        return item.id;
      }
    }
    return tagId;
  }
  static {
    this.\u0275fac = function GlobalInfo_Factory(t) {
      return new (t || _GlobalInfo)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i0.\u0275\u0275defineInjectable({ token: _GlobalInfo, factory: _GlobalInfo.\u0275fac, providedIn: "root" });
  }
};

// src/app/components/tools/text-with-image/text-with-image.component.ts
import * as i02 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var TextWithImageComponent = class _TextWithImageComponent {
  ngOnInit() {
    this.textWithImages = this.replaceImageTags(this.rawText);
  }
  ngOnChanges(changes) {
    if (changes["rawText"] && changes["rawText"].currentValue) {
      this.textWithImages = this.replaceImageTags(this.rawText);
    }
  }
  replaceImageTags(text) {
    var splittedText = text.split("$");
    splittedText.forEach((value, index) => {
      if (value.split("_")[0] === "tag") {
        splittedText[index] = this.htmlTag("img", { inputValue: value.replace(value, GlobalInfo.getUrlFromName("$" + value + "$")), imgAlt: value, inputClass: "text-tag" });
      } else if (value.split("_")[0] === "ressource") {
        let splittedValue = value.split("_");
        if (splittedValue[1] != "megacreditvoid") {
          splittedText[index] = this.htmlTag("img", { inputValue: value.replace(value, GlobalInfo.getUrlFromName("$" + value + "$")), imgAlt: value, inputClass: "text-tag" });
        } else {
          value = "ressource_megacreditvoid";
          var theImage = this.htmlTag("img", { inputValue: value.replace(value, GlobalInfo.getUrlFromName("$" + value + "$")), imgAlt: value, inputClass: "text-tag" });
          var theText = this.htmlTag("p", { inputValue: splittedValue[2], inputClass: "megacredit-text" });
          splittedText[index] = this.htmlTag("div", { inputClass: "wrapper-megacredit", inputValue: theImage + theText });
        }
      } else if (value.split("_")[0] === "other") {
        splittedText[index] = this.htmlTag("img", { inputValue: value.replace(value, GlobalInfo.getUrlFromName("$" + value + "$")), imgAlt: value, inputClass: "text-tag" });
      } else if (value === "skipline") {
        splittedText[index] = `<br>`;
      } else if (value != "") {
        splittedText[index] = `<p>${value}</p>`;
      }
    });
    for (let i = splittedText.length; i < 0; i--) {
      if (String(splittedText[i]) === "") {
        splittedText.splice(i, 1);
      }
    }
    return splittedText.join("");
  }
  htmlTag(tag, options) {
    var resultClass = "";
    if (options.inputClass) {
      resultClass = ` class="${options.inputClass}" `;
    }
    if (tag === "img") {
      return `<${tag} ${resultClass} src=${options.inputValue} alt=${options.imgAlt}>`;
    }
    return `<${tag} ${resultClass}>` + options.inputValue + `</${tag}>`;
  }
  static {
    this.\u0275fac = function TextWithImageComponent_Factory(t) {
      return new (t || _TextWithImageComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i02.\u0275\u0275defineComponent({ type: _TextWithImageComponent, selectors: [["app-text-with-image"]], inputs: { rawText: "rawText" }, standalone: true, features: [i02.\u0275\u0275NgOnChangesFeature, i02.\u0275\u0275StandaloneFeature], decls: 1, vars: 1, consts: [[1, "wrapper-text-with-image", 3, "innerHTML"]], template: function TextWithImageComponent_Template(rf, ctx) {
      if (rf & 1) {
        i02.\u0275\u0275element(0, "div", 0);
      }
      if (rf & 2) {
        i02.\u0275\u0275property("innerHTML", ctx.textWithImages, i02.\u0275\u0275sanitizeHtml);
      }
    }, styles: ["\n\n[_nghost-%COMP%]     .wrapper-text-with-image {\n  width: 100%;\n  height: 100%;\n  max-width: 100%;\n  max-height: 100%;\n}\n[_nghost-%COMP%]     * {\n  vertical-align: top;\n  display: inline;\n  word-wrap: break-word;\n}\n[_nghost-%COMP%]     .wrapper-megacredit {\n  position: relative;\n  display: inline-block;\n}\n[_nghost-%COMP%]     .wrapper-megacredit img {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n[_nghost-%COMP%]     .wrapper-megacredit p {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n}\n[_nghost-%COMP%]     .megacredit-text {\n  color: black;\n  font-weight: bold;\n}\n[_nghost-%COMP%]     .text-tag {\n  object-fit: scale-down;\n}\n/*# sourceMappingURL=text-with-image.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i02.\u0275setClassDebugInfo(TextWithImageComponent, { className: "TextWithImageComponent", filePath: "src\\app\\components\\tools\\text-with-image\\text-with-image.component.ts", lineNumber: 14 });
})();

// src/app/components/tools/layouts/layout-card-background-hexagons/layout-card-background-hexagons.component.ts
import { Component as Component3 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/components/tools/layouts/layout-hexagons/layout-hexagons.component.ts
import { Component as Component2 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i03 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var LayoutHexagonsComponent = class _LayoutHexagonsComponent {
  static {
    this.\u0275fac = function LayoutHexagonsComponent_Factory(t) {
      return new (t || _LayoutHexagonsComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i03.\u0275\u0275defineComponent({ type: _LayoutHexagonsComponent, selectors: [["app-layout-hexagons"]], standalone: true, features: [i03.\u0275\u0275StandaloneFeature], decls: 1, vars: 0, consts: [[1, "hex"]], template: function LayoutHexagonsComponent_Template(rf, ctx) {
      if (rf & 1) {
        i03.\u0275\u0275element(0, "div", 0);
      }
    }, styles: ["\n\n.hex[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: relative;\n  top: 0;\n  left: 0;\n  width: 100%;\n  aspect-ratio: 1;\n  background: white;\n  opacity: 100%;\n  clip-path: polygon(50% 0, 93% 25%, 93% 75%, 50% 100%, 7% 75%, 7% 25%, 50% 0%, 50% 1.5%, 8.5% 26.5%, 8.5% 73.5%, 50% 98.5%, 91.5% 73.5%, 91.5% 26.5%, 50% 1.5%);\n}\n/*# sourceMappingURL=layout-hexagons.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i03.\u0275setClassDebugInfo(LayoutHexagonsComponent, { className: "LayoutHexagonsComponent", filePath: "src\\app\\components\\tools\\layouts\\layout-hexagons\\layout-hexagons.component.ts", lineNumber: 10 });
})();

// src/app/components/tools/layouts/layout-card-background-hexagons/layout-card-background-hexagons.component.ts
import * as i04 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var LayoutCardBackgroundHexagonsComponent = class _LayoutCardBackgroundHexagonsComponent {
  static {
    this.\u0275fac = function LayoutCardBackgroundHexagonsComponent_Factory(t) {
      return new (t || _LayoutCardBackgroundHexagonsComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i04.\u0275\u0275defineComponent({ type: _LayoutCardBackgroundHexagonsComponent, selectors: [["app-layout-card-background-hexagons"]], standalone: true, features: [i04.\u0275\u0275StandaloneFeature], decls: 26, vars: 0, consts: [[1, "hex", "hex1"], [1, "hex", "hex2"], [1, "hex", "hex3"], [1, "hex", "hex4"], [1, "hex", "hex5"], [1, "hex", "hex6"], [1, "hex", "hex7"], [1, "hex", "hex8"], [1, "hex", "hex9"], [1, "hex", "hex10"], [1, "hex", "hex11"], [1, "hex", "hex-small", "small-hex1"], [1, "hex", "hex-small", "small-hex2"]], template: function LayoutCardBackgroundHexagonsComponent_Template(rf, ctx) {
      if (rf & 1) {
        i04.\u0275\u0275elementStart(0, "div", 0);
        i04.\u0275\u0275element(1, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(2, "div", 1);
        i04.\u0275\u0275element(3, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(4, "div", 2);
        i04.\u0275\u0275element(5, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(6, "div", 3);
        i04.\u0275\u0275element(7, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(8, "div", 4);
        i04.\u0275\u0275element(9, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(10, "div", 5);
        i04.\u0275\u0275element(11, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(12, "div", 6);
        i04.\u0275\u0275element(13, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(14, "div", 7);
        i04.\u0275\u0275element(15, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(16, "div", 8);
        i04.\u0275\u0275element(17, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(18, "div", 9);
        i04.\u0275\u0275element(19, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(20, "div", 10);
        i04.\u0275\u0275element(21, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(22, "div", 11);
        i04.\u0275\u0275element(23, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
        i04.\u0275\u0275elementStart(24, "div", 12);
        i04.\u0275\u0275element(25, "app-layout-hexagons");
        i04.\u0275\u0275elementEnd();
      }
    }, dependencies: [LayoutHexagonsComponent], styles: ["\n\n.hex[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 57.2727272727px;\n  aspect-ratio: 1;\n}\n.hex-small[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 28.6363636364px;\n  aspect-ratio: 1;\n}\n.hex1[_ngcontent-%COMP%] {\n  top: 40px;\n  left: 28.6363636364px;\n  opacity: 35%;\n}\n.hex2[_ngcontent-%COMP%] {\n  top: 84px;\n  left: 53.8363636364px;\n  opacity: 15%;\n}\n.hex3[_ngcontent-%COMP%] {\n  top: 40px;\n  left: 80.1818181818px;\n  opacity: 8%;\n}\n.hex4[_ngcontent-%COMP%] {\n  top: -4px;\n  left: 53.8363636364px;\n  opacity: 17%;\n}\n.hex5[_ngcontent-%COMP%] {\n  top: -4px;\n  left: 243.4090909091px;\n  opacity: 30%;\n}\n.hex6[_ngcontent-%COMP%] {\n  top: 40px;\n  left: 217.6363636364px;\n  opacity: 15%;\n}\n.hex7[_ngcontent-%COMP%] {\n  top: 40px;\n  left: 269.1818181818px;\n  opacity: 12%;\n}\n.hex8[_ngcontent-%COMP%] {\n  top: -4px;\n  left: 191.8636363636px;\n  opacity: 20%;\n}\n.hex9[_ngcontent-%COMP%] {\n  top: 188px;\n  left: 28.6363636364px;\n  opacity: 20%;\n}\n.hex10[_ngcontent-%COMP%] {\n  top: 232px;\n  left: 53.8363636364px;\n  opacity: 30%;\n}\n.hex11[_ngcontent-%COMP%] {\n  top: 232px;\n  left: 2.8636363636px;\n  opacity: 40%;\n}\n.small-hex1[_ngcontent-%COMP%] {\n  top: 180px;\n  left: 65.8636363636px;\n  opacity: 50%;\n}\n.small-hex2[_ngcontent-%COMP%] {\n  top: 120px;\n  left: 243.4090909091px;\n  opacity: 50%;\n}\n/*# sourceMappingURL=layout-card-background-hexagons.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i04.\u0275setClassDebugInfo(LayoutCardBackgroundHexagonsComponent, { className: "LayoutCardBackgroundHexagonsComponent", filePath: "src\\app\\components\\tools\\layouts\\layout-card-background-hexagons\\layout-card-background-hexagons.component.ts", lineNumber: 13 });
})();

// src/app/models/cards/card-cost.model.ts
import { Injectable as Injectable6 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i09 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/services/cards/project-card-played-effect.service.ts
import { Injectable as Injectable5 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/services/designers/event-designer.service.ts
import { Injectable as Injectable3 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/models/core-game/event.model.ts
var EventBaseModel = class {
  constructor() {
    this.locksEventpile = false;
    this.finalized = false;
    this.autoFinalize = false;
  }
  hasSelector() {
    return false;
  }
  hasCardBuilder() {
    return false;
  }
  getSelectionActive() {
    return false;
  }
  onSwitch() {
  }
};
var EventBaseCardSelector = class extends EventBaseModel {
  constructor() {
    super(...arguments);
    this.title = "no title provided";
    this.refreshSelectorOnSwitch = true;
    this.cardSelector = {
      selectFrom: [],
      selectedList: [],
      selectionQuantity: 0,
      selectionQuantityTreshold: "equal"
    };
    this.selectionActive = false;
  }
  updateCardSelection(selection) {
    this.cardSelector.selectedList = selection;
    this.button?.updateEnabledTreshold({
      treshold: this.cardSelector.selectionQuantityTreshold,
      tresholdValue: this.cardSelector.selectionQuantity,
      value: this.cardSelector.selectedList.length
    });
  }
  hasSelector() {
    return true;
  }
  activateSelection(stateFromParent) {
    this.selectionActive = true;
  }
  deactivateSelection(stateFromParent) {
    this.selectionActive = false;
  }
  getSelectionActive() {
    return this.selectionActive;
  }
};
var EventCardSelector = class extends EventBaseCardSelector {
  constructor() {
    super(...arguments);
    this.type = "cardSelector";
  }
};
var EventCardSelectorRessource = class extends EventBaseCardSelector {
  constructor() {
    super(...arguments);
    this.type = "cardSelectorRessource";
  }
};
var CardBuilder = class {
  constructor() {
    this.buttons = [];
    this.builderIsLocked = false;
  }
  addButtons(buttons) {
    this.buttons = buttons;
  }
  getButtons() {
    return this.buttons;
  }
  getButtonFromName(name) {
    for (let button of this.buttons) {
      if (button.name === name) {
        return button;
      }
    }
    return;
  }
  setOption(option) {
    this.option = option;
  }
  getOption() {
    return this.option;
  }
  updateButtonEnabled(name, enabled) {
    let button = this.getButtonFromName(name);
    if (!button) {
      return;
    }
    button.enabled = enabled;
  }
  updateButtonGroupState(buttonName) {
    switch (buttonName) {
      case "selectCard": {
        this.updateButtonEnabled("selectCard", false);
        this.updateButtonEnabled("cancelSelectCard", true);
        this.updateButtonEnabled("buildCard", false);
        this.updateButtonEnabled("discardSelectedCard", false);
        this.updateButtonEnabled("drawCard", false);
        this.updateButtonEnabled("gain6MC", false);
        break;
      }
      case "cancelSelectCard": {
        this.updateButtonEnabled("selectCard", true);
        this.updateButtonEnabled("cancelSelectCard", false);
        this.updateButtonEnabled("buildCard", false);
        this.updateButtonEnabled("discardSelectedCard", false);
        this.updateButtonEnabled("drawCard", true);
        this.updateButtonEnabled("gain6MC", true);
        break;
      }
      case "buildCard": {
        this.updateButtonEnabled("selectCard", false);
        this.updateButtonEnabled("cancelSelectCard", false);
        this.updateButtonEnabled("buildCard", false);
        this.updateButtonEnabled("discardSelectedCard", false);
        this.updateButtonEnabled("drawCard", false);
        this.updateButtonEnabled("gain6MC", false);
        break;
      }
      case "discardSelectedCard": {
        this.updateButtonEnabled("selectCard", true);
        this.updateButtonEnabled("cancelSelectCard", false);
        this.updateButtonEnabled("buildCard", false);
        this.updateButtonEnabled("discardSelectedCard", false);
        this.updateButtonEnabled("drawCard", true);
        this.updateButtonEnabled("gain6MC", true);
        break;
      }
      case "drawCard":
      case "gain6MC": {
        this.updateButtonEnabled("selectCard", false);
        this.updateButtonEnabled("cancelSelectCard", false);
        this.updateButtonEnabled("buildCard", false);
        this.updateButtonEnabled("discardSelectedCard", false);
        this.updateButtonEnabled("drawCard", false);
        this.updateButtonEnabled("gain6MC", false);
        break;
      }
      case "selectionCardSelected": {
        this.updateButtonEnabled("selectCard", false);
        this.updateButtonEnabled("cancelSelectCard", false);
        this.updateButtonEnabled("buildCard", true);
        this.updateButtonEnabled("discardSelectedCard", true);
        this.updateButtonEnabled("drawCard", false);
        this.updateButtonEnabled("gain6MC", false);
        break;
      }
      case "selectionCardDiscarded": {
        this.updateButtonEnabled("selectCard", true);
        this.updateButtonEnabled("cancelSelectCard", false);
        this.updateButtonEnabled("buildCard", false);
        this.updateButtonEnabled("discardSelectedCard", false);
        this.updateButtonEnabled("drawCard", true);
        this.updateButtonEnabled("gain6MC", true);
        break;
      }
      case "resetState": {
        if (this.builderIsLocked) {
          break;
        }
        this.resetButtons();
        break;
      }
    }
  }
  resetButtons() {
    if (this.builderIsLocked) {
      return;
    }
    for (let button of this.buttons) {
      button.resetStartEnabled();
    }
  }
  resolveCardBuilderButtonClicked(button) {
    switch (button.name) {
      case "discardSelectedCard": {
        this.removeSelectedCard();
        break;
      }
      case "buildCard":
      case "drawCard":
      case "gain6MC": {
        this.setbuilderIsLocked();
        break;
      }
    }
    this.updateButtonGroupState(button.name);
  }
  setSelectedCard(card) {
    this.selectedCard = card;
    this.updateButtonGroupState("selectionCardSelected");
  }
  getSelectedCard() {
    return this.selectedCard;
  }
  removeSelectedCard() {
    this.selectedCard = void 0;
    this.updateButtonGroupState("cancelSelectCard");
  }
  setbuilderIsLocked() {
    this.builderIsLocked = true;
  }
  getbuilderIsLocked() {
    return this.builderIsLocked;
  }
  resetBuilder() {
    if (this.builderIsLocked) {
      return;
    }
    this.resetButtons();
    this.selectedCard = void 0;
  }
};
var EventCardBuilder = class extends EventBaseCardSelector {
  constructor() {
    super(...arguments);
    this.type = "cardSelectorCardBuilder";
    this.cardBuilder = [];
  }
  hasCardBuilder() {
    return true;
  }
  updateCardSelection(selection) {
    this.setSelectedCardToBuild(selection[0]);
  }
  setSelectedCardToBuild(card) {
    if (this.cardBuilderIdHavingFocus === void 0) {
      return;
    }
    let activeZone = this.cardBuilder[this.cardBuilderIdHavingFocus];
    activeZone.setSelectedCard(card);
    this.removeCardFromSelector(card);
    this.deactivateSelection();
    this.cardSelector.stateFromParent = { selectable: false };
  }
  removeCardFromSelector(card) {
    for (let i = 0; i < this.cardSelector.selectFrom.length; i++) {
      if (this.cardSelector.selectFrom[i].id === card.id) {
        this.cardSelector.selectFrom.splice(i, 1);
      }
    }
  }
  getCardToBuildId() {
    if (this.cardBuilderIdHavingFocus === void 0) {
      return;
    }
    return this.cardBuilder[this.cardBuilderIdHavingFocus].getSelectedCard()?.id;
  }
  cardBuilderButtonClicked(button) {
    if (this.cardBuilderIdHavingFocus === void 0) {
      return;
    }
    this.resetNonFocusedBuildersState();
    this.setSelectionOnButtonClick(button);
    let activeZone = this.cardBuilder[this.cardBuilderIdHavingFocus];
    switch (button.name) {
      case "selectCard": {
        this.cardSelector.stateFromParent = { selectable: true, buildable: true };
        break;
      }
      case "cancelSelectCard": {
        this.cardSelector.stateFromParent = { selectable: false, buildable: false };
        break;
      }
      case "buildCard": {
        this.buildDiscountUsed = true;
        this.buildDiscountValue = 0;
        break;
      }
      case "discardSelectedCard": {
        let card = activeZone.getSelectedCard();
        if (card === void 0) {
          break;
        }
        this.cardSelector.selectFrom.push(card);
        break;
      }
    }
    activeZone.resolveCardBuilderButtonClicked(button);
    if (button.name === "selectCard") {
      return;
    }
    this.cardSelector.stateFromParent = { selectable: false, buildable: false };
  }
  resetNonFocusedBuildersState() {
    for (let i = 0; i < this.cardBuilder.length; i++) {
      if (i === this.cardBuilderIdHavingFocus) {
        continue;
      }
      this.cardBuilder[i].resetButtons();
    }
  }
  setSelectionOnButtonClick(button) {
    switch (button.name) {
      case "selectCard": {
        this.activateSelection();
        break;
      }
      default: {
        this.deactivateSelection();
        break;
      }
    }
  }
  onSwitch() {
    for (let builder of this.cardBuilder) {
      builder.resetBuilder();
    }
  }
};
var EventTargetCard = class extends EventBaseModel {
  constructor() {
    super(...arguments);
    this.type = "targetCard";
    this.autoFinalize = true;
  }
};
var EventGeneric = class extends EventBaseModel {
  constructor() {
    super(...arguments);
    this.type = "generic";
    this.autoFinalize = true;
  }
};
var EventDeckQuery = class extends EventBaseModel {
  constructor() {
    super(...arguments);
    this.type = "deck";
    this.autoFinalize = true;
  }
};
var EventWaiter = class extends EventBaseModel {
  constructor() {
    super(...arguments);
    this.type = "waiter";
    this.locksEventpile = true;
    this.autoFinalize = true;
  }
};
var DrawEvent = class {
  constructor() {
    this.drawDate = /* @__PURE__ */ new Date();
    this.drawResultCardList = [];
    this.finalized = false;
    this.served = false;
    this.queried = false;
  }
};
var EventPhase = class extends EventBaseModel {
  constructor() {
    super(...arguments);
    this.type = "phase";
    this.autoFinalize = true;
  }
};

// src/app/services/designers/button-designer.service.ts
import { Injectable as Injectable2 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/enum/phase.enum.ts
var SelectablePhaseEnum;
(function(SelectablePhaseEnum2) {
  SelectablePhaseEnum2["undefined"] = "UNDEFINED";
  SelectablePhaseEnum2["development"] = "DEVELOPMENT";
  SelectablePhaseEnum2["construction"] = "CONSTRUCTION";
  SelectablePhaseEnum2["action"] = "ACTION";
  SelectablePhaseEnum2["production"] = "PRODUCTION";
  SelectablePhaseEnum2["research"] = "RESEARCH";
})(SelectablePhaseEnum || (SelectablePhaseEnum = {}));
var NonSelectablePhaseEnum;
(function(NonSelectablePhaseEnum2) {
  NonSelectablePhaseEnum2["undefined"] = "UNDEFINED";
  NonSelectablePhaseEnum2["planification"] = "PLANIFICATION";
  NonSelectablePhaseEnum2["development"] = "DEVELOPMENT";
  NonSelectablePhaseEnum2["construction"] = "CONSTRUCTION";
  NonSelectablePhaseEnum2["action"] = "ACTION";
  NonSelectablePhaseEnum2["production"] = "PRODUCTION";
  NonSelectablePhaseEnum2["research"] = "RESEARCH";
})(NonSelectablePhaseEnum || (NonSelectablePhaseEnum = {}));

// src/app/global/global-const.ts
var GLOBAL_GAME_ID = 1;
var GLOBAL_CLIENT_ID = 0;
var GLOBAL_WS_PLAYER = `/topic/player/${GLOBAL_GAME_ID}/${GLOBAL_CLIENT_ID}`;
var GLOBAL_WS_GROUP = `/topic/group/${GLOBAL_GAME_ID}`;
var GLOBAL_WS_ACKNOWLEDGE = `/topic/ack/${GLOBAL_GAME_ID}/${GLOBAL_CLIENT_ID}`;
var GLOBAL_WS_APP_PLAYER = "/app/player";
var GLOBAL_WS_APP_DEBUG = "/app/debug";
var DEBUG_LOG_EVENT_RESOLUTION = false;
var DEBUG_LOG_WS_PUBLISH = true;
var DEBUG_LOG_WS_RECEIVED = true;
var GAME_TAG_LIST = ["building", "space", "science", "power", "earth", "jovian", "plant", "animal", "microbe", "event"];
var GAME_RESSOURCE_LIST = ["megacredit", "heat", "plant", "steel", "titanium", "card"];
var GAME_PHASE_DEVELOPMENT_CARDS_LIST = ["development_base", "development_6mc", "development_second_card"];
var GAME_PHASE_CONSTRUCTION_CARDS_LIST = ["construction_base", "construction_6mc", "construction_draw_card"];
var GAME_PHASE_ACTION_CARDS_LIST = ["action_base", "action_scan_cards", "action_repeat_two"];
var GAME_PHASE_PRODUCTION_CARDS_LIST = ["production_base", "production_7mc", "production_1mc_activate_card"];
var GAME_PHASE_RESEARCH_CARDS_LIST = ["research_base", "research_scan6_keep1", "research_scan2_keep2"];
var GAME_SELECTABLE_PHASE_LIST = [SelectablePhaseEnum.development, SelectablePhaseEnum.construction, SelectablePhaseEnum.action, SelectablePhaseEnum.production, SelectablePhaseEnum.research];
var GAME_HAND_MAXIMUM_SIZE = 10;

// src/app/utils/utils.ts
var PhaseUpgrade = /* @__PURE__ */ new Map([
  ["development_6mc", SelectablePhaseEnum.development],
  ["development_second_card", SelectablePhaseEnum.development],
  ["construction_6mc", SelectablePhaseEnum.construction],
  ["construction_draw_card", SelectablePhaseEnum.construction],
  ["action_repeat_two", SelectablePhaseEnum.action],
  ["action_scan_cards", SelectablePhaseEnum.action],
  ["production_1mc_activate_card", SelectablePhaseEnum.production],
  ["production_7mc", SelectablePhaseEnum.production],
  ["research_scan2_keep2", SelectablePhaseEnum.research],
  ["research_scan6_keep1", SelectablePhaseEnum.research]
]);
var PhaseGroupToPhaseCards = /* @__PURE__ */ new Map([
  [SelectablePhaseEnum.development, GAME_PHASE_DEVELOPMENT_CARDS_LIST],
  [SelectablePhaseEnum.construction, GAME_PHASE_CONSTRUCTION_CARDS_LIST],
  [SelectablePhaseEnum.action, GAME_PHASE_ACTION_CARDS_LIST],
  [SelectablePhaseEnum.production, GAME_PHASE_PRODUCTION_CARDS_LIST],
  [SelectablePhaseEnum.research, GAME_PHASE_RESEARCH_CARDS_LIST]
]);
var Utils = class {
  static jsonCopy(item) {
    return JSON.parse(JSON.stringify(item));
  }
  /**
   *
   * @param treshold
   * @param value
   * @param tresholdType
   * @returns boolean
   * returns true if value is in treshold limit
   */
  static getValueVsTreshold(args) {
    switch (args.treshold) {
      case "equal": {
        return args.value === args.tresholdValue;
      }
      case "min": {
        return args.value >= args.tresholdValue;
      }
      case "max": {
        return args.value <= args.tresholdValue;
      }
    }
  }
  static logText(...text) {
    console.log(text);
  }
  static logEventResolution(...text) {
    if (!DEBUG_LOG_EVENT_RESOLUTION) {
      return;
    }
    this.logText(text);
  }
  static logError(...text) {
    console.log(text);
  }
  static logPublishMessage(prefix, content) {
    if (!DEBUG_LOG_WS_PUBLISH) {
      return;
    }
    console.log(`%cPUBLISHED: ${prefix}: `, "color:red", content);
  }
  static logReceivedMessage(prefix, content) {
    if (!DEBUG_LOG_WS_RECEIVED) {
      return;
    }
    console.log(`%cRECEIVED: ${prefix}: `, "color:green", content);
  }
  static getSelectablePhaseFromPhaseUpgrade(upgrade) {
    return PhaseUpgrade.get(upgrade) ?? SelectablePhaseEnum.undefined;
  }
  static getPhaseCardsListFromPhaseGroupType(groupType) {
    return PhaseGroupToPhaseCards.get(groupType) ?? [];
  }
  /**
  * Can use 'development' | 'construction' | 'action' | 'production' | 'research'
  *
  * Any other value returns SelectablePhaseEnum.undefined
  *
  * Input converted to lowercase before comparison
  */
  static toSelectablePhase(name) {
    switch (name.toLowerCase()) {
      case "development": {
        return SelectablePhaseEnum.development;
      }
      case "construction": {
        return SelectablePhaseEnum.construction;
      }
      case "action": {
        return SelectablePhaseEnum.action;
      }
      case "production": {
        return SelectablePhaseEnum.production;
      }
      case "research": {
        return SelectablePhaseEnum.research;
      }
      default: {
        return SelectablePhaseEnum.undefined;
      }
    }
  }
  static toNumberArray(value) {
    if (Array.isArray(value)) {
      return value;
    }
    return [value];
  }
  static toCardsIdList(modelList) {
    let list = [];
    for (let card of modelList) {
      list.push(card.id);
    }
    return list;
  }
  static toFullCardState(partialState) {
    return Object.assign({
      selectable: false,
      selected: false,
      upgradable: false,
      upgraded: false,
      buildable: false,
      activable: false,
      ignoreCost: false
    }, partialState);
  }
};

// src/app/models/core-game/button.model.ts
var ButtonBase = class {
  constructor() {
    this.enabled = false;
    this.startEnabled = false;
  }
  clicked() {
  }
  resetStartEnabled() {
    this.enabled = this.startEnabled;
  }
  updateEnabled(enabled) {
    this.enabled = enabled;
  }
};
var ImageButton = class extends ButtonBase {
  constructor() {
    super(...arguments);
    this.type = "Image";
  }
};
var EventButtonBase = class extends ButtonBase {
};
var EventMainButton = class extends EventButtonBase {
};
var EventMainButtonSelector = class extends EventMainButton {
  updateEnabledTreshold(args) {
    this.enabled = Utils.getValueVsTreshold(args);
  }
};
var EventCardBuilderButton = class extends EventButtonBase {
};
var NonEventButton = class extends ButtonBase {
};

// src/app/services/designers/button-designer.service.ts
import * as i05 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var ButtonDesigner = class _ButtonDesigner {
  static getStartEnabled(buttonRule) {
    let startEnabled;
    switch (buttonRule) {
      case "default": {
        startEnabled = true;
        break;
      }
      case "upgradePhaseCards": {
        startEnabled = true;
        break;
      }
      case "developmentPhaseBuilder":
      case "constructionPhaseBuilder":
      case "productionPhase": {
        startEnabled = true;
        break;
      }
      case "actionPhase": {
        startEnabled = true;
        break;
      }
      case "selectCardOptionalSell": {
        startEnabled = false;
        break;
      }
      case "sellOptionalCard": {
        startEnabled = true;
        break;
      }
      case "sellOptionalCardCancel": {
        startEnabled = false;
        break;
      }
      case "rollBack": {
        startEnabled = true;
        break;
      }
      case "settings": {
        startEnabled = true;
        break;
      }
      case "closeSettings": {
        startEnabled = true;
        break;
      }
      default: {
        startEnabled = false;
        break;
      }
    }
    return startEnabled;
  }
  static getCaption(buttonRule) {
    let caption;
    switch (buttonRule) {
      case "default": {
        caption = "default validation button";
        break;
      }
      case "planificationPhase": {
        caption = "$other_validate$";
        break;
      }
      case "upgradePhaseCards": {
        caption = "End upgrades";
        break;
      }
      case "developmentPhaseBuilder":
      case "constructionPhaseBuilder":
      case "productionPhase": {
        caption = "$other_validate$";
        break;
      }
      case "addRessourceToSelectedCard": {
        caption = "Add ressources";
        break;
      }
      case "actionPhase": {
        caption = "$other_validate$";
        break;
      }
      case "researchPhaseResult": {
        caption = "Research";
        break;
      }
      case "selectCardForcedSell": {
        caption = "$other_validate$";
        break;
      }
      case "selectCardOptionalSell": {
        caption = "$other_validate$";
        break;
      }
      case "discardCards": {
        caption = "$other_validate$";
        break;
      }
      case "scanKeepResult": {
        caption = "Add selection to hand";
        break;
      }
      case "sellOptionalCard": {
        caption = "$other_sell_card$";
        break;
      }
      case "sellOptionalCardCancel": {
        caption = "$other_cancel$";
        break;
      }
      case "rollBack": {
        caption = "$other_rollback$";
        break;
      }
      case "settings": {
        caption = "$other_settings$";
        break;
      }
      case "closeSettings": {
        caption = "$other_cancel$";
        break;
      }
      default: {
        caption = "";
        break;
      }
    }
    return caption;
  }
  static createEventMainButton(eventSubType) {
    let button = new EventMainButton();
    button.startEnabled = this.getStartEnabled(eventSubType);
    button.enabled = button.startEnabled;
    button.caption = this.getCaption(eventSubType);
    button.eventSubType = eventSubType;
    return button;
  }
  static createEventSelectorMainButton(eventSubType) {
    let button = new EventMainButtonSelector();
    button.startEnabled = this.getStartEnabled(eventSubType);
    button.enabled = button.startEnabled;
    button.caption = this.getCaption(eventSubType);
    button.eventSubType = eventSubType;
    return button;
  }
  static createEventCardBuilderButton(zoneId, option) {
    let buttons = [];
    let buttonCount = 4;
    for (let i = 0; i < buttonCount; i++) {
      let button2 = new EventCardBuilderButton();
      switch (i) {
        case 0: {
          button2.name = "selectCard";
          button2.caption = "Select a card";
          button2.startEnabled = true;
          break;
        }
        case 1: {
          button2.name = "cancelSelectCard";
          button2.caption = "$other_cancel$";
          break;
        }
        case 2: {
          button2.name = "buildCard";
          button2.caption = "$other_validate$";
          break;
        }
        case 3: {
          button2.name = "discardSelectedCard";
          button2.caption = "$other_cancel$";
          break;
        }
      }
      button2.parentCardBuilderId = zoneId;
      button2.enabled = button2.startEnabled;
      buttons.push(button2);
    }
    if (option === void 0) {
      return buttons;
    }
    let button = new EventCardBuilderButton();
    button.parentCardBuilderId = zoneId;
    button.enabled = button.startEnabled;
    switch (option) {
      case "gain6MC": {
        button.caption = "+ $ressource_megacreditvoid_6$";
        break;
      }
      case "drawCard": {
        button.caption = "$ressource_card$";
        break;
      }
    }
    button.startEnabled = true;
    button.name = option;
    button.enabled = button.startEnabled;
    buttons.push(button);
    return buttons;
  }
  static createNonEventButton(name) {
    let button = new NonEventButton();
    button.name = name;
    button.startEnabled = this.getStartEnabled(name);
    button.enabled = button.startEnabled;
    button.caption = this.getCaption(name);
    return button;
  }
  static {
    this.\u0275fac = function ButtonDesigner_Factory(t) {
      return new (t || _ButtonDesigner)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i05.\u0275\u0275defineInjectable({ token: _ButtonDesigner, factory: _ButtonDesigner.\u0275fac, providedIn: "root" });
  }
};

// src/app/services/designers/event-designer.service.ts
import * as i06 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var EventDesigner = class _EventDesigner {
  static generateCardSelector(args) {
    let selector;
    selector = {
      selectFrom: args?.selectFrom ? args.selectFrom : [],
      selectedList: args?.selectedList ? args.selectedList : [],
      selectionQuantity: args?.selectionQuantity ? args.selectionQuantity : 0,
      selectionQuantityTreshold: args?.selectionQuantityTreshold ? args.selectionQuantityTreshold : "equal",
      cardInitialState: args?.cardInitialState ? args.cardInitialState : void 0,
      filter: args?.filter ? args.filter : void 0,
      stateFromParent: args?.filter ? args.stateFromParent : void 0
    };
    return selector;
  }
  static createCardSelector(subType, args) {
    let event = new EventCardSelector();
    event.cardSelector = this.generateCardSelector(args?.cardSelector);
    event.subType = subType;
    switch (subType) {
      case "discardCards": {
        event.title = args?.title ? args.title : `Select ${args?.cardSelector?.selectionQuantity ? args.cardSelector.selectionQuantity : 0} card(s) to discard.`;
        event.cardSelector.cardInitialState = args?.cardSelector?.cardInitialState ? args.cardSelector.cardInitialState : { selectable: true, ignoreCost: true };
        event.locksEventpile = true;
        break;
      }
      case "selectCardForcedSell": {
        event.cardSelector.cardInitialState = { selectable: true, ignoreCost: true };
        event.cardSelector.selectionQuantityTreshold = "min";
        break;
      }
      case "selectCardOptionalSell": {
        event.cardSelector.cardInitialState = { selectable: true, ignoreCost: true };
        event.cardSelector.selectionQuantityTreshold = "min";
        event.cardSelector.selectionQuantity = 1;
        break;
      }
      case "actionPhase": {
        event.cardSelector.filter = { type: "action" };
        event.cardSelector.cardInitialState = { activable: true, selectable: false, buildable: false, ignoreCost: true };
        event.title = "Activate cards :";
        break;
      }
      case "researchPhaseResult":
      case "scanKeepResult": {
        event.title = `Select ${event.cardSelector.selectionQuantity} cards to draw`;
        event.cardSelector.cardInitialState = { selectable: true, ignoreCost: true };
        event.cardSelector.selectionQuantityTreshold = "equal";
        event.refreshSelectorOnSwitch = false;
        event.waiterId = args?.waiterId;
        break;
      }
      default: {
        Utils.logText("EVENT DESIGNER ERROR: Unmapped event creation: ", event);
      }
    }
    event.button = ButtonDesigner.createEventSelectorMainButton(event.subType);
    return event;
  }
  static createCardSelectorRessource(ressource, args) {
    let event = new EventCardSelectorRessource();
    event.cardSelector = this.generateCardSelector(args?.cardSelector);
    event.subType = "addRessourceToSelectedCard";
    event.advancedRessource = { name: ressource.name, valueStock: ressource.valueStock };
    event.title = args?.title ? args.title : `Select a card to add ${event.advancedRessource?.valueStock} ${event.advancedRessource?.name}(s).`;
    event.cardSelector.filter = { type: "stockable", value: event.advancedRessource?.name };
    event.cardSelector.cardInitialState = { selectable: true, ignoreCost: true };
    event.cardSelector.selectionQuantityTreshold = "equal";
    event.cardSelector.selectionQuantity = 1;
    event.button = ButtonDesigner.createEventSelectorMainButton(event.subType);
    event.refreshSelectorOnSwitch = false;
    return event;
  }
  static generateCardBuilder(builderId, option) {
    let builder = new CardBuilder();
    builder.addButtons(ButtonDesigner.createEventCardBuilderButton(builderId, option));
    option ? builder.setOption(option) : null;
    return builder;
  }
  static createCardBuilder(subType, builderType) {
    let event = new EventCardBuilder();
    event.cardSelector = this.generateCardSelector();
    event.cardSelector.cardInitialState = { selectable: false, buildable: true };
    event.subType = subType;
    event.cardBuilder = [];
    event.button = ButtonDesigner.createEventSelectorMainButton(event.subType);
    let buildDiscountValue = 0;
    switch (builderType) {
      case "developmentAbilityOnly": {
        event.cardBuilder.push(this.generateCardBuilder(0));
        break;
      }
      case "development_base": {
        buildDiscountValue = 3;
        event.cardBuilder.push(this.generateCardBuilder(0));
        break;
      }
      case "development_6mc": {
        buildDiscountValue = 6;
        event.cardBuilder.push(this.generateCardBuilder(0));
        break;
      }
      case "development_second_card": {
        buildDiscountValue = 3;
        for (let i = 0; i <= 1; i++) {
          event.cardBuilder.push(this.generateCardBuilder(i));
        }
        break;
      }
      case "constructionAbilityOnly": {
        event.cardBuilder.push(this.generateCardBuilder(0));
        break;
      }
      case "construction_base": {
        event.cardBuilder.push(this.generateCardBuilder(0));
        event.cardBuilder.push(this.generateCardBuilder(1, "drawCard"));
        break;
      }
      case "construction_6mc": {
        event.cardBuilder.push(this.generateCardBuilder(0));
        event.cardBuilder.push(this.generateCardBuilder(1, "gain6MC"));
        break;
      }
      case "construction_draw_card": {
        for (let i = 0; i <= 1; i++) {
          event.cardBuilder.push(this.generateCardBuilder(i));
        }
        break;
      }
      default: {
        Utils.logText("EVENT DESIGNER ERROR: Unmapped event builder type: ", event);
      }
    }
    switch (subType) {
      case "developmentPhaseBuilder": {
        event.title = "Play Green cards :";
        event.cardSelector.filter = { type: "development" };
        break;
      }
      case "constructionPhaseBuilder": {
        event.title = "Play Blue or Red cards :";
        event.cardSelector.filter = { type: "construction" };
        break;
      }
      default: {
        Utils.logText("EVENT DESIGNER ERROR: Unmapped event creation: ", event);
      }
    }
    event.buildDiscountValue = buildDiscountValue;
    event.buildDiscountUsed = false;
    return event;
  }
  static createTargetCard(subType, targetCardId, args) {
    let event = new EventTargetCard();
    event.targetCardId = targetCardId;
    event.subType = subType;
    switch (subType) {
      case "addRessourceToCardId": {
        event.advancedRessource = args?.advancedRessource;
        break;
      }
      case "deactivateTrigger": {
        break;
      }
      default: {
        Utils.logText("EVENT DESIGNER ERROR: Unmapped event creation: ", event);
      }
    }
    event.button = ButtonDesigner.createEventMainButton(event.subType);
    return event;
  }
  static createGeneric(subType, args) {
    let event = new EventGeneric();
    event.subType = subType;
    switch (subType) {
      case "increaseGlobalParameter": {
        event.increaseParameter = args?.increaseParameter;
        break;
      }
      case "upgradePhaseCards": {
        event.title = "Select a phase card to upgrade";
        event.autoFinalize = false;
        event.phaseCardUpgradeList = args?.phaseCardUpgradeList;
        event.phaseCardUpgradeQuantity = args?.phaseCardUpgradeNumber;
        break;
      }
      case "addRessourceToPlayer": {
        event.baseRessource = args?.baseRessource;
        break;
      }
      case "increaseResearchScanKeep": {
        event.increaseResearchScanKeep = args?.scanKeep;
        break;
      }
      case "planificationPhase": {
        event.autoFinalize = false;
        event.title = "Select a phase card:";
        break;
      }
      case "buildCard": {
        event.cardIdToBuild = args?.cardId;
        break;
      }
      case "endOfPhase": {
        break;
      }
      case "drawResult": {
        event.drawResultList = args?.drawEventResult;
        event.waiterId = args?.waiterId;
        break;
      }
      case "waitingGroupReady": {
        event.autoFinalize = false;
        break;
      }
      default: {
        Utils.logText("EVENT DESIGNER ERROR: Unmapped event creation: ", subType, args);
      }
    }
    event.button = ButtonDesigner.createEventMainButton(event.subType);
    return event;
  }
  static createDeckQueryEvent(subType, args) {
    let event = new EventDeckQuery();
    event.subType = subType;
    switch (subType) {
      case "scanKeepQuery": {
        event.scanKeep = args?.scanKeep;
        break;
      }
      case "drawQuery": {
        event.drawDiscard = args?.drawDiscard;
        break;
      }
      case "researchPhaseQuery": {
        event.scanKeep = args?.scanKeep;
        break;
      }
      default: {
        Utils.logText("EVENT DESIGNER ERROR: Unmapped event creation: ", event);
      }
    }
    return event;
  }
  static createWaiter(subType, waiterId) {
    let event = new EventWaiter();
    event.subType = subType;
    switch (subType) {
      case "deckWaiter": {
        event.autoFinalize = false;
        event.locksEventpile = true;
        event.waiterId = waiterId;
        break;
      }
      default: {
        Utils.logText("EVENT DESIGNER ERROR: Unmapped event creation: ", event);
      }
    }
    return event;
  }
  static createPhase(subType) {
    let event = new EventPhase();
    event.subType = subType;
    switch (subType) {
      case "productionPhase": {
        event.autoFinalize = false;
        break;
      }
      case "developmentPhase": {
        break;
      }
      case "constructionPhase": {
        break;
      }
      case "researchPhase": {
        break;
      }
      default: {
        Utils.logText("EVENT DESIGNER ERROR: Unmapped event creation: ", subType);
      }
    }
    event.button = ButtonDesigner.createEventMainButton(event.subType);
    return event;
  }
  static {
    this.\u0275fac = function EventDesigner_Factory(t) {
      return new (t || _EventDesigner)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i06.\u0275\u0275defineInjectable({ token: _EventDesigner, factory: _EventDesigner.\u0275fac, providedIn: "root" });
  }
};

// src/app/services/cards/project-card-played-effect.service.ts
import * as i08 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/services/cards/project-card-scaling-productions.service.ts
import { Injectable as Injectable4 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i07 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var ProjectCardScalingProductionsService = class _ProjectCardScalingProductionsService {
  getScalingProduction(ressource, playedCardList, tagState) {
    let scalingProductions = 0;
    switch (ressource) {
      case "megacredit": {
        if (playedCardList.includes(123)) {
          scalingProductions += this.getCardScalingProduction(123, tagState);
        }
        if (playedCardList.includes(181)) {
          scalingProductions += this.getCardScalingProduction(181, tagState);
        }
        break;
      }
      case "heat": {
        if (playedCardList.includes(180)) {
          scalingProductions += this.getCardScalingProduction(180, tagState);
        }
        break;
      }
      case "card": {
        if (playedCardList.includes(213)) {
          scalingProductions += this.getCardScalingProduction(213, tagState);
        }
      }
    }
    return scalingProductions;
  }
  getCardScalingProduction(cardId, tagState) {
    let scalingProduction = 0;
    switch (cardId) {
      case 123: {
        scalingProduction = this.getPlayedTagNumber("earth", tagState);
        break;
      }
      case 180: {
        scalingProduction = this.getPlayedTagNumber("space", tagState);
        break;
      }
      case 181: {
        scalingProduction = this.getPlayedTagNumber("space", tagState);
        break;
      }
      case 213: {
        scalingProduction = Math.floor(this.getPlayedTagNumber("science", tagState) / 3);
        break;
      }
    }
    return scalingProduction;
  }
  getPlayedTagNumber(tagType, tagState) {
    let tagNumber = 0;
    for (let tags of tagState) {
      if (tags.name === tagType) {
        tagNumber = tags.valueCount;
        break;
      }
    }
    return tagNumber;
  }
  static {
    this.\u0275fac = function ProjectCardScalingProductionsService_Factory(t) {
      return new (t || _ProjectCardScalingProductionsService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i07.\u0275\u0275defineInjectable({ token: _ProjectCardScalingProductionsService, factory: _ProjectCardScalingProductionsService.\u0275fac, providedIn: "root" });
  }
};

// src/app/services/cards/project-card-played-effect.service.ts
var ProjectCardPlayedEffectService = class _ProjectCardPlayedEffectService {
  constructor(scalingProductionService) {
    this.scalingProductionService = scalingProductionService;
    this.playedCardList = [];
  }
  addRessourceToCard(card, ressource) {
    card.addRessourceToStock(ressource);
  }
  addRessourceToPlayer(ressource, quantity) {
    this.clientPlayerState.addRessource(ressource, quantity);
  }
  addProductionToPlayer(ressource, quantity) {
    this.clientPlayerState.addProduction(ressource, quantity);
  }
  addTrToPlayer(quantity) {
    this.clientPlayerState.addTR(quantity);
  }
  playCard(card, playerState) {
    this.clientPlayerState = playerState;
    this.clientPlayerState.playCard(card);
    switch (card.cardCode) {
      case "20": {
        this.addRessourceToCard(card, { name: "microbe", valueStock: 2 });
        break;
      }
      case "29": {
        break;
      }
      case "46": {
        break;
      }
      case "58": {
        break;
      }
      case "69": {
        this.addTrToPlayer(2);
        break;
      }
      case "76": {
        this.addRessourceToPlayer("megacredit", 7);
        break;
      }
      case "81": {
        this.addRessourceToPlayer("plant", 4);
        this.addTrToPlayer(1);
        break;
      }
      case "108": {
        this.addProductionToPlayer("plant", 1);
        break;
      }
      case "129": {
        this.addProductionToPlayer("steel", 1);
        break;
      }
      case "135": {
        this.addProductionToPlayer("megacredit", 1);
        this.addProductionToPlayer("titanium", 1);
        this.addRessourceToPlayer("heat", -3);
        break;
      }
      case "141": {
        this.addProductionToPlayer("heat", 3);
        break;
      }
      case "144": {
        this.addProductionToPlayer("steel", 1);
        break;
      }
      case "145": {
        this.addProductionToPlayer("plant", 1);
        this.addRessourceToPlayer("plant", 1);
        break;
      }
      case "155": {
        this.addProductionToPlayer("plant", 1);
        break;
      }
      case "161": {
        this.addProductionToPlayer("plant", 2);
        this.addProductionToPlayer("heat", 2);
        break;
      }
      case "163": {
        this.addProductionToPlayer("heat", 3);
        break;
      }
      case "171": {
        this.addProductionToPlayer("plant", 2);
        break;
      }
      case "175": {
        this.addProductionToPlayer("heat", 1);
        break;
      }
      case "182": {
        this.addProductionToPlayer("plant", 2);
        break;
      }
      case "183": {
        this.addProductionToPlayer("heat", 5);
        break;
      }
      case "184": {
        this.addProductionToPlayer("plant", 2);
        break;
      }
      case "190": {
        this.addProductionToPlayer("megacredit", 2);
        break;
      }
      case "197": {
        this.addProductionToPlayer("heat", 2);
        break;
      }
      case "198": {
        this.addProductionToPlayer("plant", 3);
        this.addRessourceToPlayer("plant", 1);
        break;
      }
      case "201": {
        this.addProductionToPlayer("megacredit", 1);
        this.addProductionToPlayer("steel", 1);
        break;
      }
      case "202": {
        this.addProductionToPlayer("card", 1);
        this.addProductionToPlayer("heat", 4);
        break;
      }
      case "204": {
        this.addProductionToPlayer("titanium", 1);
        break;
      }
      case "P29": {
        this.addProductionToPlayer("heat", 4);
        break;
      }
      case "D22": {
        this.addProductionToPlayer("plant", 2);
        break;
      }
      case "D29": {
        this.addProductionToPlayer("card", 2);
        this.addProductionToPlayer("steel", 1);
        break;
      }
      case "D32": {
        this.addProductionToPlayer("heat", 4);
        break;
      }
      case "D35": {
        this.addProductionToPlayer("heat", 3);
        if (this.clientPlayerState.getMilestoneCompleted() > 0) {
          this.addRessourceToPlayer("heat", 4);
        }
        break;
      }
      case "D37": {
        this.addProductionToPlayer("heat", 1);
        break;
      }
      case "D40": {
        this.addProductionToPlayer("plant", 1);
        break;
      }
      case "F14": {
        this.addRessourceToPlayer("plant", 4);
        break;
      }
      case "P26": {
        this.addTrToPlayer(this.clientPlayerState.getPhaseCardUpgradedCount());
        break;
      }
      case "P30": {
        this.addProductionToPlayer("megacredit", 2);
        this.addTrToPlayer(this.clientPlayerState.getMilestoneCompleted());
        break;
      }
    }
    let playerRessources = this.clientPlayerState.getRessources();
    for (let i = 0; i < playerRessources.length; i++) {
      let scalingProd = this.scalingProductionService.getScalingProduction(playerRessources[i].name, this.clientPlayerState.getProjectPlayedIdList(), this.clientPlayerState.getTags());
      this.clientPlayerState.setScalingProduction(playerRessources[i].name, scalingProd);
    }
    return this.clientPlayerState;
  }
  /**
       *
       * @param card
       * @returns Event List
  
      * Events should be filled to the list according to their order of execution.
       */
  getPlayedCardEvent(card) {
    let result = [];
    switch (card.cardCode) {
      case "36": {
        result.push(this.createEventIncreaseResearchScanKeep({ keep: 0, scan: 2 }));
        break;
      }
      case "66": {
        result.push(this.createEventIncreaseGlobalParameter("ocean", 1));
        break;
      }
      case "74": {
        result.push(this.createEventDraw(1));
        result.push(this.createEventIncreaseGlobalParameter("ocean", 1));
        break;
      }
      case "77": {
        result.push(this.createEventIncreaseGlobalParameter("temperature", 2));
        result.push(this.createEventIncreaseGlobalParameter("ocean", 2));
        break;
      }
      case "76": {
        result.push(this.createEventIncreaseGlobalParameter("temperature", 3));
        break;
      }
      case "81": {
        result.push(this.createEventAddRessourceToSelectedCard({ name: "animal", valueStock: 2 }));
        result.push(this.createEventAddRessourceToSelectedCard({ name: "microbe", valueStock: 3 }));
        break;
      }
      case "83": {
        result.push(this.createEventScanKeep({ scan: 3, keep: 1 }));
        break;
      }
      case "92": {
        result.push(this.createEventIncreaseGlobalParameter("ocean", 1));
        break;
      }
      case "93": {
        result.push(this.createEventIncreaseGlobalParameter("temperature", 1));
        result.push(this.createEventIncreaseGlobalParameter("ocean", 1));
        result.push(this.createEventDraw(2));
        break;
      }
      case "96": {
        result.push(this.createEventDraw(2));
        break;
      }
      case "163": {
        result.push(this.createEventDiscard(1));
        result.push(this.createEventDraw(2));
        break;
      }
      case "183": {
        result.push(this.createEventDraw(2));
        break;
      }
      case "184": {
        result.push(this.createEventIncreaseGlobalParameter("temperature", 1));
        break;
      }
      case "197": {
        result.push(this.createEventIncreaseGlobalParameter("ocean", 1));
        break;
      }
      case "D22": {
        result.push(this.createEventUpgradePhaseCard(1));
        break;
      }
      case "D32": {
        result.push(this.createEventUpgradePhaseCard(1));
        break;
      }
      case "D37": {
        result.push(this.createEventUpgradePhaseCard(1, [0]));
        break;
      }
      case "D40": {
        result.push(this.createEventUpgradePhaseCard(1, [3]));
        break;
      }
      case "F09": {
        result.push(this.createEventIncreaseGlobalParameter("infrastructure", 1));
        result.push(this.createEventDraw(2));
        result.push(this.createEventDiscard(1));
        break;
      }
      case "F10": {
        result.push(this.createEventIncreaseGlobalParameter("ocean", 1));
        result.push(this.createEventIncreaseGlobalParameter("infrastructure", 1));
        break;
      }
      case "F12": {
        result.push(this.createEventIncreaseGlobalParameter("infrastructure", 1));
        result.push(this.createEventIncreaseGlobalParameter("oxygen", 1));
        result.push(this.createEventIncreaseGlobalParameter("temperature", 1));
        break;
      }
      case "F14": {
        result.push(this.createEventIncreaseGlobalParameter("infrastructure", 2));
        break;
      }
      case "F17": {
        result.push(this.createEventIncreaseGlobalParameter("infrastructure", 3));
        break;
      }
      default: {
        return void 0;
      }
    }
    return result;
  }
  getCostModFromTriggers(mod) {
    if (!mod || !mod.playedTriggersList) {
      return 0;
    }
    let newMod = 0;
    let tags = [];
    if (mod.tagList != void 0) {
      tags = mod.tagList.filter((e, i) => e !== -1);
    }
    for (let triggerId of mod.playedTriggersList) {
      newMod += this.calculateCostModFromTrigger(triggerId, mod);
    }
    return newMod;
  }
  calculateCostModFromTrigger(triggerId, mod) {
    if (!mod || !mod.tagList) {
      return 0;
    }
    let costMod = 0;
    switch (triggerId) {
      case 25: {
        if (mod.tagList.includes(GlobalInfo.getIdFromType("power")) != true) {
          break;
        }
        costMod += 4;
        break;
      }
      case 37: {
        if (mod.tagList.includes(GlobalInfo.getIdFromType("earth")) === true) {
          costMod += 3;
        }
        if (mod.tagList.includes(GlobalInfo.getIdFromType("jovian")) === true) {
          costMod += 3;
        }
        break;
      }
    }
    return costMod;
  }
  getEventTriggerByPlayedCard(playedCard, triggerIdList, state) {
    if (triggerIdList.length === 0) {
      return;
    }
    let events = [];
    for (let triggerId of triggerIdList) {
      let newEvent = this.generateEventTriggerByPlayedCard(triggerId, playedCard, state);
      if (newEvent) {
        events = events.concat(newEvent);
      }
    }
    return events;
  }
  generateEventTriggerByPlayedCard(triggerId, playedCard, state) {
    let result = [];
    switch (triggerId) {
      default: {
        return;
      }
    }
    return result;
  }
  getTriggerByTagGained(playedCard, triggerIdList) {
    if (triggerIdList.length === 0) {
      return;
    }
    let events = [];
    for (let triggerId of triggerIdList) {
      let newEvent = this.generateEventTriggerByTagGained(triggerId, playedCard);
      if (newEvent) {
        events = events.concat(newEvent);
      }
    }
    return events;
  }
  generateEventTriggerByTagGained(triggerId, playedCard) {
    let result = [];
    let playedCardTags = playedCard.tagsId;
    let cardPlayedIsTheTrigger = triggerId === playedCard.id;
    switch (triggerId) {
      case 25: {
        if (playedCardTags.includes(GlobalInfo.getIdFromType("power")) != true) {
          break;
        }
        result.push(this.createEventDraw(1));
        break;
      }
      case 37: {
        if (cardPlayedIsTheTrigger === true) {
          break;
        }
        if (playedCardTags.includes(GlobalInfo.getIdFromType("earth")) != true && playedCardTags.includes(GlobalInfo.getIdFromType("jovian")) != true) {
          break;
        }
        result.push(this.createEventDraw(1));
        break;
      }
      case 45: {
        if (playedCardTags.includes(GlobalInfo.getIdFromType("event")) != true) {
          break;
        }
        result.push(this.createEventAddRessource([
          { name: "plant", valueStock: 2 },
          { name: "heat", valueStock: 2 }
        ]));
        break;
      }
      case 222: {
        if (playedCardTags.includes(GlobalInfo.getIdFromType("earth")) != true) {
          break;
        }
        result.push(this.createEventAddRessourceToCardId({ name: "microbe", valueStock: 1 }, triggerId));
        break;
      }
      default: {
        return;
      }
    }
    return result;
  }
  getEventTriggerByRessourceAddedToCard(targetCard, triggerIdList, ressource) {
    if (triggerIdList.length === 0) {
      return;
    }
    let events = [];
    for (let triggerId of triggerIdList) {
      let newEvent = this.generateEventTriggerByRessourceAddedToCard(triggerId, targetCard, ressource);
      if (newEvent) {
        events = events.concat(newEvent);
      }
    }
    return events;
  }
  generateEventTriggerByRessourceAddedToCard(triggerId, targetCard, ressource) {
    let result = [];
    switch (triggerId) {
      case 222: {
        if (ressource.name != "microbe" || ressource.valueStock < 1) {
          break;
        }
        let stock = targetCard.getStockValue("microbe");
        if (stock >= 5) {
          result.push(this.createEventDeactivateTrigger(triggerId));
        }
        let limit = targetCard.getCardTriggerLimit();
        if (limit === void 0) {
          break;
        }
        let addValue = Math.min(ressource.valueStock, limit?.limit - limit.value);
        if (addValue <= 0) {
          break;
        }
        result.push(this.createEventIncreaseResearchScanKeep({ keep: 0, scan: addValue }));
        targetCard.triggerLimit.value += addValue;
        break;
      }
      default: {
        return;
      }
    }
    return result;
  }
  getEventTriggerByGlobalParameterIncrease(triggerIdList, parameter) {
    if (triggerIdList.length === 0) {
      return;
    }
    let events = [];
    for (let triggerId of triggerIdList) {
      let newEvent = this.generateEventTriggerByGlobalParameterIncrease(triggerId, parameter);
      if (newEvent) {
        events = events.concat(newEvent);
      }
    }
    return events;
  }
  generateEventTriggerByGlobalParameterIncrease(triggerId, parameter) {
    let result = [];
    switch (triggerId) {
      case 46: {
        if (parameter.name != "temperature") {
          break;
        }
        result.push(this.createEventAddRessourceToCardId({ name: "science", valueStock: parameter.steps }, triggerId));
        break;
      }
      case 279: {
        if (parameter.name != "infrastructure") {
          break;
        }
        result.push(this.createEventAddRessourceToCardId({ name: "science", valueStock: parameter.steps }, triggerId));
        break;
      }
      default: {
        return;
      }
    }
    return result;
  }
  createEventDraw(drawNumber) {
    return EventDesigner.createDeckQueryEvent("drawQuery", { drawDiscard: { draw: drawNumber, discard: 0 } });
  }
  createEventDiscard(discardNumber) {
    return EventDesigner.createCardSelector("discardCards", { cardSelector: { selectionQuantity: discardNumber } });
  }
  createEventUpgradePhaseCard(phaseCardUpgradeCount, phaseCardList) {
    return EventDesigner.createGeneric("upgradePhaseCards", { phaseCardUpgradeList: phaseCardList, phaseCardUpgradeNumber: phaseCardUpgradeCount });
  }
  createEventIncreaseGlobalParameter(parameterName, steps) {
    this.addTrToPlayer(steps);
    return EventDesigner.createGeneric("increaseGlobalParameter", { increaseParameter: { name: parameterName, steps } });
  }
  createEventAddRessource(gain) {
    return EventDesigner.createGeneric("addRessourceToPlayer", { baseRessource: gain });
  }
  createEventAddRessourceToCardId(gain, cardId) {
    return EventDesigner.createTargetCard("addRessourceToCardId", cardId, { advancedRessource: gain });
  }
  createEventIncreaseResearchScanKeep(scanKeep) {
    return EventDesigner.createGeneric("increaseResearchScanKeep", { scanKeep });
  }
  createEventAddRessourceToSelectedCard(ressource, cardSelectionQuantity = 1) {
    return EventDesigner.createCardSelectorRessource(ressource, { cardSelector: { selectionQuantity: cardSelectionQuantity } });
  }
  createEventDeactivateTrigger(triggerId) {
    return EventDesigner.createTargetCard("deactivateTrigger", triggerId);
  }
  createEventScanKeep(scanKeep) {
    return EventDesigner.createDeckQueryEvent("scanKeepQuery", { scanKeep });
  }
  static {
    this.\u0275fac = function ProjectCardPlayedEffectService_Factory(t) {
      return new (t || _ProjectCardPlayedEffectService)(i08.\u0275\u0275inject(ProjectCardScalingProductionsService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i08.\u0275\u0275defineInjectable({ token: _ProjectCardPlayedEffectService, factory: _ProjectCardPlayedEffectService.\u0275fac, providedIn: "root" });
  }
};

// src/app/models/cards/card-cost.model.ts
var CardCost = class _CardCost {
  constructor(projectCardPlayed) {
    this.projectCardPlayed = projectCardPlayed;
  }
  initialize(initialCost) {
    this.costInitial = initialCost;
    this.updateCost();
  }
  updateCost(mod) {
    this.costMod = this.updateCostMod(mod);
    this.cost = Math.max(this.costInitial - this.costMod, 0);
    return this.cost;
  }
  updateCostMod(mod) {
    if (!mod) {
      return 0;
    }
    let newMod = 0;
    if (mod.steelState && mod.tagList?.includes(0)) {
      newMod += mod.steelState.valueProd * mod.steelState.valueMod;
    }
    if (mod.titaniumState && mod.tagList?.includes(1)) {
      newMod += mod.titaniumState.valueProd * mod.titaniumState.valueMod;
    }
    if (mod.playedTriggersList) {
      newMod += this.projectCardPlayed.getCostModFromTriggers(mod);
    }
    if (mod.buildDiscount) {
      newMod += mod.buildDiscount;
    }
    return newMod;
  }
  static {
    this.\u0275fac = function CardCost_Factory(t) {
      return new (t || _CardCost)(i09.\u0275\u0275inject(ProjectCardPlayedEffectService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i09.\u0275\u0275defineInjectable({ token: _CardCost, factory: _CardCost.\u0275fac });
  }
};

// src/app/components/cards/base/base-card/base-card.component.ts
import { Component as Component4, Input as Input2, Output, EventEmitter } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";

// src/app/models/cards/card-state.model.ts
var CardStateModel = class {
  constructor() {
    this.currentState = this.defaultState();
    this.initialState = this.defaultState();
  }
  defaultState() {
    return {
      selectable: false,
      selected: false,
      upgradable: false,
      upgraded: false,
      buildable: false,
      activable: false,
      ignoreCost: false
    };
  }
  isSelectable() {
    return this.currentState.selectable;
  }
  isSelected() {
    return this.currentState.selected;
  }
  isUpgradable() {
    return this.currentState.upgradable;
  }
  isUpgraded() {
    return this.currentState.upgraded;
  }
  isBuildable() {
    return this.currentState.buildable;
  }
  isActivable() {
    return this.currentState.activable;
  }
  isIgnoreCost() {
    return this.currentState.ignoreCost;
  }
  setSelectable(value) {
    this.currentState.selectable = value;
  }
  setSelected(value) {
    this.currentState.selected = value;
  }
  setUpgradable(value) {
    this.currentState.upgradable = value;
  }
  setUpgraded(value) {
    this.currentState.upgraded = value;
  }
  setBuildable(value) {
    this.currentState.buildable = value;
  }
  setActivable(value) {
    this.currentState.activable = value;
  }
  setIgnoreCost(value) {
    this.currentState.ignoreCost = value;
  }
  resetStateToInitial() {
    this.currentState = Utils.jsonCopy(this.initialState);
  }
  getCurrentState() {
    return this.currentState;
  }
  setCurrentState(state) {
    this.currentState = Utils.toFullCardState(state);
  }
  getInitialState() {
    return this.initialState;
  }
  setInitialState(state) {
    this.initialState = Utils.toFullCardState(state);
    this.resetStateToInitial();
  }
};

// src/app/components/cards/base/base-card/base-card.component.ts
import * as i010 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var BaseCardComponent = class _BaseCardComponent {
  constructor() {
    this.state = new CardStateModel();
    this.cardStateChange = new EventEmitter();
  }
  ngOnInit() {
  }
  ngOnChanges(changes) {
    if (changes["initialState"] && changes["initialState"].currentValue) {
      this.state.resetStateToInitial();
    }
  }
  ngDoCheck() {
    if (this.initialState != void 0) {
      this.state.resetStateToInitial();
    }
    if (this.stateFromParent != void 0) {
      this.changeStateFromParent();
    }
  }
  changeStateFromParent() {
    if (!this.stateFromParent) {
      return;
    }
    this.state.setCurrentState(this.stateFromParent);
  }
  static {
    this.\u0275fac = function BaseCardComponent_Factory(t) {
      return new (t || _BaseCardComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i010.\u0275\u0275defineComponent({ type: _BaseCardComponent, selectors: [["app-base-card"]], inputs: { initialState: "initialState", stateFromParent: "stateFromParent" }, outputs: { cardStateChange: "cardStateChange" }, standalone: true, features: [i010.\u0275\u0275NgOnChangesFeature, i010.\u0275\u0275StandaloneFeature], decls: 2, vars: 0, template: function BaseCardComponent_Template(rf, ctx) {
      if (rf & 1) {
        i010.\u0275\u0275elementStart(0, "p");
        i010.\u0275\u0275text(1, "base-card works!");
        i010.\u0275\u0275elementEnd();
      }
    }, dependencies: [CommonModule] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i010.\u0275setClassDebugInfo(BaseCardComponent, { className: "BaseCardComponent", filePath: "src\\app\\components\\cards\\base\\base-card\\base-card.component.ts", lineNumber: 13 });
})();

// src/app/components/cards/project/project-card/project-card.component.ts
import * as i017 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/services/core-game/game-state.service.ts
import { Injectable as Injectable12 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { BehaviorSubject } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/rxjs.js?v=ba073120";

// src/app/models/player-info/player-state-score.model.ts
var PlayerScoreStateModel = class _PlayerScoreStateModel {
  constructor(data) {
    this.milestoneCount = 0;
    this.vp = 0;
    this.terraformingRating = 0;
    this.milestoneCount = data.mc;
    this.vp = data.v;
    this.terraformingRating = data.tr;
  }
  addMilestoneCompleted(milestone = 1) {
    this.milestoneCount += milestone;
    console.log(this.milestoneCount);
  }
  getMilestoneCompletedNumber() {
    return this.milestoneCount;
  }
  addVP(points) {
    this.vp += points;
  }
  getVP() {
    return this.vp;
  }
  addTR(tr) {
    this.terraformingRating += tr;
  }
  getTR() {
    return this.terraformingRating;
  }
  toJson() {
    return {
      mc: this.milestoneCount,
      v: this.vp,
      tr: this.terraformingRating
    };
  }
  static fromJson(data) {
    if (!data.mc || !data.v || !data.tr) {
      throw new Error("Invalid PlayerInfoStateDTO: Missing required fields");
    }
    return new _PlayerScoreStateModel(data);
  }
  static empty() {
    return new _PlayerScoreStateModel({
      mc: 0,
      tr: 0,
      v: 0
    });
  }
};

// src/app/models/player-info/player-state-info.model.ts
var PlayerInfoStateModel = class _PlayerInfoStateModel {
  constructor(data) {
    this.id = data.i;
    this.name = data.n;
    this.color = data.c;
  }
  setId(id) {
    this.id = id;
  }
  getId() {
    return this.id;
  }
  setName(name) {
    this.name = name;
  }
  getName() {
    return this.name;
  }
  setColor(color) {
    this.color = color;
  }
  getColor() {
    return this.color;
  }
  toJson() {
    return {
      i: this.id,
      n: this.name,
      c: this.color
    };
  }
  static fromJson(data) {
    if (!data.i || !data.n || !data.c) {
      throw new Error("Invalid PlayerInfoStateDTO: Missing required fields");
    }
    return new _PlayerInfoStateModel(data);
  }
  static empty() {
    return new _PlayerInfoStateModel({
      i: 0,
      c: "rgb(0, 0, 0)",
      n: "Player 0"
    });
  }
};

// src/app/models/player-info/player-state-tag.model.ts
var PlayerTagStateModel = class _PlayerTagStateModel {
  constructor(data) {
    this.tags = this.initializeTags();
    this.tags = data.t;
  }
  initializeTags() {
    let result = [];
    for (let i = 0; i <= 9; i++) {
      let tag = {
        id: i,
        name: GAME_TAG_LIST[i],
        idImageUrl: i,
        valueCount: 0,
        valueMod: 0
      };
      result.push(tag);
    }
    return result;
  }
  addTag(tagId) {
    if (tagId === -1) {
      return;
    }
    this.tags[tagId].valueCount += 1;
  }
  addPlayedCardTags(card) {
    for (let tagId of card.tagsId) {
      this.addTag(tagId);
    }
  }
  getTags() {
    return this.tags;
  }
  toJson() {
    return {
      t: this.tags
    };
  }
  static fromJson(data) {
    if (!data.t) {
      throw new Error("Invalid PlayerInfoStateDTO: Missing required fields");
    }
    return new _PlayerTagStateModel(data);
  }
  static empty() {
    return new _PlayerTagStateModel({
      t: []
    });
  }
};

// src/app/models/player-info/player-state-ressource.model.ts
var ressourceIndex = /* @__PURE__ */ new Map([
  ["megacredit", 0],
  ["heat", 1],
  ["plant", 2],
  ["steel", 3],
  ["titanium", 4],
  ["card", 5]
]);
var PlayerRessourceStateModel = class _PlayerRessourceStateModel {
  constructor(data) {
    this.ressources = this.initializeRessources();
    this.ressources = data.r;
  }
  initializeRessources() {
    let result = [];
    for (let i = 0; i <= 5; i++) {
      let ressource = {
        id: i,
        name: GAME_RESSOURCE_LIST[i],
        valueMod: 0,
        valueProd: 0,
        valueBaseProd: 0,
        valueStock: 0,
        hasStock: i != 3 && i != 4,
        imageUrlId: GlobalInfo.getIdFromType(GAME_RESSOURCE_LIST[i])
      };
      result.push(ressource);
    }
    return result;
  }
  getRessources() {
    return this.ressources;
  }
  getRessourceInfoFromId(ressourceId) {
    for (let i = 0; i < this.ressources.length; i++) {
      if (this.ressources[i].id === ressourceId) {
        return this.ressources[i];
      }
    }
    return;
  }
  getRessourceStateFromType(type) {
    for (let i = 0; i < this.ressources.length; i++) {
      if (this.ressources[i].name === type) {
        return this.ressources[i];
      }
    }
    return;
  }
  addProduction(ressource, quantity) {
    this.ressources[Number(ressourceIndex.get(ressource))].valueBaseProd += quantity;
  }
  addRessource(ressource, quantity) {
    this.ressources[Number(ressourceIndex.get(ressource))].valueStock += quantity;
  }
  setScalingProduction(ressource, scalingProduction) {
    this.ressources[Number(ressourceIndex.get(ressource))].valueProd = this.ressources[Number(ressourceIndex.get(ressource))].valueBaseProd + scalingProduction;
  }
  toJson() {
    return {
      r: this.ressources
    };
  }
  static fromJson(data) {
    if (!data.r) {
      throw new Error("Invalid PlayerInfoStateDTO: Missing required fields");
    }
    return new _PlayerRessourceStateModel(data);
  }
  static empty() {
    return new _PlayerRessourceStateModel({
      r: []
    });
  }
};

// src/app/services/cards/phase-card-info.service.ts
import { Injectable as Injectable7 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/models/cards/phase-card.model.ts
var PhaseCardGroupModel = class {
  constructor() {
    this.phaseCards = [];
    this.phaseIsUpgraded = false;
  }
  getUpgradedPhaseCard() {
    for (let card of this.phaseCards) {
      if (card.phaseCardUpgraded === true) {
        return card;
      }
    }
    return new PhaseCardModel();
  }
  setPhaseCardUpgraded(upgrade) {
    if (this.phaseIsUpgraded) {
      return;
    }
    for (let card of this.phaseCards) {
      card.setPhaseCardUpgraded(card.phaseType == upgrade);
    }
    this.phaseIsUpgraded = true;
  }
  getPhaseCardStateList() {
    let stateList = [];
    for (let card of this.phaseCards) {
      stateList.push(card.getPhaseCardState());
    }
    return stateList;
  }
  getPhaseIsUpgraded() {
    return this.phaseIsUpgraded;
  }
};
var PhaseCardModel = class {
  setPhaseCardUpgraded(upgraded) {
    this.phaseCardUpgraded = upgraded;
  }
  getPhaseCardState() {
    let state;
    state = {
      selectable: false,
      selected: false,
      upgradable: false,
      upgraded: this.phaseCardUpgraded,
      buildable: false,
      activable: false,
      ignoreCost: false
    };
    return state;
  }
};

// src/assets/data/phase-cards_data.json
var phase_cards_data_default = [
  {
    phaseId: 0,
    cardLevel: 0,
    phaseGroupType: "development",
    phaseType: "development_base",
    baseDescription: {
      en: "Each player may play 1 green project card.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Reducede cost of the card you play this phase by 3MC.",
      fr: "abc"
    }
  },
  {
    phaseId: 0,
    cardLevel: 1,
    phaseGroupType: "development",
    phaseType: "development_6mc",
    baseDescription: {
      en: "Each player may play 1 green project card.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Reduced cost of the card you play this phase by 6MC.",
      fr: "abc"
    }
  },
  {
    phaseId: 0,
    cardLevel: 2,
    phaseGroupType: "development",
    phaseType: "development_second_card",
    baseDescription: {
      en: "Each player may play 1 green project card.",
      fr: "abc"
    },
    bonusDescription: {
      en: "You can play an additional green project card this phase.$skipline$Reduced cost of the first card you play this phase by 3MC.",
      fr: "abc"
    }
  },
  {
    phaseId: 1,
    cardLevel: 0,
    phaseGroupType: "construction",
    phaseType: "construction_base",
    baseDescription: {
      en: "Each player may play 1 blue card OR 1 red project card.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Draw a card.$skipline$OR$skipline$Play an additional blue card OR red card this phase.",
      fr: "abc"
    }
  },
  {
    phaseId: 1,
    cardLevel: 1,
    phaseGroupType: "construction",
    phaseType: "construction_6mc",
    baseDescription: {
      en: "Each player may play 1 blue card OR 1 red project card.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Play an additional blue card OR red card this phase.$skipline$OR$skipline$Gain 6MC.",
      fr: "abc"
    }
  },
  {
    phaseId: 1,
    cardLevel: 2,
    phaseGroupType: "construction",
    phaseType: "construction_draw_card",
    baseDescription: {
      en: "Each player may play 1 blue card OR 1 red project card.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Play an additional blue card OR red card this phase.$skipline$AND$skipline$Draw a card.",
      fr: "abc"
    }
  },
  {
    phaseId: 2,
    cardLevel: 0,
    phaseGroupType: "action",
    phaseType: "action_base",
    baseDescription: {
      en: "Each player activates any ACTION effect and STANDARD actions.",
      fr: "abc"
    },
    bonusDescription: {
      en: "You may activate one ACTION an additional time.",
      fr: "abc"
    }
  },
  {
    phaseId: 2,
    cardLevel: 1,
    phaseGroupType: "action",
    phaseType: "action_scan_cards",
    baseDescription: {
      en: "Each player activates any ACTION effect and STANDARD actions.",
      fr: "abc"
    },
    bonusDescription: {
      en: "You may repeat one of your ACTION effects once.$skipline$Reveal the top 3 cards of the deck. Place a blue or red card revealed this way into your hand, discard the rest.",
      fr: "abc"
    }
  },
  {
    phaseId: 2,
    cardLevel: 2,
    phaseGroupType: "action",
    phaseType: "action_repeat_two",
    baseDescription: {
      en: "Each player activates any ACTION effect and STANDARD actions.",
      fr: "abc"
    },
    bonusDescription: {
      en: "You may repeat two of your ACTION effects once.",
      fr: "abc"
    }
  },
  {
    phaseId: 3,
    cardLevel: 0,
    phaseGroupType: "production",
    phaseType: "production_base",
    baseDescription: {
      en: "Each player gains heat, plants, and draw cards according to their production. They also gain MC equal to their production + TR.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Gain 4MC",
      fr: "abc"
    }
  },
  {
    phaseId: 3,
    cardLevel: 1,
    phaseGroupType: "production",
    phaseType: "production_7mc",
    baseDescription: {
      en: "Each player gains heat, plants, and draw cards according to their production. They also gain MC equal to their production + TR.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Gain 7MC.",
      fr: "abc"
    }
  },
  {
    phaseId: 3,
    cardLevel: 2,
    phaseGroupType: "production",
    phaseType: "production_1mc_activate_card",
    baseDescription: {
      en: "Each player gains heat, plants, and draw cards according to their production. They also gain MC equal to their production + TR.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Gain 1MC.$skipline$Activate the production effect of one of your green cards an additional time this phase.",
      fr: "abc"
    }
  },
  {
    phaseId: 4,
    cardLevel: 0,
    phaseGroupType: "research",
    phaseType: "research_base",
    baseDescription: {
      en: "Each player draw 2 cards and keep 1.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Draw an additional 3 cards and keep an additional 1.",
      fr: "abc"
    }
  },
  {
    phaseId: 4,
    cardLevel: 1,
    phaseGroupType: "research",
    phaseType: "research_scan6_keep1",
    baseDescription: {
      en: "Each player draw 2 cards and keep 1.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Draw an additional 6 cards and keep an additional 1.",
      fr: "abc"
    }
  },
  {
    phaseId: 4,
    cardLevel: 2,
    phaseGroupType: "research",
    phaseType: "research_scan2_keep2",
    baseDescription: {
      en: "Each player draw 2 cards and keep 1.",
      fr: "abc"
    },
    bonusDescription: {
      en: "Draw an additional 2 cards and keep an additional 2.",
      fr: "abc"
    }
  }
];

// src/app/services/cards/phase-card-info.service.ts
import * as i011 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var language = "en";
var PhaseCardInfoService = class _PhaseCardInfoService {
  constructor() {
    this.phaseCards = this.loadJson();
  }
  loadJson() {
    let phaseCards = [];
    for (let cardData of phase_cards_data_default) {
      let newPhaseCard = new PhaseCardModel();
      newPhaseCard.phaseId = cardData.phaseId;
      newPhaseCard.cardLevel = cardData.cardLevel;
      newPhaseCard.phaseGroup = Utils.toSelectablePhase(cardData.phaseGroupType);
      newPhaseCard.phaseType = cardData.phaseType;
      newPhaseCard.baseDescription = cardData.baseDescription[language];
      newPhaseCard.bonusDescription = cardData.bonusDescription[language];
      newPhaseCard.phaseCardUpgraded = cardData.cardLevel === 0;
      phaseCards.push(newPhaseCard);
    }
    return phaseCards;
  }
  getPhaseCardFromIds(phaseIndex, cardLevel) {
    for (let card of this.phaseCards) {
      if (card.phaseId === phaseIndex && card.cardLevel === cardLevel) {
        return card;
      }
    }
    console.log(`ERROR: phase card not found: phaseIndex=${phaseIndex} & cardLevel=${cardLevel}`);
    return new PhaseCardModel();
  }
  getPhaseCardFromPhaseIndex(phaseIndex) {
    let phaseCards = [];
    for (let card of this.phaseCards) {
      if (card.phaseId === phaseIndex) {
        phaseCards.push(card);
      }
    }
    return phaseCards;
  }
  getNewPhaseGroup(phaseGroupType) {
    let phaseGroup = new PhaseCardGroupModel();
    for (let card of this.phaseCards) {
      if (card.phaseGroup === phaseGroupType) {
        phaseGroup.phaseCards.push(card);
      }
    }
    phaseGroup.phaseIndex = phaseGroup.phaseCards[0].phaseId;
    phaseGroup.phaseGroup = phaseGroupType;
    return phaseGroup;
  }
  static {
    this.\u0275fac = function PhaseCardInfoService_Factory(t) {
      return new (t || _PhaseCardInfoService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i011.\u0275\u0275defineInjectable({ token: _PhaseCardInfoService, factory: _PhaseCardInfoService.\u0275fac, providedIn: "root" });
  }
};

// src/app/models/player-info/player-state-phase-card.model.ts
var PlayerPhaseCardStateModel = class _PlayerPhaseCardStateModel {
  constructor(injector, dto) {
    this.injector = injector;
    this.phaseService = this.injector.get(PhaseCardInfoService);
    this.phaseGroups = this.initializePhaseGroups();
    this.selectedPhase = SelectablePhaseEnum.undefined;
    this.phaseCardUpgradeCount = dto.pcuc;
    this.selectedPhase = dto.sp;
  }
  initializePhaseGroups() {
    let groups = [];
    for (let groupName of GAME_SELECTABLE_PHASE_LIST) {
      groups.push(this.phaseService.getNewPhaseGroup(groupName));
    }
    return groups;
  }
  getPhaseCardUpgradedCount() {
    return this.phaseCardUpgradeCount;
  }
  addPhaseCardUpgradeCount() {
    this.phaseCardUpgradeCount++;
  }
  getPhaseSelected() {
    return this.selectedPhase;
  }
  setPhaseSelected(selection) {
    this.selectedPhase = selection;
  }
  getUpgradedPhaseCards() {
    let cards = [];
    for (let group of this.phaseGroups) {
      cards.push(group.getUpgradedPhaseCard());
    }
    return cards;
  }
  getPhaseGroups() {
    return this.phaseGroups;
  }
  setPhaseCardUpgraded(upgrade) {
    let phase = Utils.getSelectablePhaseFromPhaseUpgrade(upgrade);
    if (!phase) {
      return;
    }
    for (let g of this.phaseGroups) {
      if (g.phaseGroup === phase) {
        g.setPhaseCardUpgraded(upgrade);
        return;
      }
    }
  }
  toJson() {
    return {
      pg: this.phaseGroups,
      pcuc: this.phaseCardUpgradeCount,
      sp: this.selectedPhase
    };
  }
  static fromJson(data, injector) {
    if (!data.pg || !data.pcuc || !data.sp) {
      throw new Error("Invalid PlayerPhaseCardStateDTO: Missing required fields");
    }
    return new _PlayerPhaseCardStateModel(injector, data);
  }
  static empty(injector) {
    return new _PlayerPhaseCardStateModel(injector, {
      pg: [],
      pcuc: 0,
      sp: SelectablePhaseEnum.undefined
    });
  }
};

// src/app/models/player-info/player-state-other.model.ts
var PlayerOtherStateModel = class _PlayerOtherStateModel {
  constructor(dto) {
    this.sellCardValueMod = 0;
    this.research = { scan: 0, keep: 0 };
    this.sellCardValueMod = dto.scvm;
    this.research = dto.r;
  }
  //research
  getResearch() {
    return this.research;
  }
  getResearchScan() {
    return this.research.scan;
  }
  getResearchKeep() {
    return this.research.keep;
  }
  setResearch(research) {
    this.research = research;
  }
  addResearchValue(research) {
    this.research.keep += research.keep ?? 0;
    this.research.scan += research.scan ?? 0;
  }
  //sellCardValueMod
  getSellCardValueMod() {
    return this.sellCardValueMod;
  }
  addSellCardValueMod(value) {
    this.sellCardValueMod += value;
  }
  toJson() {
    return {
      scvm: this.sellCardValueMod,
      r: this.research
    };
  }
  static fromJson(data) {
    if (!data.scvm || !data.r) {
      throw new Error("Invalid PlayerOtherStateDTO: Missing required fields");
    }
    return new _PlayerOtherStateModel(data);
  }
  static empty() {
    return new _PlayerOtherStateModel({
      scvm: 0,
      r: { scan: 0, keep: 0 }
    });
  }
};

// src/app/models/player-info/player-state-global-parameter.model.ts
var PlayerGlobalParameterStateModel = class _PlayerGlobalParameterStateModel {
  constructor(dto) {
    this.parameters = [
      { name: "infrastructure", value: 0, addEndOfPhase: 0 },
      { name: "ocean", value: 0, addEndOfPhase: 0 },
      { name: "oxygen", value: 0, addEndOfPhase: 0 },
      { name: "temperature", value: 0, addEndOfPhase: 0 }
    ];
    let parameters = [];
    for (let dtoParameter of dto.gp) {
      let param = {
        name: dtoParameter.name,
        value: dtoParameter.value ?? 0,
        addEndOfPhase: dtoParameter.addEndOfPhase ?? 0
      };
      parameters.push(Utils.jsonCopy(param));
    }
    this.parameters = parameters;
  }
  getGlobalParameters() {
    return this.parameters;
  }
  getGlobalParameterIndex(parameter) {
    for (let i = 0; i < this.parameters.length; i++) {
      if (this.parameters[i].name === parameter) {
        return i;
      }
    }
    return void 0;
  }
  addGlobalParameterStepEOP(parameter) {
    let parameterIndex = this.getGlobalParameterIndex(parameter.name);
    if (parameterIndex === void 0) {
      return;
    }
    if (this.parameters[parameterIndex].addEndOfPhase === void 0) {
      this.parameters[parameterIndex].addEndOfPhase = parameter.steps;
      return;
    }
    this.parameters[parameterIndex].addEndOfPhase += parameter.steps;
  }
  toJson() {
    return {
      gp: []
      //this.parameters
    };
  }
  static fromJson(dto) {
    if (!dto.gp) {
      throw new Error("Invalid PlayerGlobalParameterStateDTO: Missing required fields");
    }
    return new _PlayerGlobalParameterStateModel(dto);
  }
  static empty() {
    return new _PlayerGlobalParameterStateModel({
      gp: []
    });
  }
};

// src/app/services/cards/project-card-info.service.ts
import { Injectable as Injectable8 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/models/cards/project-card.model.ts
var ProjectCardModel = class {
  getCardTriggerLimit() {
    return this.triggerLimit;
  }
  addRessourceToStock(ressource) {
    if (this.checkStockable(ressource.name) === false) {
      return;
    }
    if (this.checkStockExists(ressource.name) === false) {
      this.setInitialStock(ressource.name);
    }
    if (!this.stock) {
      return;
    }
    for (let s of this.stock) {
      if (s.name === ressource.name) {
        s.valueStock += ressource.valueStock;
      }
    }
  }
  checkStockable(ressourceType) {
    if (this.stockable === void 0 || this.stockable.length === 0) {
      return false;
    }
    return this.stockable.includes(ressourceType);
  }
  checkStockExists(ressource) {
    if (!this.stock) {
      return false;
    }
    for (let s of this.stock) {
      if (s.name === ressource) {
        return true;
      }
    }
    return false;
  }
  setInitialStock(ressource) {
    if (!this.stock) {
      this.stock = [];
    }
    this.stock.push({ name: ressource, valueStock: 0 });
  }
  getStockValue(ressourceName) {
    if (!this.stock) {
      return 0;
    }
    for (let s of this.stock) {
      if (s.name === ressourceName) {
        return s.valueStock;
      }
    }
    return 0;
  }
  isFilterOk(filter) {
    switch (filter.type) {
      case "development": {
        if (this.cardType === "greenProject") {
          return true;
        }
        break;
      }
      case "construction": {
        if (this.cardType != "greenProject") {
          return true;
        }
        break;
      }
      case "action": {
        if (this.cardSummaryType === "action") {
          return true;
        }
        break;
      }
      case "stockable": {
        if (!filter.value) {
          return false;
        }
        let filterValueList = [];
        if (!Array.isArray(filter.value)) {
          filterValueList.push(filter.value);
        } else {
          filterValueList = filter.value;
        }
        for (let f of filterValueList) {
          if (this.checkStockable(f)) {
            return true;
          }
        }
        break;
      }
    }
    return false;
  }
  toDTO() {
    return {
      i: this.id,
      s: this.stock ?? []
    };
  }
};
var TriggerState = class _TriggerState {
  constructor(dto) {
    this.playedCardsId = [];
    this.activeCardsId = [];
    this.activeOnRessourceAddedToCard = [];
    this.activeOnParameterIncrease = [];
    this.activeOnPlayedCard = [];
    this.activeOnGainedTag = [];
    this.activeCostModTrigger = [];
    if (!dto) {
      return;
    }
    this.playedCardsId = dto.pci;
    this.activeCardsId = dto.aci;
    this.activeOnRessourceAddedToCard = dto.aoratc;
    this.activeOnParameterIncrease = dto.aopi;
    this.activeOnPlayedCard = dto.aopc;
    this.activeOnGainedTag = dto.aogt;
    this.activeCostModTrigger = dto.acmt;
  }
  getPlayedTriggers() {
    return this.playedCardsId;
  }
  getActivePlayedTriggers() {
    return this.activeCardsId;
  }
  getOnRessourceAddedToCard() {
    return this.activeOnRessourceAddedToCard;
  }
  getOnParameterIncrease() {
    return this.activeOnParameterIncrease;
  }
  getOnPlayedCard() {
    return this.activeOnPlayedCard;
  }
  getOnGainedTag() {
    return this.activeOnGainedTag;
  }
  getCostMod() {
    return this.activeCostModTrigger;
  }
  playTrigger(cardId) {
    this.playedCardsId.push(cardId);
    this.activeCardsId.push(cardId);
    this.addTriggerOnRessource(cardId);
    this.addTriggerOnParameter(cardId);
    this.addTriggerOnPlayedCard(cardId);
    this.addTriggerOnGainedTag(cardId);
    this.addTriggerToCostMod(cardId);
  }
  addTriggerOnRessource(cardId) {
    switch (cardId) {
      case 222: {
        break;
      }
      default: {
        return;
      }
    }
    this.activeOnRessourceAddedToCard.push(cardId);
  }
  addTriggerOnParameter(cardId) {
    switch (cardId) {
      case 46: {
        break;
      }
      case 279: {
        break;
      }
      default: {
        return;
      }
    }
    this.activeOnParameterIncrease.push(cardId);
  }
  addTriggerOnPlayedCard(cardId) {
    switch (cardId) {
      default: {
        return;
      }
    }
    this.activeOnPlayedCard.push(cardId);
  }
  addTriggerOnGainedTag(cardId) {
    switch (cardId) {
      case 25: {
        break;
      }
      case 37: {
        break;
      }
      case 45: {
        break;
      }
      case 222: {
        break;
      }
      default: {
        return;
      }
    }
    this.activeOnGainedTag.push(cardId);
  }
  addTriggerToCostMod(cardId) {
    switch (cardId) {
      case 25: {
        break;
      }
      case 37: {
        break;
      }
      default: {
        return;
      }
    }
    this.activeCostModTrigger.push(cardId);
  }
  setTriggerInactive(cardId) {
    this.activeCardsId = this.activeCardsId.filter((e, i) => e !== cardId);
    switch (cardId) {
      case 222: {
        this.activeOnRessourceAddedToCard = this.activeOnRessourceAddedToCard.filter((e, i) => e !== cardId);
        this.activeOnGainedTag = this.activeOnGainedTag.filter((e, i) => e !== cardId);
        break;
      }
    }
  }
  static fromJson(data) {
    if (!data.aci || !data.acmt || !data.aogt || !data.aopc || !data.aopi || !data.aoratc || !data.pci) {
      throw new Error("Invalid TriggerStateDTO: Missing required fields");
    }
    return new _TriggerState(data);
  }
  toJson() {
    return {
      aci: this.activeCardsId,
      acmt: this.activeCostModTrigger,
      aogt: this.activeOnGainedTag,
      aopc: this.activeOnPlayedCard,
      aopi: this.activeOnParameterIncrease,
      aoratc: this.activeOnRessourceAddedToCard,
      pci: this.playedCardsId
    };
  }
};

// src/assets/data/cards_data.json
var cards_data_default = [
  {
    id: 4,
    card_code: "4",
    origin: "base",
    cost: 22,
    tagsId: [
      2,
      0
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "2",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "AI Central",
      fr: "IA Centrale"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$other_arrow$ 2 $other_card$",
      fr: "$other_arrow$ 2 $other_card$"
    },
    effectText: {
      en: "Action: Draw 2 cards.",
      fr: "Action: Piochez 2 cartes."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "Requires 5 $tag_science$.",
      fr: "Requiert 5 $tag_science$."
    },
    prerequisiteSummaryText: {
      en: "5 $tag_science$",
      fr: "5 $tag_science$"
    },
    stockable: []
  },
  {
    id: 9,
    card_code: "9",
    origin: "base",
    cost: 5,
    tagsId: [],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Artificial Jungle",
      fr: "Jungle Artificielle"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$ $other_arrow$ $other_card$",
      fr: "$ressource_plant$ $other_arrow$ $other_card$"
    },
    effectText: {
      en: "Action: Spend 1 plant to draw 1 card.",
      fr: "Action: D\xE9pensez 1 plante pour piocher 1 carte."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 18,
    card_code: "18",
    origin: "base",
    cost: 25,
    tagsId: [
      0,
      8,
      7
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "*",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Conserved Biome",
      fr: "Biome Pr\xE9serv\xE9"
    },
    vpText: {
      en: "*=1 victory point for every 2 forest tiles you have.",
      fr: "*= 1 PV par groupe de 2 PVs For\xEAt en votre possession."
    },
    effectSummaryText: {
      en: "$other_arrow$ $ressource_microbe$ *$skipline$Ou$skipline$$other_arrow$ $ressource_animal$ *",
      fr: "$other_arrow$ $ressource_microbe$ *$skipline$Ou$skipline$$other_arrow$ $ressource_animal$ *"
    },
    effectText: {
      en: "Action: Add a microbe to another card or add an animal to another card.",
      fr: "Action: Ajoutez un microbe sur une autre* carte ou ajoutez un animal sur une autre* carte."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 20,
    card_code: "20",
    origin: "base",
    cost: 10,
    tagsId: [
      8
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Decomposing Fungus",
      fr: "Champignons en D\xE9composition"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "-$ressource_animal$/$ressource_microbe$$skipline$$other_arrow$ 3 $ressource_plant$",
      fr: "-$ressource_animal$/$ressource_microbe$$skipline$$other_arrow$ 3 $ressource_plant$"
    },
    effectText: {
      en: "Action: Remove 1 animal or 1 microbe from one of your cards to gain 3 plants.",
      fr: "Action: Retirez 1 animal ou 1 microbe de l'une de vos cartes pour gagner 3 plantes."
    },
    playedText: {
      en: "Place 2 microbes on this card.",
      fr: "Placez 2 microbes sur cette carte."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 25,
    card_code: "25",
    origin: "base",
    cost: 5,
    tagsId: [
      1
    ],
    effectSummaryType: "trigger",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-II",
    phaseDown: "",
    title: {
      en: "Energy Subsidies",
      fr: "Subventions \xE0 l'Energie"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$tag_power$ : $ressource_megacreditvoid_-4$ + $other_card$",
      fr: "$tag_power$ : $ressource_megacreditvoid_-4$ + $other_card$"
    },
    effectText: {
      en: "Effect: When you play a $tag_power$, you pay 4 MC less for it and draw a card.",
      fr: "Effet: Lorsque vous jouez un $tag_power$, le co\xFBt associ\xE9 est r\xE9duit de 4 MC et vous piochez une carte"
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 29,
    card_code: "29",
    origin: "base",
    cost: 15,
    tagsId: [
      6
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Farming Co-ops",
      fr: "Coop\xE9ratives Agricoles"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$other_card$ $other_arrow$ 3 $ressource_plant$",
      fr: "$other_card$ $other_arrow$ 3 $ressource_plant$"
    },
    effectText: {
      en: "Action: Discard a card from your hand to gain 3 plants.",
      fr: "Action: D\xE9faussez une carte de votre main pour gagner 3 plantes"
    },
    playedText: {
      en: "Gain 3 plants.",
      fr: "Gagnez 3 plantes."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 36,
    card_code: "36",
    origin: "base",
    cost: 3,
    tagsId: [
      2
    ],
    effectSummaryType: "trigger",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "V",
    phaseDown: "",
    title: {
      en: "Interns",
      fr: "Internes"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$other_researchsymbol$ : + $other_researchcard$$other_researchcard$",
      fr: "$other_researchsymbol$ : + $other_researchcard$$other_researchcard$"
    },
    effectText: {
      en: "Effect: When you draw cards during the research phase, draw 2 additional cards.",
      fr: "Effet: Lorsque vous piochez des cartes pendant la phase de recherche, piochez deux cartes suppl\xE9mentaires."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 37,
    card_code: "37",
    origin: "base",
    cost: 6,
    tagsId: [
      4
    ],
    effectSummaryType: "trigger",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-II",
    phaseDown: "",
    title: {
      en: "Interplanetary Conference",
      fr: "Conf\xE9rence Interplan\xE9taire"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$tag_earth$ / $tag_jovian$ :$skipline$$ressource_megacreditvoid_-3$ + $other_card$",
      fr: "$tag_earth$ / $tag_jovian$ :$skipline$$ressource_megacreditvoid_-3$ + $other_card$"
    },
    effectText: {
      en: "Effect : When you play an $tag_earth$ or $tag_jovian$, excluding this one, you pay 3 MC less and draw a card.",
      fr: "Effet : Lorsque vous jouez un $tag_earth$ ou $tag_jovian$, celui-ci exclu, le co\xFBt est r\xE9duit de 3 MC et vous piochez une carte."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 42,
    card_code: "42",
    origin: "base",
    cost: 11,
    tagsId: [
      4
    ],
    effectSummaryType: "",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-II",
    phaseDown: "",
    title: {
      en: "Media Group",
      fr: "Groupe M\xE9diatique"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$tag_event$ : $ressource_megacreditvoid_-5$",
      fr: "$tag_event$ : $ressource_megacreditvoid_-5$"
    },
    effectText: {
      en: "Effect: When you play an $tag_event$, you pay 5 MC less for it.",
      fr: "Effet: Lorsque vous jouez $tag_event$, le co\xFBt associ\xE9 est r\xE9duit de 5 MC."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 45,
    card_code: "45",
    origin: "base",
    cost: 10,
    tagsId: [
      1
    ],
    effectSummaryType: "trigger",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-II",
    phaseDown: "",
    title: {
      en: "Optimal Aerobraking",
      fr: "Freinage A\xE9rodynamique"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$tag_event$ :$skipline$2 $ressource_heat$ 2 $ressource_plant$",
      fr: "$tag_event$ :$skipline$2 $ressource_heat$ 2 $ressource_plant$"
    },
    effectText: {
      en: "Effect: When you play an $tag_event$, you gain 2 heat and 2 plants.",
      fr: "Effet: Lorsque vous jouez un $tag_event$, vous gagnez 2 chaleurs et 2 plantes."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 46,
    card_code: "46",
    origin: "base",
    cost: 5,
    tagsId: [
      2,
      0
    ],
    effectSummaryType: "trigger",
    cardType: "blueProject",
    vpNumber: "*",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-III",
    phaseDown: "",
    title: {
      en: "Physics Complex",
      fr: "Complexe Physique"
    },
    vpText: {
      en: "*=1 VP for every 2 $tag_science$ resources on this card.",
      fr: "* = 1 VP par groupe de 2 ressources $ressource_science$ sur cette carte."
    },
    effectSummaryText: {
      en: "$other_temperature$ : $ressource_science$",
      fr: "$other_temperature$ : $ressource_science$"
    },
    effectText: {
      en: "Effect: When you raise the temperature, add a $ressource_science$ to this card.",
      fr: "Effet:Lorsque vous augmentez la temp\xE9rature, ajoutez 1 $ressource_science$ sur cette carte."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "Requires 4 $tag_science$.",
      fr: "Requiert 4 $tag_science$."
    },
    prerequisiteSummaryText: {
      en: "4 $tag_science$",
      fr: "4 $tag_science$"
    },
    stockable: []
  },
  {
    id: 49,
    card_code: "49",
    origin: "base",
    cost: 4,
    tagsId: [],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Redrafted Contracts",
      fr: "Contrats Renouvel\xE9s"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "1-3 $other_card$$other_arrow$1-3$other_card$",
      fr: "1-3 $other_card$$other_arrow$1-3$other_card$"
    },
    effectText: {
      en: "ACTION: Discard up to 3 cards from your hand. Draw that number of cards.",
      fr: "Action: D\xE9faussez jusqu'\xE0 trois cartes de votre main. Piochez un m\xEAme nombre de cartes."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 54,
    card_code: "54",
    origin: "base",
    cost: 15,
    tagsId: [
      1,
      6
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Solarpunk",
      fr: "Solarpunk"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_15$ $other_arrow$ $other_forest$$skipline$$ressource_megacreditvoid_-2$ / $ressource_titanium$",
      fr: "$ressource_megacreditvoid_15$ $other_arrow$ $other_forest$$skipline$$ressource_megacreditvoid_-2$ / $ressource_titanium$"
    },
    effectText: {
      en: "Action: Spend 15 MC to gain a forest tile and increase oxygen by 1 step. Reduce the cost by 2 MC per Titanium you have.",
      fr: "Action: D\xE9pensez 15 MC pour gagner 1 PV For\xEAt et augmenter de l'oxyg\xE8ne de 1 niveau. Ce co\xFBt est r\xE9duit de 2 MC par titane en votre possession."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 58,
    card_code: "58",
    origin: "base",
    cost: 6,
    tagsId: [
      8
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "*",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Tardigrades",
      fr: "Tardigrades"
    },
    vpText: {
      en: "* = 1 VP for every 3 microbes on this card.",
      fr: "* = 1 PV par groupe de 3 microbes sur cette carte."
    },
    effectSummaryText: {
      en: "$other_arrow$$skipline$$ressource_microbe$",
      fr: "$other_arrow$$skipline$$ressource_microbe$"
    },
    effectText: {
      en: "Action: Add 1 microbe to this card.",
      fr: "Action: Ajoutez 1 microbe sur cette carte."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 62,
    card_code: "62",
    origin: "base",
    cost: 17,
    tagsId: [
      1
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Volcanic Pools",
      fr: "Bassins Volcaniques"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_12$ $other_arrow$ $other_ocean$$skipline$$ressource_megacreditvoid_-1$ / $tag_power$",
      fr: "$ressource_megacreditvoid_12$ $other_arrow$ $other_ocean$$skipline$$ressource_megacreditvoid_-1$ / $tag_power$"
    },
    effectText: {
      en: "Action: Spend 12 MC to flip an ocean tile. Reduce its cost by 1 MC for each $tag_power$ you have.",
      fr: "Action: D\xE9pensez 12 MC pour r\xE9v\xE9ler une tuile Oc\xE9an. Ce co\xFBt est r\xE9duit de 1 MC par $tag_power$ en votre possession."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 65,
    card_code: "65",
    origin: "base",
    cost: 10,
    tagsId: [
      8,
      7,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "3",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Advanced Ecosystems",
      fr: "Ecosyst\xE8mes Avanc\xE9s"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "Requires a $tag_animal$, $tag_microbe$ and $tag_plant$.",
      fr: "Requiert un $tag_animal$, $tag_microbe$ et $tag_plant$."
    },
    prerequisiteSummaryText: {
      en: "$tag_animal$ $tag_microbe$ $tag_plant$",
      fr: "$tag_animal$ $tag_microbe$ $tag_plant$"
    },
    stockable: []
  },
  {
    id: 66,
    card_code: "66",
    origin: "base",
    cost: 13,
    tagsId: [
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Artificial Lake",
      fr: "Lac Artificiel"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Flip an ocean tile.",
      fr: "R\xE9v\xE9lez une tuile Oc\xE9an."
    },
    prerequisiteText: {
      en: "Requires a yellow or warmer temperature level.",
      fr: "Requiert un niveau de temp\xE9rature jaune ou plus chaud."
    },
    prerequisiteSummaryText: {
      en: "$other_temperature$",
      fr: "$other_temperature$"
    },
    stockable: []
  },
  {
    id: 69,
    card_code: "69",
    origin: "base",
    cost: 5,
    tagsId: [
      4,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "-2",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Bribed Committee",
      fr: "Comit\xE9 Corrompu"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase your $other_tr$ by 2 steps.",
      fr: "Augmentez votre $other_tr$ de 2."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 71,
    card_code: "71",
    origin: "base",
    cost: 3,
    tagsId: [
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "CEO's Favorite Project",
      fr: ""
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 74,
    card_code: "74",
    origin: "base",
    cost: 14,
    tagsId: [
      1,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Convoy from Europa",
      fr: "Convoi depuis Europe"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Draw a card.$skipline$Flip an ocean tile.",
      fr: "Piochez une carte$skipline$R\xE9v\xE9lez une tuile Oc\xE9an."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 76,
    card_code: "76",
    origin: "base",
    cost: 30,
    tagsId: [
      1,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Deimos Down",
      fr: "Destruction de Deimos"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase the temperature 3 steps.$skipline$Earn 7 MC.",
      fr: "Augmentez la temp\xE9rature de 3 niveaux.$skipline$Gagnez 7 MC."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 77,
    card_code: "77",
    origin: "base",
    cost: 36,
    tagsId: [
      1,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Giant Ice Asteroid",
      fr: "Ast\xE9roide de Glace G\xE9ant"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase the temperature 2 steps.$skipline$ Flip 2 ocean tiles.",
      fr: "Augmentez la temp\xE9rature de 2 niveaux.$skipline$R\xE9v\xE9lez 2 tuiles Oc\xE9an."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 81,
    card_code: "81",
    origin: "base",
    cost: 20,
    tagsId: [
      1,
      4,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Imported Nitrogen",
      fr: "Azote Import\xE9"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase your $other_tr$ by 1 step.$skipline$Gain 4 plants.$skipline$Add 2 animals to another card.$skipline$Add 3 microbes to another card.",
      fr: "Augmentez votre $other_tr$ de 1.$skipline$Gagnez 4 plantes.$skipline$Ajoutez 2 animaux sur une autre carte.$skipline$Ajoutez 3 microbes sur une autre carte."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 83,
    card_code: "83",
    origin: "base",
    cost: 1,
    tagsId: [
      2,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Invention Contest",
      fr: "Concours d'Inventions"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Draw 3 cards. Keep one of them and discard the other two.",
      fr: "Piochez 3 cartes. Conservez-en une et d\xE9faussez les deux autres."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 92,
    card_code: "92",
    origin: "base",
    cost: 8,
    tagsId: [
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Permafrost Extraction",
      fr: "Extraction du Perg\xE9lisol"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Flip an ocean tile.",
      fr: "R\xE9v\xE9lez 1 tuile Oc\xE9an."
    },
    prerequisiteText: {
      en: "Requires a yellow or warmer temperature level.",
      fr: "Requiert un niveau de temp\xE9rature jaune ou plus chaud."
    },
    prerequisiteSummaryText: {
      en: "$other_temperature$",
      fr: "$other_temperature$"
    },
    stockable: []
  },
  {
    id: 93,
    card_code: "93",
    origin: "base",
    cost: 32,
    tagsId: [
      1,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Phobos Falls",
      fr: "Chute de Phobos"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase the temperature 1 step.$skipline$Flip an ocean tile.$skipline$Draw 2 cards.",
      fr: "Augmentez la temp\xE9rature de 1 niveau.$skipline$R\xE9v\xE9lez une tuile Oc\xE9an.$skipline$Piochez 2 cartes."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 96,
    card_code: "96",
    origin: "base",
    cost: 5,
    tagsId: [
      2,
      2,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Research",
      fr: "Recherche"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Draw 2 cards.",
      fr: "Piochez 2 cartes."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 108,
    card_code: "108",
    origin: "base",
    cost: 5,
    tagsId: [
      8
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Archaebacteria",
      fr: "Arch\xE9obact\xE9ries"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$",
      fr: "$ressource_plant$"
    },
    effectText: {
      en: "During the production phase, this card produces 1 plant.",
      fr: "Lors de la phase de production, cette carte produit 1 plante."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "Requires a purple temperature level.",
      fr: "Requiert un niveau de temp\xE9rature violet."
    },
    prerequisiteSummaryText: {
      en: "$other_temperature$",
      fr: "$other_temperature$"
    },
    stockable: []
  },
  {
    id: 123,
    card_code: "123",
    origin: "base",
    cost: 6,
    tagsId: [
      4
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Cartel",
      fr: "Cartel"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_1$/$tag_earth$",
      fr: "$ressource_megacreditvoid_1$/$tag_earth$"
    },
    effectText: {
      en: "During the production phase, this card produces 1 MC for each $tag_earth$ you have, including this one.",
      fr: "Lors de la phase de production, cette carte produit 1 MC par $tag_earth$ en votre possession, y compris celui-ci."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 129,
    card_code: "129",
    origin: "base",
    cost: 2,
    tagsId: [],
    effectSummaryType: "greyProduction",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-II",
    phaseDown: "",
    title: {
      en: "Dusty Quarry",
      fr: "Carri\xE8re Poussi\xE9reuse"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_steel$",
      fr: "$ressource_steel$"
    },
    effectText: {
      en: "When you play a $tag_building$, you pay 2 MC less for it.",
      fr: "Lorsque vous jouez un $tag_building$, le co\xFBt associ\xE9 est r\xE9duit de 2 MC."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "No more than 3 Oceans flipped",
      fr: "Requiert que 3 tuiles Oc\xE9an ou moins soient r\xE9v\xE9l\xE9es."
    },
    prerequisiteSummaryText: {
      en: "max 3 $other_ocean$",
      fr: "max 3 $other_ocean$"
    },
    stockable: []
  },
  {
    id: 135,
    card_code: "135",
    origin: "base",
    cost: 9,
    tagsId: [
      0
    ],
    effectSummaryType: "mixedProduction",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "I-II",
    title: {
      en: "Fuel Factory",
      fr: "Usine de Carburant"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_1$$skipline$$ressource_titaniuim$",
      fr: "$ressource_megacreditvoid_1$$skipline$$ressource_titaniuim$"
    },
    effectText: {
      en: "During the production phase, this card produces 1 MC.$skipline$When you play a $tag_space$, you pay 3 MC less for it.",
      fr: "Lors de la phase de production, cette carte produit 1 MC.$skipline$Lorsque vous jouez un $tag_space$, le co\xFBt associ\xE9 est r\xE9duit de 3 MC."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "Spend 3 heat.",
      fr: "Requiert que vous d\xE9pensiez 3 chaleurs."
    },
    prerequisiteSummaryText: {
      en: "-3 $ressource_heat$",
      fr: "-3 $ressource_heat$"
    },
    stockable: []
  },
  {
    id: 141,
    card_code: "141",
    origin: "base",
    cost: 13,
    tagsId: [
      1,
      3
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Giant Space Mirror",
      fr: "Miroir Spatial G\xE9ant"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "3 $ressource_heat$",
      fr: "3 $ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produce 3 heat.",
      fr: "Lors de la phase de production, cette carte produit 3 chaleurs."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 144,
    card_code: "144",
    origin: "base",
    cost: 3,
    tagsId: [],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-II",
    phaseDown: "",
    title: {
      en: "Great Escarpment Consortium",
      fr: "Consortium du Grand Escarpement"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_steel$",
      fr: "$ressource_steel$"
    },
    effectText: {
      en: "When you play a $tag_building$, you pay 2 MC less for it.",
      fr: "Lorsque vous jouez un $tag_building$, le co\xFBt associ\xE9 est r\xE9duit de 2 MC."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 145,
    card_code: "145",
    origin: "base",
    cost: 14,
    tagsId: [
      6
    ],
    effectSummaryType: "",
    cardType: "greenProject",
    vpNumber: "1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Heather",
      fr: "R\xE9chauffeur"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$",
      fr: "$ressource_plant$"
    },
    effectText: {
      en: "During the production phase, this card produce 1 plant.",
      fr: "Lors de la phase de production, cette carte produit 1 plante."
    },
    playedText: {
      en: "Gain 1 plant.",
      fr: "Gagnez 1 plante."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 155,
    card_code: "155",
    origin: "base",
    cost: 5,
    tagsId: [
      6
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Lichen",
      fr: "Lichen"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$",
      fr: "$ressource_plant$"
    },
    effectText: {
      en: "During the production phase, this card produce 1 plant.",
      fr: "Lors de la phase de production, cette carte produit 1 plante."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 161,
    card_code: "161",
    origin: "base",
    cost: 35,
    tagsId: [
      1,
      5
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "2",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Methane from Titan",
      fr: "M\xE9thane de Titan"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$ $ressource_plant$$skipline$$ressource_heat$ $ressource_heat$",
      fr: "$ressource_plant$ $ressource_plant$$skipline$$ressource_heat$ $ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produce 2 plant et 2 heat.",
      fr: "Lors de la phase de production, cette carte produit 2 plantes et 2 chaleurs."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "Requires a red or higher oxygen level.",
      fr: "Requiert un niveau d'oxyg\xE8ne rouge ou sup\xE9rieur."
    },
    prerequisiteSummaryText: {
      en: "$other_oxygen$",
      fr: "$other_oxygen$"
    },
    stockable: []
  },
  {
    id: 163,
    card_code: "163",
    origin: "base",
    cost: 17,
    tagsId: [
      0,
      3
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Microprocessors",
      fr: "Microprocesseurs"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "3 $ressource_heat$",
      fr: "3 $ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produce 3 heat.",
      fr: "Lors de la phase de production, cette carte produit 3 chaleurs."
    },
    playedText: {
      en: "Draw 2 cards. Then, discard a card.",
      fr: "Piochez 2 cartes. Puis, d\xE9faussez une carte."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 171,
    card_code: "171",
    origin: "base",
    cost: 14,
    tagsId: [
      6
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Nitrophilic Moss",
      fr: "Mousse Nitrophile"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$ $ressource_plant$",
      fr: "$ressource_plant$ $ressource_plant$"
    },
    effectText: {
      en: "During the production phase, this card produce 2 plant.",
      fr: "Lors de la phase de production, cette carte produit 2 plantes."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 175,
    card_code: "175",
    origin: "base",
    cost: 3,
    tagsId: [
      0,
      3
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Power Plant",
      fr: "Centrale"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_heat$",
      fr: "$ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produces 1 heat.",
      fr: "Durant la phase de production, cette carte produit 1 chaleur."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 180,
    card_code: "180",
    origin: "base",
    cost: 17,
    tagsId: [
      1
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Satellite Farms",
      fr: "Fermes de Satellite"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_heat$/$tag_space$",
      fr: "$ressource_heat$/$tag_space$"
    },
    effectText: {
      en: "During the production phase, this card produces 1 heat for each $tag_space$ you have, including this one.",
      fr: "Lors de la phase de production, cette carte produit 1 chaleur par $tag_space$ en votre possession, y compris celui-ci."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 181,
    card_code: "181",
    origin: "base",
    cost: 14,
    tagsId: [
      1
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Satellites",
      fr: "Satellites"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_1$ / $tag_space$",
      fr: "$ressource_megacreditvoid_1$ / $tag_space$"
    },
    effectText: {
      en: "During the production phase, this card produces 1 MC for each $tag_space$ you have, including this one.",
      fr: "Lors de la phase de production, cette carte produit 1 MC par $tag_space$ en votre possession, y compris celui-ci."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 182,
    card_code: "182",
    origin: "base",
    cost: 8,
    tagsId: [
      0
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "-1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Slash and Burn Agriculture",
      fr: "Agriculture sur Br\xFBlis"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$ $ressource_plant$",
      fr: "$ressource_plant$ $ressource_plant$"
    },
    effectText: {
      en: "During the production phase, this card produce 2 plant.",
      fr: "Lors de la phase de production, cette carte produit 2 plantes."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 183,
    card_code: "183",
    origin: "base",
    cost: 28,
    tagsId: [
      0,
      3
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Smelting",
      fr: "Fonderie"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "5 $ressource_heat$",
      fr: "5 $ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produce 5 heat.",
      fr: "Lors de la phase de production, cette carte produit 5 chaleurs."
    },
    playedText: {
      en: "Draw 2 cards.",
      fr: "Piochez 2 cartes."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 184,
    card_code: "184",
    origin: "base",
    cost: 24,
    tagsId: [
      6
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Soil Warming",
      fr: "R\xE9chauffements des Sols"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$ $ressource_plant$",
      fr: "$ressource_plant$ $ressource_plant$"
    },
    effectText: {
      en: "During the production phase, this card produce 2 plant.",
      fr: "Lors de la phase de production, cette carte produit 2 plantes."
    },
    playedText: {
      en: "Increase the temperature 1 step.",
      fr: "Augmentez la temp\xE9rature de 1 niveau."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 190,
    card_code: "190",
    origin: "base",
    cost: 5,
    tagsId: [
      4
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Sponsors",
      fr: "Sponsors"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_2$",
      fr: "$ressource_megacreditvoid_2$"
    },
    effectText: {
      en: "During the production phase, this card produces 2 MC.",
      fr: "Lors de la phase de production, cette carte produit 2 MC."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 197,
    card_code: "197",
    origin: "base",
    cost: 20,
    tagsId: [],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Trapped Heat",
      fr: "Pi\xE8ges \xE0 Chaleur"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "2 $ressource_heat$",
      fr: "2 $ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produce 2 heat.",
      fr: "Lors de la phase de production, cette carte produit 2 chaleurs."
    },
    playedText: {
      en: "Flip an ocean tile.",
      fr: "R\xE9v\xE9lez 1 tuile Oc\xE9an."
    },
    prerequisiteText: {
      en: "Requires a red or warmer temperature level.",
      fr: "Requiert un niveau de temp\xE9rature rouge ou plus chaud."
    },
    prerequisiteSummaryText: {
      en: "$other_temperature$",
      fr: "$other_temperature$"
    },
    stockable: []
  },
  {
    id: 198,
    card_code: "198",
    origin: "base",
    cost: 17,
    tagsId: [
      6
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Trees",
      fr: "Arbres"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "3 $ressource_plant$",
      fr: "3 $ressource_plant$"
    },
    effectText: {
      en: "During the production phase, this card produce 3 plant.",
      fr: "Lors de la phase de production, cette carte produit 3 plantes."
    },
    playedText: {
      en: "Gain 1 plant.",
      fr: "Gagnez 1 plante."
    },
    prerequisiteText: {
      en: "Requires a yellow or warmer temperature level.",
      fr: "Requiert un niveau de temp\xE9rature jaune ou plus chaud."
    },
    prerequisiteSummaryText: {
      en: "$other_temperature$",
      fr: "$other_temperature$"
    },
    stockable: []
  },
  {
    id: 201,
    card_code: "201",
    origin: "base",
    cost: 7,
    tagsId: [
      0
    ],
    effectSummaryType: "mixedProduction",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "I-II",
    title: {
      en: "Underground City",
      fr: "Cit\xE9 Souterraine"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_1$$skipline$$ressource_steel$",
      fr: "$ressource_megacreditvoid_1$$skipline$$ressource_steel$"
    },
    effectText: {
      en: "During the production phase, this card produces 1 MC. When you play a BUILDING, you pay 2 MC less for it.",
      fr: "Lors de la phase de production, cette carte produit 1 MC.$skipline$Lorsque vous jouez un $other_building$, le co\xFBt associ\xE9 est r\xE9duit de 2 MC."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 202,
    card_code: "202",
    origin: "base",
    cost: 31,
    tagsId: [
      0,
      3
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Undersea Vents",
      fr: "Events Sous-Marins"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$other_card$$skipline$4$ressource_heat$",
      fr: "$other_card$$skipline$4$ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produces 4 heat.",
      fr: "Lors de la phase de production, vous piochez 1 carte et cette carte produit 4 chaleurs."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 204,
    card_code: "204",
    origin: "base",
    cost: 16,
    tagsId: [
      0,
      1,
      5
    ],
    effectSummaryType: "greyProduction",
    cardType: "greenProject",
    vpNumber: "1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-II",
    phaseDown: "",
    title: {
      en: "Vesta Shipyard",
      fr: "Chantier de Vesta"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_titanium$",
      fr: "$ressource_titanium$"
    },
    effectText: {
      en: "When you play a $tag_space$, you pay 3 MC less for it.",
      fr: "Lorsque vous jouez un $tag_space$, le co\xFBt est r\xE9duit de 3 MC."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 213,
    card_code: "P05",
    origin: "promo",
    cost: 8,
    tagsId: [
      2
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Laboratories",
      fr: "Laboratoires"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$other_card$ / 3 $tag_science$",
      fr: "$other_card$ / 3 $tag_science$"
    },
    effectText: {
      en: "During the production phase, draw a card for every 3 $tag_science$ you have, including this.",
      fr: "Lors de la phase de production, piochez 1 carte par groupe de 3 $tag_science$ en votre possession, y compris celui-ci."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 214,
    card_code: "P06",
    origin: "promo",
    cost: 13,
    tagsId: [
      0,
      3
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Matter Generator",
      fr: "G\xE9n\xE9rateur de Mati\xE8re"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$other_card$ $other_arrow$ $ressource_megacreditvoid_6$",
      fr: "$other_card$ $other_arrow$ $ressource_megacreditvoid_6$"
    },
    effectText: {
      en: "Action: Discard a card in hand to gain 6 MC.",
      fr: "Action: D\xE9faussez une carte de votre main pour gagner 6 MC."
    },
    playedText: {
      en: "Draw 2 cards.",
      fr: "Piochez 2 cartes."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 217,
    card_code: "P09",
    origin: "promo",
    cost: 8,
    tagsId: [
      2
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Progressive Policies",
      fr: "Politiques Progressives"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_10$ $other_arrow$ $other_oxygen$$skipline$$ressource_megacreditvoid_-5$ if 4 $tag_event$",
      fr: "$ressource_megacreditvoid_10$ $other_arrow$ $other_oxygen$ $skipline$ $ressource_megacreditvoid_-5$ si 4 $tag_event$"
    },
    effectText: {
      en: "Action : Spend 10 MC to raise the oxygen 1 step. Reduce this by 5 MC if you have 4 or more $tag_event$.",
      fr: "Action : D\xE9pensez 10 MC pour augmenter le niveau d'oxyg\xE8ne de 1. Ce co\xFBt est r\xE9duit de 5MC si vous avez 4 $tag_event$ ou plus en jeu."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 222,
    card_code: "P19",
    origin: "promo",
    cost: 7,
    tagsId: [
      8,
      4
    ],
    effectSummaryType: "trigger",
    cardType: "blueProject",
    vpNumber: "1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-II, V",
    phaseDown: "",
    title: {
      en: "Bacterial Aggregates",
      fr: "Agr\xE9gats de Bact\xE9ries"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$tag_earth$ : $ressource_microbe$$skipline$$other_researchsymbol$ :$other_researchcard$/$ressource_microbe$",
      fr: "$tag_earth$ : $ressource_microbe$$skipline$$other_researchsymbol$ :$other_researchcard$/$ressource_microbe$"
    },
    effectText: {
      en: "Effect: When you play a $tag_earth$, including this, add a microbe to this card (5 max).$skipline$Effect: When you draw cards during the research phase, draw an additional card for each $ressource_microbe$ on this card.",
      fr: "Effet: Lorsque vous jouez un $tag-earth$, y compris celui-ci, ajoutez un microbe \xE0 cette carte (5 max).$skipline$Effet: Lorsque vous piochez des cartes pendant la phase de recherche, piochez une carte suppl\xE9mentaire pour chaque $ressource_microbe$ sur cette carte."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: [
      "microbe"
    ]
  },
  {
    id: 223,
    card_code: "P20",
    origin: "promo",
    cost: 21,
    tagsId: [
      0
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "City Council",
      fr: "Conseil Municipal"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$other_arrow$ $other_card$$skipline$+ $other_card$ / $other_objective$",
      fr: "$other_arrow$ $other_card$$skipline$+ $other_card$ / $other_objective$"
    },
    effectText: {
      en: "Action: Draw a card. Draw 1 additional card for each Objective you have.",
      fr: "Action: Piochez 1 carte. Piochez 1 carte suppl\xE9mentaire pour chaque Objectif en votre possession."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 224,
    card_code: "P21",
    origin: "promo",
    cost: 13,
    tagsId: [
      6
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Community Afforestation",
      fr: "Communaut\xE9 de Reforestation"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_14$ $other_arrow$ $other_forest$$skipline$$ressource_megacreditvoid_-4$ / $otherobjective$",
      fr: "$ressource_megacreditvoid_14$ $other_arrow$ $other_forest$$skipline$$ressource_megacreditvoid_-4$ / $otherobjective$"
    },
    effectText: {
      en: "Action: Spend 14 MC to take 1 Forest VP and raise the oxygen 1 step. Reduce its cost by 4 MC for each Objective you have.",
      fr: "Action: D\xE9pensez 14 MC pour gagner un PV For\xEAt et augmenter l'oxyg\xE8ne de 1 niveau. Ce co\xFBt est r\xE9duit de 4 MC pour chaque Objectif en votre possession."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 229,
    card_code: "P26",
    origin: "promo",
    cost: 16,
    tagsId: [
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Innovative Technologies Award",
      fr: "Prix de l'Innovation Technologique"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase your $other_tr$ by 1 level for each Improved Phase card you have.",
      fr: "Augmentez votre $other_tr$ de 1 niveau pour chaque carte Phase am\xE9lior\xE9e en votre possession."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 230,
    card_code: "P27",
    origin: "promo",
    cost: 11,
    tagsId: [
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Martian Studies Scholarship",
      fr: "Bourse d'Etudes Martienne"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: 'Upgrade your Phase card II. Collect the associate "Bonus" during this phase.',
      fr: 'Am\xE9liorer Votre carte Phase II. Gagnez le "Bonus" associ\xE9 lors de cette phase.'
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 232,
    card_code: "P29",
    origin: "promo",
    cost: 18,
    tagsId: [
      3
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Glacial Evaporation",
      fr: "Fonte de la Calotte Glaciaire"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "4 $ressource_heat$",
      fr: "4 $ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produce 4 heat.",
      fr: "Lors de la phase de production, cette carte produit 4 chaleurs."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 233,
    card_code: "P30",
    origin: "promo",
    cost: 8,
    tagsId: [
      4
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Tourism",
      fr: "Tourisme"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_2$",
      fr: "$ressource_megacreditvoid_2$"
    },
    effectText: {
      en: "During the production phase, this card produce 2 MC.",
      fr: "Lors de la phase de production, cette carte produit 2 MC."
    },
    playedText: {
      en: "Increase your $other_tr$ by 1 level for each Objective you have.",
      fr: "Augmentez votre $other_tr$ de 1 niveau pour chaque Objectif en votre possession."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 253,
    card_code: "D22",
    origin: "discovery",
    cost: 27,
    tagsId: [
      0,
      6
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Biofoundries",
      fr: "Biofonderies"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$ $ressource_plant$",
      fr: "$ressource_plant$ $ressource_plant$"
    },
    effectText: {
      en: "During the production phase, this card produces 1 plant.",
      fr: "Lors de la Phase de production, cette carte produit 2 plantes."
    },
    playedText: {
      en: "Upgrade a Phase card.",
      fr: "Am\xE9liorer une carte Phase."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 260,
    card_code: "D29",
    origin: "discovery",
    cost: 28,
    tagsId: [
      0
    ],
    effectSummaryType: "mixedProduction",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "I-II",
    title: {
      en: "Hematite Mining",
      fr: "Extraction d'H\xE9matite"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "2 $other_card$$skipline$$ressource_steel$",
      fr: "2 $other_card$$skipline$$ressource_steel$"
    },
    effectText: {
      en: "During the production phase, draw 2 cards.$skipline$When you play a $tag_building$, you pay 2 MC less for it.",
      fr: "Lors de la phase de production, piochez 2 cartes.$skipline$Lorsque vous jouez un $tag_building$, le co\xFBt associ\xE9 est r\xE9duit de 2 MC."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 263,
    card_code: "D32",
    origin: "discovery",
    cost: 29,
    tagsId: [
      0,
      3
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Industrial Complex",
      fr: "Complexe Industriel"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "4 $ressource_heat$",
      fr: "4 $ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produce 4 heat.",
      fr: "Lors de la phase de production, cette carte produit 4 chaleurs."
    },
    playedText: {
      en: "Upgrade a Phase card.",
      fr: "Am\xE9liorer une carte Phase."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 266,
    card_code: "D35",
    origin: "discovery",
    cost: 14,
    tagsId: [
      0,
      3
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Award Winning Reflector Material",
      fr: "Mat\xE9riau R\xE9fl\xE9chissant Prim\xE9"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "3 $ressource_heat$",
      fr: "3 $ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produce 3 heat.",
      fr: "Lors de la phase de production, cette carte produit 3 chaleurs."
    },
    playedText: {
      en: "If you have a goal, gain 4 heats.",
      fr: "Si vous avez un objectif, gagnez 4 chaleurs."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 268,
    card_code: "D37",
    origin: "discovery",
    cost: 10,
    tagsId: [
      0
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Perfluorocarbon Production",
      fr: "Production de Perfluorocarbone"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_heat$",
      fr: "$ressource_heat$"
    },
    effectText: {
      en: "During the production phase, this card produce 1 heat.",
      fr: "Lors de la phase de production, cette carte produit 1 chaleur."
    },
    playedText: {
      en: "Upgrade your Phase card I.",
      fr: "Am\xE9liorez votre carte Phase I."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 271,
    card_code: "D40",
    origin: "discovery",
    cost: 16,
    tagsId: [
      0,
      6
    ],
    effectSummaryType: "production",
    cardType: "greenProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "IV",
    phaseDown: "",
    title: {
      en: "Biological Factories",
      fr: "Usines Biologiques"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_plant$",
      fr: "$ressource_plant$"
    },
    effectText: {
      en: "During the production phase, this card produce 1 plant.",
      fr: "Lors de la phase de production, cette carte produit 1 plante."
    },
    playedText: {
      en: "Upgrade your Phase card IV.",
      fr: "Am\xE9liorez votre carte Phase IV."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 277,
    card_code: "F05",
    origin: "foundations",
    cost: 15,
    tagsId: [
      2,
      1,
      4
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Interplanetary Superhighway",
      fr: "Liaison Interplan\xE9taire Express"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_10$ $other_arrow$ $other_infrastructure$$skipline$$ressource_megacreditvoid_-5$ Si 4 $tag_science$",
      fr: "$ressource_megacreditvoid_10$ $other_arrow$ $other_infrastructure$$skipline$$ressource_megacreditvoid_-5$ Si 4 $tag_science$"
    },
    effectText: {
      en: "Action: Spend 10 MC to raise the infrastructure 1 step. Reduce its cost by 5 MC if you have 4 $tag_science$ or more.",
      fr: "Action: D\xE9pensez 10 MC pour augmentr l'infrastructure de 1 niveau. Ce Co\xFBt est r\xE9duit de 5 MC si vous avez 4 $tag_science$ ou plus."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 278,
    card_code: "F06",
    origin: "foundations",
    cost: 16,
    tagsId: [
      0
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Maglev Trains",
      fr: "Train \xE0 Sustentation Magn\xE9tique"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$other_arrow$ $other_card$$skipline$If $other_infrastructure$ + $other_card$",
      fr: "$other_arrow$ $other_card$$skipline$If $other_infrastructure$ + $other_card$"
    },
    effectText: {
      en: "Action: Draw a card.$skipline$If the infrastructure was at the yellow level or higher at the beginning of this phase, draw 1 additional card.",
      fr: "Action: Piochez 1 carte.$skipline$Si l'infrastructure \xE9tait au niveau jaune ou sup\xE9rieur au d\xE9but de cette phase, piochez 1 carte suppl\xE9mentaire."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 279,
    card_code: "F07",
    origin: "foundations",
    cost: 10,
    tagsId: [
      7
    ],
    effectSummaryType: "trigger",
    cardType: "blueProject",
    vpNumber: "*",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "I-III",
    phaseDown: "",
    title: {
      en: "Pets",
      fr: "Animaux Domestiques"
    },
    vpText: {
      en: "* = 1 VP for every 2 animals resources on this card.",
      fr: "* = 1 PV par groupe de 2 animaux sur cette carte."
    },
    effectSummaryText: {
      en: "$other_infrastructure$ : $ressource_animal$",
      fr: "$other_infrastructure$ : $ressource_animal$"
    },
    effectText: {
      en: "Effect: When you increase the infrastructure, add 1 animal to this card.",
      fr: "Effet: Lorsque vous augmentez l'infrastructure, ajoutez 1 animal sur cette carte."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: [
      "animal"
    ]
  },
  {
    id: 280,
    card_code: "F08",
    origin: "foundations",
    cost: 18,
    tagsId: [
      0,
      3
    ],
    effectSummaryType: "action",
    cardType: "blueProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "III",
    phaseDown: "",
    title: {
      en: "Sawmill",
      fr: "Scierie"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "$ressource_megacreditvoid_10$ $other_arrow$ $other_infrastructure$$skipline$$ressource_megacreditvoid_-2$ / $tag_plant$",
      fr: "$ressource_megacreditvoid_10$ $other_arrow$ $other_infrastructure$$skipline$$ressource_megacreditvoid_-2$ / $tag_plant$"
    },
    effectText: {
      en: "Action: Spend 10 MC to raise the infrastructure 1 step. Reduce its cost by 2 MC for each $tag_plant$ you have.",
      fr: "Action: D\xE9pensez 10 MC pour augmenter l'infrastructure de 1 niveau. Ce co\xFBt est r\xE9duit de 2 MC pour chaque $tag_plant$ en votre possession."
    },
    playedText: {
      en: "",
      fr: ""
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 281,
    card_code: "F09",
    origin: "foundations",
    cost: 14,
    tagsId: [
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Architecture Blueprints",
      fr: "Projets Architecturaux"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase the infrastructure 1 step.$skipline$Draw 2 cards, then discard 1 card.",
      fr: "Augmentez l'infrastructure de 1 niveau.$skipline$Piochez 2 cartes. Puis, d\xE9faussez 1 carte."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 282,
    card_code: "F10",
    origin: "foundations",
    cost: 24,
    tagsId: [
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Bedrock Wellbore",
      fr: "Puits de Forage Rocheux"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Flip an ocean tile.$skipline$Increase the infrastructure 1 step.",
      fr: "R\xE9v\xE9lez une tuile Oc\xE9an.$skipline$Augmentez l'infrastructure de 1 niveau."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 284,
    card_code: "F12",
    origin: "foundations",
    cost: 30,
    tagsId: [
      1,
      3,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "CHP Combustion Turbines",
      fr: "Turbines de Cog\xE9n\xE9ration d'Energie"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase the infrastructure 1 step.$skipline$Increase the oxygen 1 step.$skipline$Increase the temperature 1 step.",
      fr: "Augmentez l'infrastructure de 1 niveau.$skipline$Augmentez l'oxyg\xE8ne de 1 niveau.$skipline$Augmentez la temp\xE9rature de 1 niveau."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 286,
    card_code: "F14",
    origin: "foundations",
    cost: 30,
    tagsId: [
      0,
      6,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Grain Silos",
      fr: "Silos \xE0 Grains"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase the infrastructure 2 step.$skipline$Gain 4 plant.",
      fr: "Augmentez l'infrastructure de 2 niveaux.$skipline$Gagnez 4 plantes."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 289,
    card_code: "F17",
    origin: "foundations",
    cost: 28,
    tagsId: [
      2,
      9
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "-1",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Low-Atmosphere Planes",
      fr: "A\xE9ronefs pour Atmosph\xE8re Basse"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Increase the infrastructure 3 step.",
      fr: "Augmentez l'infrastructure de 3 niveaux."
    },
    prerequisiteText: {
      en: "",
      fr: ""
    },
    prerequisiteSummaryText: {
      en: "",
      fr: ""
    },
    stockable: []
  },
  {
    id: 292,
    card_code: "F20",
    origin: "foundations",
    cost: 12,
    tagsId: [
      6
    ],
    effectSummaryType: "",
    cardType: "redProject",
    vpNumber: "",
    prerequisiteTresholdType: "",
    prerequisiteType: "",
    prerequisiteTresholdValue: 0,
    phaseUp: "",
    phaseDown: "",
    title: {
      en: "Urban Forestry",
      fr: "For\xEAts Urbaines"
    },
    vpText: {
      en: "",
      fr: ""
    },
    effectSummaryText: {
      en: "",
      fr: ""
    },
    effectText: {
      en: "",
      fr: ""
    },
    playedText: {
      en: "Gain 1 Forest VP and increase oxygen by 1 level.$skipline$Earn 5 MC.",
      fr: "Gagnez 1 PV For\xEAt et augmentez l'oxyg\xE8ne de 1 niveau.$skipline$Gagnez 5 MC."
    },
    prerequisiteText: {
      en: "Requires a yellow infrastructure level or higher.",
      fr: "Requiert un niveau d'infrastructure jaune ou sup\xE9rieur."
    },
    prerequisiteSummaryText: {
      en: "$other_infrastructure$",
      fr: ""
    },
    stockable: []
  }
];

// src/app/services/cards/project-card-info.service.ts
import * as i012 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var language2 = "en";
var stockableMap = /* @__PURE__ */ new Map([
  ["microbe", "microbe"],
  ["animal", "animal"],
  ["science", "science"]
]);
var ProjectCardInfoService = class _ProjectCardInfoService {
  constructor() {
    this.projectCardInfo = this.loadJson();
  }
  getCardById(cardId) {
    return this.projectCardInfo.find((x) => x.id === cardId);
  }
  getProjectCardIdList() {
    let cardList = [];
    for (let card of this.projectCardInfo) {
      cardList.push(card.id);
    }
    return cardList;
  }
  getProjectCardList(cardIdList) {
    let resultProjectCardList = [];
    cardIdList.forEach((element) => {
      let card = this.getCardById(Utils.jsonCopy(element));
      if (card != void 0) {
        resultProjectCardList.push(card);
      }
    });
    return resultProjectCardList;
  }
  getProjectCardIdListFromModel(cards) {
    let idList = [];
    for (let card of cards) {
      idList.push(card.id);
    }
    return idList;
  }
  getCardNumber() {
    return this.projectCardInfo.length;
  }
  loadJson() {
    this.projectCardInfo = [];
    let cardList = [];
    for (let jsonCard of cards_data_default) {
      let card = new ProjectCardModel();
      card.id = jsonCard.id;
      card.cardCode = jsonCard.card_code;
      card.origin = jsonCard.origin;
      card.costInitial = jsonCard.cost;
      card.tagsId = this.convertTagList(jsonCard.tagsId);
      card.cardSummaryType = this.convertSummaryType(jsonCard.effectSummaryType);
      card.cardType = this.convertCardType(jsonCard.cardType);
      card.vpNumber = jsonCard.vpNumber;
      card.prerequisiteTresholdType = this.convertPrerequisiteTresholdType(jsonCard.prerequisiteTresholdType);
      card.prerequisiteType = this.convertPrerequisiteType(jsonCard.prerequisiteType);
      card.prerequisiteTresholdValue = Number(jsonCard.prerequisiteTresholdValue);
      card.phaseUp = jsonCard.phaseUp;
      card.phaseDown = jsonCard.phaseDown;
      card.title = jsonCard.title[language2];
      card.vpText = jsonCard.vpText[language2];
      card.effectSummaryText = jsonCard.effectSummaryText[language2];
      card.effectText = jsonCard.effectText[language2];
      card.playedText = jsonCard.playedText[language2];
      card.prerequisiteText = jsonCard.prerequisiteText[language2];
      card.prerequisiteSummaryText = jsonCard.prerequisiteSummaryText[language2];
      card.stockable = this.convertStockable(jsonCard.stockable);
      cardList.push(card);
    }
    return cardList;
  }
  convertTagList(inputList) {
    let tags = [];
    for (let tag of inputList) {
      tags.push(Number(tag));
    }
    return tags;
  }
  convertStockable(inputList) {
    let result = [];
    for (let input of inputList) {
      let ressource = stockableMap.get(input);
      if (!ressource) {
        continue;
      }
      result.push(ressource);
    }
    return result;
  }
  convertSummaryType(input) {
    switch (input) {
      case "action": {
        return "action";
      }
      case "trigger": {
        return "trigger";
      }
      case "production": {
        return "production";
      }
      case "greyProduction": {
        return "greyProduction";
      }
      default: {
        return void 0;
      }
    }
  }
  convertCardType(input) {
    switch (input) {
      case "redProject": {
        return "redProject";
      }
      case "greenProject": {
        return "greenProject";
      }
      case "blueProject": {
        return "blueProject";
      }
      default: {
        return void 0;
      }
    }
  }
  convertPrerequisiteTresholdType(input) {
    switch (input) {
      case "min": {
        return "min";
      }
      case "max": {
        return "max";
      }
      default: {
        return void 0;
      }
    }
  }
  convertPrerequisiteType(input) {
    switch (input) {
      case "tag": {
        return "tag";
      }
      case "oxygen": {
        return "oxygen";
      }
      case "infrastructure": {
        return "infrastructure";
      }
      case "ocean": {
        return "ocean";
      }
      case "heat": {
        return "heat";
      }
      case "tr": {
        return "tr";
      }
      default: {
        return void 0;
      }
    }
  }
  static {
    this.\u0275fac = function ProjectCardInfoService_Factory(t) {
      return new (t || _ProjectCardInfoService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i012.\u0275\u0275defineInjectable({ token: _ProjectCardInfoService, factory: _ProjectCardInfoService.\u0275fac, providedIn: "root" });
  }
};

// src/app/services/cards/project-card-initialize.service.ts
import { Injectable as Injectable9 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i013 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var ProjectCardInitializeService = class _ProjectCardInitializeService {
  initialize(card) {
    switch (card.id) {
      case 222: {
        card.triggerLimit = { limit: 5, value: 0 };
        break;
      }
    }
  }
  static {
    this.\u0275fac = function ProjectCardInitializeService_Factory(t) {
      return new (t || _ProjectCardInitializeService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i013.\u0275\u0275defineInjectable({ token: _ProjectCardInitializeService, factory: _ProjectCardInitializeService.\u0275fac, providedIn: "root" });
  }
};

// src/app/models/player-info/player-state-project-card.model.ts
var PlayerProjectCardStateModel = class _PlayerProjectCardStateModel {
  constructor(injector, dto) {
    this.injector = injector;
    this.hand = [];
    this.projects = {
      playedIdList: [],
      playedProjectList: []
    };
    this.triggers = new TriggerState();
    this.handMaximumSize = GAME_HAND_MAXIMUM_SIZE;
    this.cardInfoService = this.injector.get(ProjectCardInfoService);
    this.cardInitializeService = this.injector.get(ProjectCardInitializeService);
    this.hand = dto.h, //this.projects = dto.p
    this.handMaximumSize = dto.hms;
    this.projects = {
      playedIdList: dto.ppil,
      playedProjectList: this.cardInfoService.getProjectCardList(dto.ppil)
    };
    this.triggers = TriggerState.fromJson(dto.t);
  }
  playCard(card) {
    this.projects.playedIdList.push(card.id);
    this.projects.playedProjectList.push(card);
    this.cardInitializeService.initialize(card);
    if (card.cardSummaryType != "trigger") {
      return;
    }
    this.triggers.playTrigger(card.id);
  }
  addCardsToHand(cards) {
    this.hand = this.hand.concat(Utils.toNumberArray(cards));
  }
  removeCardsFromHand(cards) {
    let cardList = Utils.toNumberArray(cards);
    for (let card of cardList) {
      let index = this.hand.indexOf(Number(card), 0);
      if (index > -1) {
        this.hand.splice(index, 1);
      }
    }
  }
  getHandCurrentSize() {
    return this.hand.length;
  }
  getHandMaximumSize() {
    return this.handMaximumSize;
  }
  getPlayedTriggersId() {
    return this.triggers.getPlayedTriggers();
  }
  getActivePlayedTriggersId() {
    return this.triggers.getActivePlayedTriggers();
  }
  getTriggersIdOnRessourceAddedToCard() {
    return this.triggers.getOnRessourceAddedToCard();
  }
  getTriggersIdOnParameterIncrease() {
    return this.triggers.getOnParameterIncrease();
  }
  getTriggersIdOnPlayedCard() {
    return this.triggers.getOnPlayedCard();
  }
  getTriggersIdOnGainedTag() {
    return this.triggers.getOnGainedTag();
  }
  getTriggerCostMod() {
    return this.triggers.getCostMod();
  }
  setTriggerInactive(triggerId) {
    this.triggers.setTriggerInactive(triggerId);
  }
  getProjectPlayedIdList(filter) {
    return this.filterCardIdList(this.projects.playedIdList, filter);
  }
  getProjectPlayedModelList(filter) {
    return this.filterCardModelList(this.projects.playedProjectList, filter);
  }
  getProjectPlayedModelFromId(cardId) {
    for (let card of this.projects.playedProjectList) {
      if (card.id === cardId) {
        return card;
      }
    }
    return;
  }
  addRessourceToCard(cardId, ressource) {
    let card = this.getProjectPlayedModelFromId(cardId);
    if (!card) {
      return;
    }
    card.addRessourceToStock(ressource);
  }
  getCardStockValue(cardId, ressourceName) {
    let result = this.getProjectPlayedModelFromId(cardId)?.getStockValue(ressourceName);
    if (!result) {
      return 0;
    }
    return result;
  }
  getProjectHandIdList(filter) {
    return this.filterCardIdList(this.hand, filter);
  }
  filterCardModelList(cards, filter) {
    if (!filter) {
      return cards;
    }
    let projectList = [];
    for (let card of cards) {
      if (card.isFilterOk(filter) === true) {
        projectList.push(card);
      }
    }
    return projectList;
  }
  filterCardIdList(cards, filter) {
    if (!filter) {
      return cards;
    }
    let projectList = this.filterCardModelList(this.cardInfoService.getProjectCardList(cards), filter);
    let idList = [];
    for (let project of projectList) {
      idList.push(project.id);
    }
    return idList;
  }
  toJson() {
    return {
      h: this.hand,
      ppil: this.projects.playedIdList,
      ppcs: null,
      t: this.triggers.toJson(),
      hms: this.handMaximumSize
    };
  }
  static fromJson(data, injector) {
    if (!data.h || !data.ppil || data.ppcs || !data.t || !data.hms) {
      throw new Error("Invalid PlayerProjectCardStateDTO: Missing required fields");
    }
    return new _PlayerProjectCardStateModel(injector, data);
  }
  static empty(injector) {
    return new _PlayerProjectCardStateModel(injector, {
      h: [],
      hms: 0,
      ppil: [],
      ppcs: [],
      t: { aci: [], acmt: [], aogt: [], aopc: [], aopi: [], aoratc: [], pci: [] }
    });
  }
};

// src/app/models/player-info/player-state.model.ts
var PlayerStateModel = class _PlayerStateModel {
  constructor(injector, dto) {
    this.injector = injector;
    this.infoState = dto ? new PlayerInfoStateModel(dto.infoState) : PlayerInfoStateModel.empty();
    this.scoreState = dto ? new PlayerScoreStateModel(dto.scoreState) : PlayerScoreStateModel.empty();
    this.tagState = dto ? new PlayerTagStateModel(dto.tagState) : PlayerTagStateModel.empty();
    this.ressourceState = dto ? new PlayerRessourceStateModel(dto.ressourceState) : PlayerRessourceStateModel.empty();
    this.projectCardState = dto ? new PlayerProjectCardStateModel(injector, dto.projectCardState) : PlayerProjectCardStateModel.empty(injector);
    this.phaseCardState = dto ? new PlayerPhaseCardStateModel(injector, dto.phaseCardState) : PlayerPhaseCardStateModel.empty(injector);
    this.globalParameterState = dto ? new PlayerGlobalParameterStateModel(dto.globalParameterState) : PlayerGlobalParameterStateModel.empty();
    this.otherState = dto ? new PlayerOtherStateModel(dto.otherState) : PlayerOtherStateModel.empty();
  }
  //infostate
  getId() {
    return this.infoState.getId();
  }
  setId(id) {
    this.infoState.setId(id);
  }
  getName() {
    return this.infoState.getName();
  }
  setName(name) {
    this.infoState.setName(name);
  }
  getColor() {
    return this.infoState.getColor();
  }
  setColor(color) {
    this.infoState.setColor(color);
  }
  //scoreState
  getMilestoneCompleted() {
    return this.scoreState.getMilestoneCompletedNumber();
  }
  addMilestoneCompleted() {
    this.scoreState.addMilestoneCompleted();
  }
  getVP() {
    return this.scoreState.getVP();
  }
  addVP(vp) {
    this.scoreState.addVP(vp);
  }
  getTR() {
    return this.scoreState.getVP();
  }
  addTR(vp) {
    this.scoreState.addVP(vp);
  }
  //tagState
  getTags() {
    return this.tagState.getTags();
  }
  addPlayedCardTags(card) {
    this.tagState.addPlayedCardTags(card);
  }
  //ressourceState
  getRessources() {
    return this.ressourceState.getRessources();
  }
  getRessourceInfoFromId(id) {
    return this.ressourceState.getRessourceInfoFromId(id);
  }
  getRessourceInfoFromType(type) {
    return this.ressourceState.getRessourceStateFromType(type);
  }
  addRessource(type, quantity) {
    this.ressourceState.addRessource(type, quantity);
  }
  addProduction(type, quantity) {
    this.ressourceState.addProduction(type, quantity);
  }
  setScalingProduction(type, quantity) {
    this.ressourceState.setScalingProduction(type, quantity);
  }
  //phaseCardState
  getPhaseCardUpgradedCount() {
    return this.phaseCardState.getPhaseCardUpgradedCount();
  }
  addPhaseCardUpgradeCount() {
    this.phaseCardState.addPhaseCardUpgradeCount();
  }
  setPhaseCardUpgraded(upgrade) {
    this.phaseCardState.setPhaseCardUpgraded(upgrade);
  }
  getPhaseSelected() {
    return this.phaseCardState.getPhaseSelected();
  }
  setPhaseSelected(selection) {
    this.phaseCardState.setPhaseSelected(selection);
  }
  getUpgradedPhaseCards() {
    return this.phaseCardState.getUpgradedPhaseCards();
  }
  getPhaseGroups() {
    return this.phaseCardState.getPhaseGroups();
  }
  //globalParameterState
  addGlobalParameterStepEOP(parameter) {
    this.globalParameterState.addGlobalParameterStepEOP(parameter);
  }
  getGlobalParameters() {
    return this.globalParameterState.getGlobalParameters();
  }
  //otherState
  getResearch() {
    return this.otherState.getResearch();
  }
  setResearch(research) {
    this.otherState.setResearch(research);
  }
  addResearchValue(research) {
    this.otherState.addResearchValue(research);
  }
  getResearchScan() {
    return this.otherState.getResearchScan();
  }
  getResearchKeep() {
    return this.otherState.getResearchKeep();
  }
  getSellCardValueMod() {
    return this.otherState.getSellCardValueMod();
  }
  addSellCardValueMod(value) {
    this.otherState.addSellCardValueMod(value);
  }
  //cardState
  setTriggerInactive(triggerId) {
    this.projectCardState.setTriggerInactive(triggerId);
  }
  getTriggersIdOnPlayedCard() {
    return this.projectCardState.getTriggersIdOnPlayedCard();
  }
  getTriggersIdOnParameterIncrease() {
    return this.projectCardState.getTriggersIdOnParameterIncrease();
  }
  getTriggersIdOnRessourceAddedToCard() {
    return this.projectCardState.getTriggersIdOnRessourceAddedToCard();
  }
  getTriggersIdOnGainedTag() {
    return this.projectCardState.getTriggersIdOnGainedTag();
  }
  getTriggerCostMod() {
    return this.projectCardState.getTriggerCostMod();
  }
  addCardsToHand(cards) {
    this.projectCardState.addCardsToHand(cards);
  }
  removeCardsFromHand(cardIdList) {
    this.projectCardState.removeCardsFromHand(cardIdList);
  }
  getProjectHandIdList(filter) {
    return this.projectCardState.getProjectHandIdList(filter);
  }
  getHandCurrentSize() {
    return this.projectCardState.getHandCurrentSize();
  }
  getHandMaximumSize() {
    return this.projectCardState.getHandMaximumSize();
  }
  addRessourceToCard(cardId, advancedRessourceStock) {
    this.projectCardState.addRessourceToCard(cardId, advancedRessourceStock);
  }
  getProjectPlayedModelFromId(cardId) {
    return this.projectCardState.getProjectPlayedModelFromId(cardId);
  }
  getProjectPlayedIdList(filter) {
    return this.projectCardState.getProjectPlayedIdList(filter);
  }
  getProjectPlayedModelList(filter) {
    return this.projectCardState.getProjectPlayedModelList(filter);
  }
  //to refactor
  playCard(card) {
    this.projectCardState.playCard(card);
    this.removeCardsFromHand([card.id]);
    this.payCardCost(card);
    this.addPlayedCardTags(card);
  }
  payCardCost(card) {
    this.addRessource("megacredit", -card.cost);
  }
  toJson() {
    return {
      infoState: this.infoState.toJson(),
      scoreState: this.scoreState.toJson(),
      tagState: this.tagState.toJson(),
      ressourceState: this.ressourceState.toJson(),
      projectCardState: this.projectCardState.toJson(),
      phaseCardState: this.phaseCardState.toJson(),
      globalParameterState: this.globalParameterState.toJson(),
      otherState: this.otherState.toJson()
    };
  }
  static fromJson(data, injector) {
    if (!data.infoState || !data.scoreState || !data.tagState || !data.ressourceState || !data.projectCardState || !data.phaseCardState || !data.globalParameterState || !data.otherState) {
      throw new Error("Invalid PlayerStateDTO: Missing required fields");
    }
    return new _PlayerStateModel(injector, data);
  }
  static empty(injector) {
    return new _PlayerStateModel(injector);
  }
};
var PlayerReadyModel = class {
  constructor() {
    this.isReady = false;
  }
};

// src/app/services/core-game/game-state.service.ts
import * as i016 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/services/websocket/rx-stomp.service.ts
import { Injectable as Injectable11 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { RxStomp } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@stomp_rx-stomp.js?v=ba073120";

// src/app/services/designers/websocket-message-factory.service.ts
import { Injectable as Injectable10 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/enum/websocket.enum.ts
var MessageContentQueryEnum;
(function(MessageContentQueryEnum2) {
  MessageContentQueryEnum2["drawQuery"] = "DRAW_QUERY";
  MessageContentQueryEnum2["ready"] = "READY_QUERY";
  MessageContentQueryEnum2["playerGameStateQuery"] = "PLAYER_GAME_STATE_QUERY";
  MessageContentQueryEnum2["selectedPhase"] = "SELECTED_PHASE_QUERY";
  MessageContentQueryEnum2["playerStatePush"] = "PLAYER_STATE_PUSH";
  MessageContentQueryEnum2["playerConnect"] = "PLAYER_CONNECT";
  MessageContentQueryEnum2["debug"] = "DEBUG";
})(MessageContentQueryEnum || (MessageContentQueryEnum = {}));
var PlayerMessageContentResultEnum;
(function(PlayerMessageContentResultEnum2) {
  PlayerMessageContentResultEnum2["draw"] = "DRAW_RESULT";
  PlayerMessageContentResultEnum2["gameState"] = "GAME_STATE";
  PlayerMessageContentResultEnum2["startGame"] = "START_GAME";
  PlayerMessageContentResultEnum2["playerConnect"] = "PLAYER_CONNECT";
  PlayerMessageContentResultEnum2["acknowledge"] = "ACKNOWLEDGE";
})(PlayerMessageContentResultEnum || (PlayerMessageContentResultEnum = {}));
var GroupMessageContentResultEnum;
(function(GroupMessageContentResultEnum2) {
  GroupMessageContentResultEnum2["ready"] = "READY_RESULT";
  GroupMessageContentResultEnum2["nextPhase"] = "NEXT_PHASE";
  GroupMessageContentResultEnum2["debug"] = "DEBUG";
  GroupMessageContentResultEnum2["serverSideUnhandled"] = "SERVER_SIDE_UNHANDLED";
})(GroupMessageContentResultEnum || (GroupMessageContentResultEnum = {}));
var SubscriptionEnum;
(function(SubscriptionEnum2) {
  SubscriptionEnum2["player"] = "PLAYER";
  SubscriptionEnum2["group"] = "GROUP";
})(SubscriptionEnum || (SubscriptionEnum = {}));

// src/app/services/designers/websocket-message-factory.service.ts
import { v4 as uuidv4 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/uuid.js?v=ba073120";
import * as i014 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var clientId = 0;
var gameId = 1;
var WebsocketQueryMessageFactory = class _WebsocketQueryMessageFactory {
  static generatePlayerMessage(contentEnum, content) {
    let message = {
      uuid: uuidv4(),
      gameId,
      playerId: clientId,
      contentEnum,
      content: content ?? { content: contentEnum }
    };
    return message;
  }
  static createDrawQuery(drawNumber, eventId) {
    let query = { drawNumber, eventId };
    return this.generatePlayerMessage(MessageContentQueryEnum.drawQuery, query);
  }
  static createReadyQuery(ready) {
    let query = { ready };
    return this.generatePlayerMessage(MessageContentQueryEnum.ready, query);
  }
  static createGameStateQuery() {
    return this.generatePlayerMessage(MessageContentQueryEnum.playerGameStateQuery);
  }
  static createPhaseSelectedQuery(phase) {
    let query = { phase };
    return this.generatePlayerMessage(MessageContentQueryEnum.selectedPhase, query);
  }
  static createClientPlayerStatePush(state) {
    let query = state.toJson();
    return this.generatePlayerMessage(MessageContentQueryEnum.playerStatePush, query);
  }
  static createConnectionQuery() {
    return this.generatePlayerMessage(MessageContentQueryEnum.playerConnect);
  }
  static {
    this.\u0275fac = function WebsocketQueryMessageFactory_Factory(t) {
      return new (t || _WebsocketQueryMessageFactory)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i014.\u0275\u0275defineInjectable({ token: _WebsocketQueryMessageFactory, factory: _WebsocketQueryMessageFactory.\u0275fac, providedIn: "root" });
  }
};
var WebsocketResultMessageFactory = class {
  static createMessageResult(message) {
    let parsedMessage = JSON.parse(message);
    let result = {
      uuid: parsedMessage["uuid"],
      gameId: parsedMessage["gameId"],
      contentEnum: parsedMessage["contentEnum"],
      content: parsedMessage["content"]
    };
    return result;
  }
  static createPlayerMessageResult(message) {
    let messageResult = this.createMessageResult(message);
    let result = {
      uuid: messageResult.uuid,
      gameId: messageResult.gameId,
      playerId: message["playerId"],
      contentEnum: messageResult.contentEnum,
      content: messageResult.content
    };
    return result;
  }
  static createGroupMessageResult(message) {
    return this.createMessageResult(message);
  }
  static inputToGroupReady(content) {
    let result = [];
    const entries = Object.entries(content);
    entries.forEach(([key, value]) => {
      result.push({ playerId: +key, ready: value });
    });
    return result;
  }
  static inputToGroupStateDTO(content) {
    let result = [];
    const entries = Object.entries(content);
    entries.forEach(([key, value]) => {
      result.push(value);
    });
    return result;
  }
  static createAckMessage(message) {
    let parsedMessage = JSON.parse(message);
    let result = {
      uuid: parsedMessage["uuid"],
      gameId: parsedMessage["gameId"],
      contentEnum: parsedMessage["contentEnum"]
    };
    return result;
  }
};

// src/app/services/websocket/rx-stomp.config.ts
var myRxStompConfig = {
  // Which server?
  brokerURL: "ws://localhost:8080/ws",
  // Headers
  // Typical keys: login, passcode, host
  connectHeaders: {
    //login: 'guest',
    //passcode: 'guest',
  },
  // How often to heartbeat?
  // Interval in milliseconds, set to 0 to disable
  heartbeatIncoming: 0,
  // Typical value 0 - disabled
  heartbeatOutgoing: 2e4,
  // Typical value 20000 - every 20 seconds
  // Wait in milliseconds before attempting auto reconnect
  // Set to 0 to disable
  // Typical value 500 (500 milli seconds)
  reconnectDelay: 2e3,
  // Will log diagnostics on console
  // It can be quite verbose, not recommended in production
  // Skip this key to stop logging to console
  debug: (msg) => {
  }
};

// src/app/services/websocket/rx-stomp.service.ts
import { v4 as uuidv42 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/uuid.js?v=ba073120";
import * as i015 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var RxStompService = class _RxStompService extends RxStomp {
  constructor() {
    super();
    this.messageQueue = [];
    this.isProcessingQueue = false;
    this.connectionState = false;
    this.configure(myRxStompConfig);
    this.connected$.subscribe(() => {
      this.onClientConnected();
    });
    this.connectionState$.subscribe(() => {
      let state = this.connectionState$.getValue();
      this.connectionState = state === 1;
    });
    this.watch(GLOBAL_WS_ACKNOWLEDGE).subscribe((message) => {
      this.handleAck(JSON.parse(message.body));
    });
    this.activate();
  }
  onClientConnected() {
    console.log("%cCLIENT RECONNECTED", "color:blue");
    this.isProcessingQueue = false;
    this.messageQueue = [];
    this.publishConnectionQuery();
  }
  enqueueMessage(message, destination = GLOBAL_WS_APP_PLAYER) {
    Utils.logPublishMessage(`${message.contentEnum}`, message.content);
    this.messageQueue.push({ body: JSON.stringify(message), destination, uuid: message.uuid });
    this.processQueue();
  }
  processQueue() {
    if (this.isProcessingQueue || this.messageQueue.length === 0) {
      return;
    }
    this.isProcessingQueue = true;
    const { destination, body } = this.messageQueue[0];
    this.publish({ destination, body });
    if (destination === GLOBAL_WS_APP_DEBUG) {
      this.isProcessingQueue = false;
      this.messageQueue.shift();
      this.processQueue();
    }
    return;
    setTimeout(() => {
      this.isProcessingQueue = false;
      this.processQueue();
    }, 1);
  }
  handleAck(ack) {
    if (this.messageQueue.length === 0)
      return;
    const headMessage = this.messageQueue[0];
    if (headMessage.uuid != ack.ackUuid) {
      return;
    }
    this.messageQueue.shift();
    this.isProcessingQueue = false;
    this.processQueue();
  }
  publishDebugMessage(args) {
    Utils.logError(`PUBLISHED DEBUG: ${args.contentEnum} `, args.content);
    const message = {
      uuid: uuidv42(),
      gameId: args.gameId ?? GLOBAL_GAME_ID,
      playerId: args.playerId ?? GLOBAL_CLIENT_ID,
      contentEnum: args.contentEnum ?? MessageContentQueryEnum.debug,
      content: { content: args.content }
    };
    this.enqueueMessage(message, GLOBAL_WS_APP_DEBUG);
  }
  publishDraw(drawNumber, eventId) {
    this.enqueueMessage(WebsocketQueryMessageFactory.createDrawQuery(drawNumber, eventId), GLOBAL_WS_APP_PLAYER);
  }
  publishClientPlayerReady(ready) {
    console.log("enqueue client rdy", ready);
    this.enqueueMessage(WebsocketQueryMessageFactory.createReadyQuery(ready), GLOBAL_WS_APP_PLAYER);
  }
  publishGameStateQuery() {
    this.enqueueMessage(WebsocketQueryMessageFactory.createGameStateQuery(), GLOBAL_WS_APP_PLAYER);
  }
  publishConnectionQuery() {
    this.enqueueMessage(WebsocketQueryMessageFactory.createConnectionQuery(), GLOBAL_WS_APP_PLAYER);
  }
  publishSelectedPhase(phase) {
    this.enqueueMessage(WebsocketQueryMessageFactory.createPhaseSelectedQuery(phase), GLOBAL_WS_APP_PLAYER);
  }
  publishPlayerState(state) {
    this.enqueueMessage(WebsocketQueryMessageFactory.createClientPlayerStatePush(state), GLOBAL_WS_APP_PLAYER);
  }
  static {
    this.\u0275fac = function RxStompService_Factory(t) {
      return new (t || _RxStompService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i015.\u0275\u0275defineInjectable({ token: _RxStompService, factory: _RxStompService.\u0275fac, providedIn: "root" });
  }
};

// src/app/services/core-game/game-state.service.ts
var phaseCount = 5;
var cardSellValue = 3;
var GameState = class _GameState {
  constructor(projectCardService, projectCardPlayed, rxStompService, injector) {
    this.projectCardService = projectCardService;
    this.projectCardPlayed = projectCardPlayed;
    this.rxStompService = rxStompService;
    this.injector = injector;
    this.loading = new BehaviorSubject(true);
    this.clientPlayerId = GLOBAL_CLIENT_ID;
    this.playerCount = new BehaviorSubject([]);
    this.groupPlayerState = new BehaviorSubject([]);
    this.groupPlayerReady = new BehaviorSubject([]);
    this.groupPlayerSelectedPhase = new BehaviorSubject([]);
    this.phase = new BehaviorSubject(NonSelectablePhaseEnum.undefined);
    this.drawQueue = new BehaviorSubject([]);
    this.eventQueue = new BehaviorSubject([]);
    this.clientState = new BehaviorSubject(PlayerStateModel.empty(this.injector));
    this.currentGroupPlayerState = this.groupPlayerState.asObservable();
    this.currentGroupPlayerReady = this.groupPlayerReady.asObservable();
    this.currentGroupPlayerSelectedPhase = this.groupPlayerSelectedPhase.asObservable();
    this.currentPhase = this.phase.asObservable();
    this.currentDrawQueue = this.drawQueue.asObservable();
    this.currentEventQueue = this.eventQueue.asObservable();
    this.currentPlayerCount = this.playerCount.asObservable();
    this.currentLoadingState = this.loading.asObservable();
    this.currentClientState = this.clientState.asObservable();
    this.phaseIndex = 0;
    this.phaseOrder = {
      "0": "planification",
      "1": "development",
      "2": "construction",
      "3": "action",
      "4": "production",
      "5": "research"
    };
    this.selectedPhase = {
      "undefined": false,
      "development": false,
      "construction": false,
      "action": false,
      "production": false,
      "research": false
    };
  }
  addPlayer(playerName, playerColor) {
  }
  setPlayerIdList(playerIdList) {
    this.playerCount.next(playerIdList);
  }
  setCurrentPhase(newPhase) {
    this.phase.next(newPhase);
    this.setClientReady(false);
  }
  setClientReady(ready) {
    this.setPlayerReady(this.clientPlayerId, ready);
  }
  setPlayerReady(playerId, ready) {
    let groupReady = this.groupPlayerReady.getValue();
    for (let player of groupReady) {
      if (player.id === playerId) {
        player.isReady = ready;
        break;
      }
    }
    this.groupPlayerReady.next(groupReady);
  }
  getClientReady() {
    return this.getPlayerReady(this.clientPlayerId);
  }
  getPlayerReady(playerId) {
    let groupReady = this.groupPlayerReady.getValue();
    for (let player of groupReady) {
      if (player.id === playerId) {
        return player.isReady;
      }
    }
    return false;
  }
  /*
  GoToNextPhaseIfPlayerReady(){
      let newPhase = this.goToNextPhase(this.phase.getValue())
      this.updatePhase(newPhase)
  }
      */
  /**
   * @param currentPhase as NonSelectablePhase
   * @returns next phase name
   *
   * triggers all phase change and cleaning related stuff
   */
  goToNextPhase(currentPhase) {
    let nextPhase;
    let startCounting = Math.max(this.phaseIndex + 1, 1);
    for (let i = startCounting; i <= phaseCount; i++) {
      if (this.accessSelectedPhase(this.accessPhaseOrder(i)) === true) {
        this.phaseIndex = i;
        nextPhase = this.accessPhaseOrder(i);
        this.setPhaseAsPlayed(currentPhase);
        return nextPhase;
      }
    }
    this.phaseIndex = 0;
    this.setPhaseAsPlayed(currentPhase);
    this.resetPhaseSelection();
    return this.phaseOrder["0"];
  }
  updateGroupPlayerState(newState) {
    this.groupPlayerState.next(newState);
  }
  getPlayerStateFromId(playerId) {
    return this.groupPlayerState.getValue()[playerId];
  }
  getClientState() {
    return this.getPlayerStateFromId(this.clientPlayerId);
  }
  updatePlayerState(playerId, playerState) {
    this.groupPlayerState.getValue()[playerId] = playerState;
    this.updateGroupPlayerState(this.groupPlayerState.getValue());
  }
  updateClientState(clientState) {
    this.updatePlayerState(this.clientPlayerId, clientState);
    this.clientState.next(clientState);
  }
  accessPhaseOrder(key) {
    return this.phaseOrder[String(key)];
  }
  accessSelectedPhase(key) {
    return this.selectedPhase[key];
  }
  setPhaseAsPlayed(phaseName) {
    this.selectedPhase[phaseName] = false;
  }
  /**
   *
   * @param playerId
   * @param phase
   * @returns
   * sets up the phase selection for player
   *
   * updates the global selectedPhase
   */
  playerSelectPhase(playerId, phase) {
    if (phase === void 0) {
      return;
    }
    for (let i = 0; i < this.groupPlayerSelectedPhase.getValue().length; i++) {
      if (i === playerId) {
        this.groupPlayerSelectedPhase.getValue()[i].currentSelectedPhase = phase;
        break;
      }
    }
  }
  clientPlayerValidateSelectedPhase() {
    this.rxStompService.publishSelectedPhase(this.getClientCurrentSelectedPhase());
  }
  /**
   *
   * @param playerId
   * @param currentPhase
   * @returns undefined if the player didnt select the current phase or the phase card type they selected if equal to current phase
   */
  getPlayerSelectedPhaseCardType(playerId, currentPhase) {
    let selectedPhase = this.getPlayerPhase(playerId);
    if (selectedPhase === void 0) {
      return void 0;
    }
    if (selectedPhase.currentSelectedPhase != currentPhase) {
      return void 0;
    }
    return selectedPhase.currentPhaseType;
  }
  getClientCurrentSelectedPhase() {
    return this.getPlayerCurrentSelectedPhase(this.clientPlayerId);
  }
  /**
   *
   * @param playerId
   * @returns the player's current selected phase
   */
  getPlayerCurrentSelectedPhase(playerId) {
    for (let playerSelcted of this.groupPlayerSelectedPhase.getValue()) {
      if (playerSelcted.playerId === playerId) {
        return playerSelcted.currentSelectedPhase;
      }
    }
    return SelectablePhaseEnum.undefined;
  }
  /**
   *
   * @param playerId
   * @returns the player's PlayerPhase interface
   */
  getPlayerPhase(playerId) {
    for (let playerSelcted of this.groupPlayerSelectedPhase.getValue()) {
      if (playerSelcted.playerId === playerId) {
        return playerSelcted;
      }
    }
    return void 0;
  }
  /**
   * clears up current phase selection for players and adds previous selected phase
   */
  resetPhaseSelection() {
    for (let i = 0; i < this.groupPlayerSelectedPhase.getValue().length; i++) {
      this.groupPlayerSelectedPhase.getValue()[i].previousSelectedPhase = this.groupPlayerSelectedPhase.getValue()[i].currentSelectedPhase;
      this.groupPlayerSelectedPhase.getValue()[i].currentSelectedPhase = SelectablePhaseEnum.undefined;
    }
  }
  updateGroupPlayerSelectedPhase(newGroupPlayerSelectedPhase) {
    this.groupPlayerSelectedPhase.next(newGroupPlayerSelectedPhase);
  }
  getClientPhaseSelected() {
    return this.getClientState().getPhaseSelected();
  }
  getClientUpgradedPhaseCards() {
    return this.getClientState().getUpgradedPhaseCards();
  }
  getClientHandIdList() {
    return this.getClientState().getProjectHandIdList();
  }
  getClientHandModelList() {
    return this.projectCardService.getProjectCardList(this.getClientHandIdList());
  }
  getClientProjectPlayedIdList() {
    return this.getPlayerProjectPlayedIdList(this.clientPlayerId);
  }
  getPlayerProjectPlayedIdList(playerId) {
    return this.getPlayerStateFromId(playerId).getProjectPlayedIdList();
  }
  getClientProjectPlayedModelList(filter) {
    return this.getPlayerProjectPlayedModelList(this.clientPlayerId, filter);
  }
  getPlayerProjectPlayedModelList(playerId, filter) {
    return this.getPlayerStateFromId(playerId).getProjectPlayedModelList(filter);
  }
  addCardsToClientHand(cardsToAdd) {
    let clientState = this.getClientState();
    clientState.addCardsToHand(cardsToAdd);
    this.updateClientState(clientState);
  }
  removeCardsFromClientHand(cardsToRemove) {
    let clientState = this.getClientState();
    clientState.removeCardsFromHand(cardsToRemove);
    this.updateClientState(clientState);
  }
  addDrawQueue(drawEvent) {
    this.drawQueue.next(this.drawQueue.getValue().concat([drawEvent]));
  }
  removeDrawQueue(drawQueueElement) {
    const newDrawQueue = this.drawQueue.getValue();
    drawQueueElement.forEach((element) => {
      for (let i = 0; i < this.drawQueue.getValue().length; i++) {
        if (element === this.drawQueue.getValue()[i]) {
          newDrawQueue.splice(i, 1);
        }
      }
    });
    this.drawQueue.next(newDrawQueue);
  }
  cleanAndNextDrawQueue() {
    let newDrawQueue = [];
    for (let drawEvent of this.drawQueue.getValue()) {
      if (drawEvent.finalized != true) {
        newDrawQueue.push(drawEvent);
      }
    }
    this.drawQueue.next(newDrawQueue);
  }
  addEventQueue(events, addRule) {
    let newQueue = [];
    let addEvents = [];
    if (!Array.isArray(events)) {
      addEvents.push(events);
    } else {
      addEvents = events;
    }
    switch (addRule) {
      case "last": {
        newQueue = newQueue.concat(this.eventQueue.getValue(), addEvents);
        break;
      }
      case "first": {
        newQueue = newQueue.concat(addEvents, this.eventQueue.getValue());
        break;
      }
      case "second": {
        let oldQueue = this.eventQueue.getValue();
        let firstEvent = oldQueue.shift();
        newQueue = newQueue.concat(firstEvent ? [firstEvent] : [], addEvents, oldQueue);
      }
    }
    this.eventQueue.next(newQueue);
  }
  /**
   * gets nothing
   * returns nothing
   * emits a next signal for eventQueue.next()
   */
  cleanAndNextEventQueue() {
    let newEventQueue = [];
    for (let ticket of this.eventQueue.getValue()) {
      if (ticket.finalized != true) {
        newEventQueue.push(ticket);
      }
    }
    this.eventQueue.next(newEventQueue);
  }
  /*
  getPlayerPhaseCardHolder(playerId: number): PhaseCardHolderModel {
      return this.groupPlayerState.getValue()[playerId].phaseCards
  }
  getPlayerPhaseCardGroup(playerId: number, phaseIndex: number): PhaseCardGroupModel {
      return this.groupPlayerState.getValue()[playerId].phaseCards.phaseGroups[phaseIndex]
  }
  */
  setClientPhaseCardUpgraded(upgrade) {
    let state = this.getClientState();
    state.setPhaseCardUpgraded(upgrade);
    this.updateClientState(state);
  }
  sellCardsFromClientHand(quantity) {
    let playerState = this.getClientState();
    playerState.addRessource("megacredit", quantity * (cardSellValue + playerState.getSellCardValueMod()));
    this.updateClientState(playerState);
  }
  playCardFromClientHand(card) {
    let events = [];
    let newState = this.projectCardPlayed.playCard(card, this.getClientState());
    let playedCardEvents = this.projectCardPlayed.getPlayedCardEvent(card);
    this.updateClientState(newState);
    let onPlayedTriggers = newState.getTriggersIdOnPlayedCard();
    if (onPlayedTriggers.length != 0) {
      let eventsOnPlayed = this.projectCardPlayed.getEventTriggerByPlayedCard(card, onPlayedTriggers, newState);
      if (eventsOnPlayed != void 0) {
        events = events.concat(eventsOnPlayed);
      }
    }
    let onTagGainedTriggers = newState.getTriggersIdOnGainedTag();
    if (onTagGainedTriggers.length != 0) {
      let eventsOnTagGained = this.projectCardPlayed.getTriggerByTagGained(card, onTagGainedTriggers);
      if (eventsOnTagGained != void 0) {
        events = events.concat(eventsOnTagGained);
      }
    }
    if (playedCardEvents != void 0) {
      events = events.concat(playedCardEvents);
    }
    if (events.length === 0) {
      return;
    }
    events.reverse();
    this.addEventQueue(events, "first");
  }
  setClientTriggerAsInactive(triggerId) {
    let newState = this.getClientState();
    newState.setTriggerInactive(triggerId);
    this.updateClientState(newState);
  }
  removeMegaCreditsFromPlayer(playerId, quantity) {
    let playerState = this.getPlayerStateFromId(playerId);
    playerState.addRessource("megacredit", -quantity);
    this.updatePlayerState(playerId, playerState);
  }
  addGlobalParameterStepsEOPtoPlayerId(playerId, parameter) {
    let newState = this.getPlayerStateFromId(playerId);
    newState.addGlobalParameterStepEOP(parameter);
    this.updatePlayerState(playerId, newState);
    let triggers = newState.getTriggersIdOnParameterIncrease();
    if (triggers.length === 0) {
      return;
    }
    let events = this.projectCardPlayed.getEventTriggerByGlobalParameterIncrease(triggers, parameter);
    if (!events) {
      return;
    }
    this.addEventQueue(events, "first");
  }
  addRessourceToClient(ressources) {
    let playerState = this.getClientState();
    for (let ressource of ressources) {
      playerState.addRessource(ressource.name, ressource.valueStock);
    }
    this.updateClientState(playerState);
  }
  addRessourceToClientCard(cardStock) {
    let newState = this.getClientState();
    for (let stock of cardStock.stock) {
      newState.addRessourceToCard(cardStock.cardId, stock);
    }
    this.updateClientState(newState);
    for (let ressource of cardStock.stock) {
      let card = newState.getProjectPlayedModelFromId(cardStock.cardId);
      if (!card) {
        continue;
      }
      let triggers = newState.getTriggersIdOnRessourceAddedToCard();
      if (triggers.length === 0) {
        break;
      }
      let events = this.projectCardPlayed.getEventTriggerByRessourceAddedToCard(card, triggers, ressource);
      if (!events) {
        continue;
      }
      this.addEventQueue(events, "first");
    }
  }
  addClientResearchScanValue(scan) {
    let newState = this.getClientState();
    newState.addResearchValue({ scan });
    this.updateClientState(newState);
  }
  addClientResearchKeepValue(keep) {
    let newState = this.getClientState();
    newState.addResearchValue({ keep });
    this.updateClientState(newState);
  }
  getClientResearchMods() {
    return this.getClientState().getResearch();
  }
  handleWsDrawResult(wsDrawResult) {
    let eventFound = false;
    let drawQueue = this.drawQueue.getValue();
    for (let event of drawQueue) {
      if (event.waiterId != wsDrawResult.eventId) {
        continue;
      }
      event.served = true;
      event.drawResultCardList = wsDrawResult.cardIdList;
      eventFound = true;
      this.cleanAndNextDrawQueue();
      break;
    }
    if (eventFound === false) {
      console.log("event not found", wsDrawResult, drawQueue, this.eventQueue.getValue());
    }
  }
  setGroupReady(wsGroupReady) {
    for (let ready of wsGroupReady) {
      this.setPlayerReady(ready.playerId, ready.ready);
    }
  }
  clearEventQueue() {
    this.eventQueue.next([]);
  }
  finalizeEventWaitingGroupReady() {
    if (this.eventQueue.getValue().length === 0) {
      return;
    }
    for (let event of this.eventQueue.getValue()) {
      if (event.subType === "waitingGroupReady") {
        event.finalized = true;
      }
    }
    this.cleanAndNextEventQueue();
  }
  startGame() {
  }
  setGameLoaded() {
    this.loading.next(false);
  }
  setGroupStateFromJson(dto) {
    let groupPlayerState = [];
    let playerIdList = [];
    for (let playerStateDTO of dto) {
      playerIdList.push(playerStateDTO.infoState.i);
      groupPlayerState.push(PlayerStateModel.fromJson(playerStateDTO, this.injector));
    }
    this.setPlayerIdList(playerIdList);
    this.updateGroupPlayerState(groupPlayerState);
    let result = [];
    for (let i = 0; i < 4; i++) {
      let newPlayerPhase;
      newPlayerPhase = {
        "playerId": i,
        "currentSelectedPhase": SelectablePhaseEnum.undefined,
        "currentPhaseType": void 0,
        "previousSelectedPhase": SelectablePhaseEnum.undefined
      };
      result.push(newPlayerPhase);
    }
    let groupReady = [];
    for (let i = 0; i < 4; i++) {
      let playerReady = new PlayerReadyModel();
      playerReady.id = i;
      playerReady.isReady = false;
      groupReady.push(playerReady);
    }
    this.groupPlayerReady.next(groupReady);
    this.updateGroupPlayerSelectedPhase(result);
    console.log("state loaded: ", this.groupPlayerState.getValue());
  }
  getPlayerCount() {
    return this.groupPlayerState.getValue().length;
  }
  static {
    this.\u0275fac = function GameState_Factory(t) {
      return new (t || _GameState)(i016.\u0275\u0275inject(ProjectCardInfoService), i016.\u0275\u0275inject(ProjectCardPlayedEffectService), i016.\u0275\u0275inject(RxStompService), i016.\u0275\u0275inject(i016.Injector));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i016.\u0275\u0275defineInjectable({ token: _GameState, factory: _GameState.\u0275fac, providedIn: "root" });
  }
};

// src/app/components/cards/project/project-card/project-card.component.ts
import * as i2 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c0 = (a0, a1) => [a0, a1];
var _c1 = (a0, a1, a2) => [a0, a1, a2];
var _c2 = (a0, a1, a2, a3) => ({ "effect-summary-background-production": a0, "effect-summary-background-action": a1, "effect-summary-background-grey-production": a2, "effect-summary-background-trigger": a3 });
function ProjectCardComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275elementStart(0, "div", 27)(1, "div", 5);
    i017.\u0275\u0275element(2, "img", 6);
    i017.\u0275\u0275elementEnd();
    i017.\u0275\u0275elementStart(3, "div", 7)(4, "p");
    i017.\u0275\u0275text(5);
    i017.\u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext();
    i017.\u0275\u0275advance(5);
    i017.\u0275\u0275textInterpolate(ctx_r0.projectCard.cost);
  }
}
function ProjectCardComponent_div_15_app_text_with_image_2_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275element(0, "app-text-with-image", 32);
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext(2);
    i017.\u0275\u0275property("rawText", ctx_r0.projectCard.prerequisiteSummaryText);
  }
}
function ProjectCardComponent_div_15_app_text_with_image_4_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275element(0, "app-text-with-image", 32);
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext(2);
    i017.\u0275\u0275property("rawText", ctx_r0.projectCard.prerequisiteText);
  }
}
function ProjectCardComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275elementStart(0, "div", 28)(1, "div", 29);
    i017.\u0275\u0275template(2, ProjectCardComponent_div_15_app_text_with_image_2_Template, 1, 1, "app-text-with-image", 30);
    i017.\u0275\u0275elementEnd();
    i017.\u0275\u0275elementStart(3, "div", 31);
    i017.\u0275\u0275template(4, ProjectCardComponent_div_15_app_text_with_image_4_Template, 1, 1, "app-text-with-image", 30);
    i017.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext();
    i017.\u0275\u0275advance();
    i017.\u0275\u0275property("ngClass", ctx_r0.projectCard.prerequisiteTresholdType);
    i017.\u0275\u0275advance();
    i017.\u0275\u0275property("ngIf", ctx_r0.projectCard.prerequisiteSummaryText);
    i017.\u0275\u0275advance(2);
    i017.\u0275\u0275property("ngIf", ctx_r0.projectCard.prerequisiteText);
  }
}
function ProjectCardComponent_div_17_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275elementStart(0, "div", 33)(1, "div", 34);
    i017.\u0275\u0275element(2, "img", 35);
    i017.\u0275\u0275elementEnd();
    i017.\u0275\u0275elementStart(3, "div", 36);
    i017.\u0275\u0275element(4, "app-text-with-image", 32);
    i017.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext();
    i017.\u0275\u0275advance(4);
    i017.\u0275\u0275property("rawText", ctx_r0.projectCard.playedText);
  }
}
function ProjectCardComponent_div_18_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275elementStart(0, "div");
    i017.\u0275\u0275element(1, "span");
    i017.\u0275\u0275elementEnd();
  }
}
function ProjectCardComponent_div_19_div_1_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275elementStart(0, "div", 45);
    i017.\u0275\u0275element(1, "app-text-with-image", 32);
    i017.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext(2);
    i017.\u0275\u0275advance();
    i017.\u0275\u0275property("rawText", ctx_r0.projectCard.vpText);
  }
}
function ProjectCardComponent_div_19_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275elementStart(0, "div", 37);
    i017.\u0275\u0275template(1, ProjectCardComponent_div_19_div_1_Template, 2, 1, "div", 38);
    i017.\u0275\u0275elementStart(2, "div", 39)(3, "div", 40)(4, "div", 41)(5, "p");
    i017.\u0275\u0275text(6);
    i017.\u0275\u0275elementEnd()();
    i017.\u0275\u0275elementStart(7, "div", 42);
    i017.\u0275\u0275element(8, "div", 43)(9, "div", 44);
    i017.\u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext();
    i017.\u0275\u0275advance();
    i017.\u0275\u0275property("ngIf", ctx_r0.projectCard.vpText);
    i017.\u0275\u0275advance(5);
    i017.\u0275\u0275textInterpolate(ctx_r0.projectCard.vpNumber);
  }
}
function ProjectCardComponent_div_20_div_5_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275element(0, "div", 55);
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext(2);
    i017.\u0275\u0275property("ngClass", ctx_r0.projectCard.cardSummaryType);
  }
}
function ProjectCardComponent_div_20_div_6_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275element(0, "div", 56);
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext(2);
    i017.\u0275\u0275property("ngClass", ctx_r0.projectCard.cardSummaryType);
  }
}
function ProjectCardComponent_div_20_app_text_with_image_9_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275element(0, "app-text-with-image", 32);
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext(2);
    i017.\u0275\u0275property("rawText", ctx_r0.projectCard.effectSummaryText);
  }
}
function ProjectCardComponent_div_20_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275elementStart(0, "div", 46)(1, "div", 47);
    i017.\u0275\u0275element(2, "div", 48)(3, "div", 49);
    i017.\u0275\u0275elementStart(4, "div", 50);
    i017.\u0275\u0275template(5, ProjectCardComponent_div_20_div_5_Template, 1, 1, "div", 51)(6, ProjectCardComponent_div_20_div_6_Template, 1, 1, "div", 52);
    i017.\u0275\u0275element(7, "div", 53);
    i017.\u0275\u0275elementStart(8, "div", 54);
    i017.\u0275\u0275template(9, ProjectCardComponent_div_20_app_text_with_image_9_Template, 1, 1, "app-text-with-image", 30);
    i017.\u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext();
    i017.\u0275\u0275advance(5);
    i017.\u0275\u0275property("ngIf", ctx_r0.projectCard.cardSummaryType === "action" || ctx_r0.projectCard.cardSummaryType === "trigger");
    i017.\u0275\u0275advance();
    i017.\u0275\u0275property("ngIf", ctx_r0.projectCard.cardSummaryType === "action" || ctx_r0.projectCard.cardSummaryType === "trigger");
    i017.\u0275\u0275advance();
    i017.\u0275\u0275property("ngClass", i017.\u0275\u0275pureFunction4(4, _c2, ctx_r0.projectCard.cardSummaryType === "production", ctx_r0.projectCard.cardSummaryType === "action", ctx_r0.projectCard.cardSummaryType === "greyProduction", ctx_r0.projectCard.cardSummaryType === "trigger"));
    i017.\u0275\u0275advance(2);
    i017.\u0275\u0275property("ngIf", ctx_r0.projectCard.effectSummaryText);
  }
}
function ProjectCardComponent_div_22_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275elementStart(0, "div", 57);
    i017.\u0275\u0275element(1, "app-text-with-image", 58);
    i017.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = i017.\u0275\u0275nextContext();
    i017.\u0275\u0275advance();
    i017.\u0275\u0275property("rawText", ctx_r0.projectCard.effectText);
  }
}
function ProjectCardComponent_div_25_img_4_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275element(0, "img", 64);
  }
  if (rf & 2) {
    const tag_r2 = i017.\u0275\u0275nextContext().$implicit;
    i017.\u0275\u0275property("src", tag_r2, i017.\u0275\u0275sanitizeUrl);
  }
}
function ProjectCardComponent_div_25_Template(rf, ctx) {
  if (rf & 1) {
    i017.\u0275\u0275elementStart(0, "div", 59)(1, "div", 60);
    i017.\u0275\u0275element(2, "div", 61);
    i017.\u0275\u0275elementEnd();
    i017.\u0275\u0275elementStart(3, "div", 62);
    i017.\u0275\u0275template(4, ProjectCardComponent_div_25_img_4_Template, 1, 1, "img", 63);
    i017.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const tag_r2 = ctx.$implicit;
    const ctx_r0 = i017.\u0275\u0275nextContext();
    i017.\u0275\u0275advance(2);
    i017.\u0275\u0275property("ngClass", ctx_r0.projectCard.cardType);
    i017.\u0275\u0275advance();
    i017.\u0275\u0275property("ngClass", ctx_r0.projectCard.cardType);
    i017.\u0275\u0275advance();
    i017.\u0275\u0275property("ngIf", tag_r2);
  }
}
function ProjectCardComponent_div_31_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = i017.\u0275\u0275getCurrentView();
    i017.\u0275\u0275elementStart(0, "div", 65)(1, "button", 66);
    i017.\u0275\u0275listener("click", function ProjectCardComponent_div_31_Template_button_click_1_listener() {
      i017.\u0275\u0275restoreView(_r3);
      const ctx_r0 = i017.\u0275\u0275nextContext();
      return i017.\u0275\u0275resetView(ctx_r0.activate(1));
    });
    i017.\u0275\u0275text(2, "Activate");
    i017.\u0275\u0275elementEnd();
    i017.\u0275\u0275elementStart(3, "button", 66);
    i017.\u0275\u0275listener("click", function ProjectCardComponent_div_31_Template_button_click_3_listener() {
      i017.\u0275\u0275restoreView(_r3);
      const ctx_r0 = i017.\u0275\u0275nextContext();
      return i017.\u0275\u0275resetView(ctx_r0.activate(2));
    });
    i017.\u0275\u0275text(4, "Activate again");
    i017.\u0275\u0275elementEnd()();
  }
}
var ProjectCardComponent = class _ProjectCardComponent extends BaseCardComponent {
  constructor(gameStateService) {
    super();
    this.gameStateService = gameStateService;
    this.megacreditAvailable = 0;
    this.cardCost = inject(CardCost);
    this.tagNumber = 3;
  }
  ngOnInit() {
    super.ngOnInit();
    this.projectCard.tagsUrl = [];
    this.cardCost.initialize(this.projectCard.costInitial);
    this.projectCard.tagsId = this.fillTagId(this.projectCard.tagsId);
    for (let i = 0; i < this.projectCard.tagsId.length; i++) {
      this.projectCard.tagsUrl.push(GlobalInfo.getUrlFromID(this.projectCard.tagsId[i]));
    }
    this.gameStateService.currentClientState.subscribe((state) => this.updateClientState(state));
    this.checkPlayable();
  }
  resetCardState() {
    if (this.megacreditAvailable === 0) {
      return;
    }
    this.updateCost();
    this.checkPlayable();
  }
  fillTagId(tagsId) {
    var newTagsId = this.projectCard.tagsId.slice();
    for (let i = this.projectCard.tagsId.length; i < this.tagNumber; i++) {
      newTagsId.push(-1);
    }
    return newTagsId;
  }
  cardClick() {
    if (this.state.isSelectable() != true) {
      return;
    }
    if (this.state.isBuildable() === false && this.state.isIgnoreCost() != true) {
      return;
    }
    this.state.setSelected(this.state.isSelected() === false);
    this.cardStateChange.emit({ card: this.projectCard, state: this.state });
  }
  updateClientState(state) {
    if (state === void 0) {
      return;
    }
    this.megacreditAvailable = state.getRessourceInfoFromType("megacredit")?.valueStock ?? 0;
    this.updateCost(state);
  }
  updateCost(state) {
    if (!state) {
      this.projectCard.cost = this.projectCard.costInitial;
      return;
    }
    this.projectCard.cost = this.cardCost.updateCost({
      tagList: this.projectCard.tagsId,
      steelState: state.getRessourceInfoFromType("steel"),
      titaniumState: state.getRessourceInfoFromType("titanium"),
      playedTriggersList: state.getTriggerCostMod(),
      buildDiscount: this.buildDiscount
    });
    this.checkPlayable();
  }
  checkPlayable() {
    this.state.setBuildable(this.megacreditAvailable >= this.projectCard.cost);
  }
  activate(activationCount) {
    console.log("Activated: ", this.projectCard.title);
  }
  static {
    this.\u0275fac = function ProjectCardComponent_Factory(t) {
      return new (t || _ProjectCardComponent)(i017.\u0275\u0275directiveInject(GameState));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i017.\u0275\u0275defineComponent({ type: _ProjectCardComponent, selectors: [["app-project-card"]], inputs: { projectCard: "projectCard", buildDiscount: "buildDiscount" }, standalone: true, features: [i017.\u0275\u0275ProvidersFeature([CardCost]), i017.\u0275\u0275InheritDefinitionFeature, i017.\u0275\u0275StandaloneFeature], decls: 32, vars: 22, consts: [[1, "wrapper-selection-border", 3, "ngClass"], [1, "wrapper-card", 3, "click", "ngClass"], [1, "wrapper-card-grid"], [1, "grid-box-cost"], [1, "wrapper-cost"], [1, "wrapper-cost-image"], ["src", "/assets/ressource/megacreditvoid.png", "alt", "ressourceCard.description"], [1, "wrapper-cost-value"], ["class", "wrapper-cost cost-mod", 4, "ngIf"], [1, "grid-box-title"], [1, "grid-box-main"], ["class", "wrapper-prerequisite", 4, "ngIf"], [1, "wrapper-played-vp"], ["class", "wrapper-played ", 4, "ngIf"], [4, "ngIf"], ["class", "wrapper-vp", 4, "ngIf"], ["class", "grid-box-effect", 4, "ngIf"], [1, "grid-box-effect-text"], ["class", "shadowed-text", 4, "ngIf"], [1, "grid-box-tag"], [1, "wrapper-tag-zone"], ["class", "wrapper-tag", 4, "ngFor", "ngForOf"], [1, "wrapper-left-layout"], [1, "left-layout", 3, "ngClass"], [1, "top-left-layout", 3, "ngClass"], [1, "wrapper-background-layout"], ["class", "wrapper-activation", 4, "ngIf"], [1, "wrapper-cost", "cost-mod"], [1, "wrapper-prerequisite"], [1, "prerequisite-summary-Text", 3, "ngClass"], [3, "rawText", 4, "ngIf"], [1, "prerequisite-text", "shadowed-text"], [3, "rawText"], [1, "wrapper-played"], [1, "played-icon"], ["src", "/assets/other/played.png", "alt", "played image"], [1, "wrapper-played-text", "shadowed-text"], [1, "wrapper-vp"], ["class", "grid-box-vp-text shadowed-text", 4, "ngIf"], [1, "grid-box-vp-icon"], [1, "wrapper-vp-icon"], [1, "vp-icon"], [1, "wrapper-vp-background"], [1, "layout-vp-left"], [1, "layout-vp-right"], [1, "grid-box-vp-text", "shadowed-text"], [1, "grid-box-effect"], [1, "wrapper-effect-summary-border"], [1, "effect-summary-top-shape"], [1, "effect-summary-bottom-shape"], [1, "wrapper-effect-summary"], ["class", "effect-summary-foreground-radial-white", 3, "ngClass", 4, "ngIf"], ["class", "effect-summary-background-radial-grid", 3, "ngClass", 4, "ngIf"], [1, "effect-summary-background", 3, "ngClass"], [1, "effect-summary-text"], [1, "effect-summary-foreground-radial-white", 3, "ngClass"], [1, "effect-summary-background-radial-grid", 3, "ngClass"], [1, "shadowed-text"], [1, "white-text", 3, "rawText"], [1, "wrapper-tag"], [1, "tag-zone-mask"], [1, "tag-zone", 3, "ngClass"], [1, "tag-icon", 3, "ngClass"], ["alt", "", 3, "src", 4, "ngIf"], ["alt", "", 3, "src"], [1, "wrapper-activation"], [1, "validation-button", 3, "click"]], template: function ProjectCardComponent_Template(rf, ctx) {
      if (rf & 1) {
        i017.\u0275\u0275elementStart(0, "div", 0)(1, "button", 1);
        i017.\u0275\u0275listener("click", function ProjectCardComponent_Template_button_click_1_listener() {
          return ctx.cardClick();
        });
        i017.\u0275\u0275elementStart(2, "div", 2)(3, "div", 3)(4, "div", 4)(5, "div", 5);
        i017.\u0275\u0275element(6, "img", 6);
        i017.\u0275\u0275elementEnd();
        i017.\u0275\u0275elementStart(7, "div", 7)(8, "p");
        i017.\u0275\u0275text(9);
        i017.\u0275\u0275elementEnd()()();
        i017.\u0275\u0275template(10, ProjectCardComponent_div_10_Template, 6, 1, "div", 8);
        i017.\u0275\u0275elementEnd();
        i017.\u0275\u0275elementStart(11, "div", 9)(12, "p");
        i017.\u0275\u0275text(13);
        i017.\u0275\u0275elementEnd()();
        i017.\u0275\u0275elementStart(14, "div", 10);
        i017.\u0275\u0275template(15, ProjectCardComponent_div_15_Template, 5, 3, "div", 11);
        i017.\u0275\u0275elementStart(16, "div", 12);
        i017.\u0275\u0275template(17, ProjectCardComponent_div_17_Template, 5, 1, "div", 13)(18, ProjectCardComponent_div_18_Template, 2, 0, "div", 14)(19, ProjectCardComponent_div_19_Template, 10, 2, "div", 15);
        i017.\u0275\u0275elementEnd()();
        i017.\u0275\u0275template(20, ProjectCardComponent_div_20_Template, 10, 9, "div", 16);
        i017.\u0275\u0275elementStart(21, "div", 17);
        i017.\u0275\u0275template(22, ProjectCardComponent_div_22_Template, 2, 1, "div", 18);
        i017.\u0275\u0275elementEnd();
        i017.\u0275\u0275elementStart(23, "div", 19)(24, "div", 20);
        i017.\u0275\u0275template(25, ProjectCardComponent_div_25_Template, 5, 3, "div", 21);
        i017.\u0275\u0275elementEnd()()();
        i017.\u0275\u0275elementStart(26, "div", 22);
        i017.\u0275\u0275element(27, "div", 23)(28, "div", 24);
        i017.\u0275\u0275elementEnd();
        i017.\u0275\u0275elementStart(29, "div", 25);
        i017.\u0275\u0275element(30, "app-layout-card-background-hexagons");
        i017.\u0275\u0275elementEnd()()();
        i017.\u0275\u0275template(31, ProjectCardComponent_div_31_Template, 5, 0, "div", 26);
      }
      if (rf & 2) {
        i017.\u0275\u0275property("ngClass", i017.\u0275\u0275pureFunction2(15, _c0, ctx.state.isSelected() === true ? "element-selected" : "element-not-selected", ctx.state.isBuildable() === false && ctx.state.isSelectable() === true && ctx.state.isIgnoreCost() != true ? "unplayable" : ""));
        i017.\u0275\u0275advance();
        i017.\u0275\u0275property("ngClass", i017.\u0275\u0275pureFunction3(18, _c1, ctx.projectCard.cardType, ctx.state.isSelectable() === true && ctx.state.isBuildable() === true || ctx.state.isSelectable() === true && !ctx.state.isBuildable() || ctx.state.isIgnoreCost() ? "element-selectable" : "", ctx.state.isSelected() != true ? "selected" : ""));
        i017.\u0275\u0275advance(8);
        i017.\u0275\u0275textInterpolate(ctx.projectCard.costInitial);
        i017.\u0275\u0275advance();
        i017.\u0275\u0275property("ngIf", ctx.projectCard.cost != ctx.projectCard.costInitial);
        i017.\u0275\u0275advance(3);
        i017.\u0275\u0275textInterpolate(ctx.projectCard.title);
        i017.\u0275\u0275advance(2);
        i017.\u0275\u0275property("ngIf", ctx.projectCard.prerequisiteText);
        i017.\u0275\u0275advance(2);
        i017.\u0275\u0275property("ngIf", ctx.projectCard.playedText);
        i017.\u0275\u0275advance();
        i017.\u0275\u0275property("ngIf", ctx.projectCard.vpNumber && !ctx.projectCard.playedText);
        i017.\u0275\u0275advance();
        i017.\u0275\u0275property("ngIf", ctx.projectCard.vpNumber);
        i017.\u0275\u0275advance();
        i017.\u0275\u0275property("ngIf", ctx.projectCard.cardSummaryType);
        i017.\u0275\u0275advance(2);
        i017.\u0275\u0275property("ngIf", ctx.projectCard.effectText);
        i017.\u0275\u0275advance(3);
        i017.\u0275\u0275property("ngForOf", ctx.projectCard.tagsUrl);
        i017.\u0275\u0275advance(2);
        i017.\u0275\u0275property("ngClass", ctx.projectCard.cardType);
        i017.\u0275\u0275advance();
        i017.\u0275\u0275property("ngClass", ctx.projectCard.cardType);
        i017.\u0275\u0275advance(3);
        i017.\u0275\u0275property("ngIf", ctx.state.isActivable() === true);
      }
    }, dependencies: [
      CommonModule2,
      i2.NgClass,
      i2.NgForOf,
      i2.NgIf,
      TextWithImageComponent,
      LayoutCardBackgroundHexagonsComponent
    ], styles: ['\n\n[_ngcontent-%COMP%]:root {\n  --card-height: 300px;\n  --card-width: calc(var(--card-height) * 63 / 88);\n  --color-ares-red: rgb(237, 53, 49);\n  --color-ares-red-light: #ef4c48;\n  --color-ares-red-light2: #f7a8a6;\n  --color-ares-red-light3: #fdeded;\n  --color-ares-red-dark0: #e61914;\n  --color-ares-red-dark: #c11511;\n  --color-ares-red-dark2: #ae130f;\n  --color-ares-red-dark3: #a5120e;\n  --color-ares-red-dark4: #7a0d0b;\n  --color-ares-blue: rgb(39, 177, 229);\n  --color-ares-blue-light: #3eb9e8;\n  --color-ares-blue-light2: #99daf3;\n  --color-ares-blue-light3: #ddf3fb;\n  --color-ares-blue-dark0: #199dcf;\n  --color-ares-blue-dark: #1582ab;\n  --color-ares-blue-dark2: #127499;\n  --color-ares-blue-dark3: #116d90;\n  --color-ares-blue-dark4: #0c4e67;\n  --color-ares-green: rgb(42, 180, 92);\n  --color-ares-green-light: #2fc967;\n  --color-ares-green-light2: #7de1a1;\n  --color-ares-green-light3: #bbefce;\n  --color-ares-green-dark0: #23974d;\n  --color-ares-green-dark: #1c763c;\n  --color-ares-green-dark2: #186534;\n  --color-ares-green-dark3: #165d30;\n  --color-ares-green-dark4: #0d381d;\n  --color-ares-purple: rgb(98, 70, 156);\n  --color-ares-purple-light: #6d4eae;\n  --color-ares-purple-light2: #a693cf;\n  --color-ares-purple-light3: #d2c8e6;\n  --color-ares-purple-dark0: #533b83;\n  --color-ares-purple-dark: #412e67;\n  --color-ares-purple-dark2: #382859;\n  --color-ares-purple-dark3: #342552;\n  --color-ares-purple-dark4: #201732;\n  --color-ares-orange: rgb(255, 129, 25);\n  --color-ares-orange-light: #ff8f33;\n  --color-ares-orange-light2: #ffc799;\n  --color-ares-orange-light3: #fff1e5;\n  --color-ares-orange-dark0: #f46e00;\n  --color-ares-orange-dark: #cc5c00;\n  --color-ares-orange-dark2: #b75300;\n  --color-ares-orange-dark3: #ad4e00;\n  --color-ares-orange-dark4: #7f3900;\n  --color-card-back-red: rgb(130, 30, 30);\n  --color-card-back-blue: rgb(50, 100, 150);\n  --color-card-back-green: rgb(10, 90, 40);\n}\n[_nghost-%COMP%]     p {\n  color: white;\n  font-size: 11px;\n}\n[_nghost-%COMP%]     app-text-with-image .text-tag {\n  top: 0;\n  max-width: 13.2px;\n  max-height: 13.2px;\n}\n[_nghost-%COMP%]     app-text-with-image .wrapper-megacredit {\n  top: 0;\n  width: 13.2px;\n  height: 13.2px;\n}\n[_nghost-%COMP%]     .effect-summary-text.text-tag {\n  top: 0;\n  width: 22px;\n  height: 22px;\n}\nimg[_ngcontent-%COMP%] {\n  width: 100%;\n  aspect-ratio: 1/1;\n}\nbutton[_ngcontent-%COMP%] {\n  background: transparent;\n}\n.shadowed-text[_ngcontent-%COMP%] {\n  background: rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n  width: 100%;\n  padding: 1.375px;\n}\n.wrapper-card[_ngcontent-%COMP%] {\n  z-index: 0;\n  position: relative;\n  height: var(--card-height);\n  width: var(--card-width);\n  overflow: hidden;\n  padding-bottom: calc(var(--card-height) * 0.015);\n  padding-right: calc(var(--card-height) * 0.007);\n  border: black solid 2px;\n  border-radius: calc(var(--card-height) * 0.05);\n}\n.wrapper-card.redProject[_ngcontent-%COMP%] {\n  background: rgb(130, 30, 30);\n}\n.wrapper-card.blueProject[_ngcontent-%COMP%] {\n  background: rgb(50, 100, 150);\n}\n.wrapper-card.greenProject[_ngcontent-%COMP%] {\n  background: rgb(10, 90, 40);\n}\n.wrapper-selection-border[_ngcontent-%COMP%] {\n  z-index: -1;\n  border-radius: calc((var(--card-height) + 0px) * 0.05);\n  height: calc(var(--card-height) + 0px);\n  width: calc(var(--card-width) + 0px);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 0;\n}\n.wrapper-card-grid[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: relative;\n  display: grid;\n  grid-template-columns: 1fr 0.5fr 1fr 1fr 1fr;\n  grid-template-rows: 0.9fr 0.4fr 2fr 0.02fr 1.2fr;\n  height: 100%;\n  width: 100%;\n  padding: 0px;\n  margin: 0px;\n}\n.grid-box-cost[_ngcontent-%COMP%] {\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 1;\n  grid-row-end: 2;\n}\n.wrapper-cost[_ngcontent-%COMP%] {\n  position: relative;\n  height: 100%;\n  width: 100%;\n}\n.wrapper-cost[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  color: black;\n  font-weight: bold;\n  font-size: large;\n}\n.wrapper-cost.cost-mod[_ngcontent-%COMP%] {\n  z-index: 10;\n  top: -50%;\n  filter: grayscale(20%);\n  opacity: 80%;\n}\n.wrapper-cost.cost-mod[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 50%;\n}\n.wrapper-cost.cost-mod[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-size: medium;\n}\n.wrapper-cost-image[_ngcontent-%COMP%] {\n  z-index: 2;\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n}\n.wrapper-cost-image[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 70%;\n  aspect-ratio: 1;\n}\n.wrapper-cost-value[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.grid-box-title[_ngcontent-%COMP%] {\n  grid-column-start: 2;\n  grid-column-end: 6;\n  grid-row-start: 1;\n  grid-row-end: 2;\n  height: 100%;\n  width: auto;\n  padding-right: 5%;\n  padding-top: 0%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.grid-box-title[_ngcontent-%COMP%]    > p[_ngcontent-%COMP%] {\n  color: white;\n  font-weight: bold;\n  font-size: calc(var(--card-width) / 13);\n  font-style: italic;\n  text-align: center;\n  text-shadow:\n    -0.35px -0.35px 0 var(--color-ares-red),\n    0.35px -0.35px 0 var(--color-ares-red),\n    -0.35px 0.35px 0 var(--color-ares-red),\n    0.35px 0.35px 0 var(--color-ares-red);\n}\n.grid-box-main[_ngcontent-%COMP%] {\n  grid-column-start: 2;\n  grid-column-end: 6;\n  grid-row-start: 2;\n  grid-row-end: 4;\n  height: 100%;\n  padding-right: 2%;\n  padding-left: 2%;\n  display: flex;\n  flex-direction: column;\n  gap: 10%;\n}\n.wrapper-played-vp[_ngcontent-%COMP%] {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.wrapper-played[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n}\n.played-icon[_ngcontent-%COMP%] {\n  height: calc(var(--card-height) * 0.06);\n  border: 1px gold solid;\n  border-radius: 25%;\n  background: rgba(0, 0, 0, 0.5);\n}\n.played-icon[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.grid-box-prerequisite[_ngcontent-%COMP%] {\n  grid-column-start: 2;\n  grid-column-end: 6;\n  grid-row-start: 2;\n  grid-row-end: 3;\n}\n.wrapper-prerequisite[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  gap: 2%;\n  position: relative;\n  width: 100%;\n  font-size: small;\n}\n.wrapper-prerequisite[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-size: small;\n}\n.prerequisite-summary-Text[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 20%;\n  width: auto;\n  height: 100%;\n  border: grey 2px solid;\n  background: rgba(128, 128, 128, 0.6);\n  border-radius: 25%;\n}\n.prerequisite-summary-Text.min[_ngcontent-%COMP%] {\n  border: gold 2px solid;\n}\n.prerequisite-summary-Text.max[_ngcontent-%COMP%] {\n  border: orangered 2px solid;\n}\n.prerequisite-text[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-left: 5%;\n  flex-grow: 1;\n  height: 100%;\n}\n.grid-box-tag[_ngcontent-%COMP%] {\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 2;\n  grid-row-end: 4;\n}\n.grid-box-effect[_ngcontent-%COMP%] {\n  grid-column-start: 1;\n  grid-column-end: 3;\n  grid-row-start: 5;\n  grid-row-end: 6;\n  height: 100%;\n  width: 100%;\n}\n.grid-box-vp-text[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: right;\n  font-weight: bold;\n}\n.grid-box-effect-text[_ngcontent-%COMP%] {\n  grid-column-start: 3;\n  grid-column-end: 6;\n  grid-row-start: 5;\n  grid-row-end: 6;\n  height: 100%;\n  margin-left: 3%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.wrapper-tag-zone[_ngcontent-%COMP%] {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  padding-top: 25%;\n}\n.wrapper-tag[_ngcontent-%COMP%] {\n  position: relative;\n  width: 100%;\n  height: calc(var(--card-height) / 7);\n  margin-top: 5%;\n}\n.tag-zone[_ngcontent-%COMP%] {\n  position: relative;\n  z-index: 1;\n  -webkit-clip-path: polygon(0 0, 99% 75%, 82% 100%, 52% 100%, 0 57%);\n  clip-path: polygon(0% 0%, 95% 70%, 70% 100%, 32% 100%, 0 77%);\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n.tag-zone.redProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-red-light);\n}\n.tag-zone.blueProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-blue-light);\n}\n.tag-zone.greenProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-green-light);\n}\n.tag-zone.purpleProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-purple-light);\n}\n.tag-zone.orangeProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-orange-light);\n}\n.tag-zone-mask[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: relative;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    radial-gradient(\n      circle,\n      rgb(255, 255, 255) 20%,\n      rgba(0, 0, 0, 0.8) 80%);\n  mask-image:\n    radial-gradient(\n      circle,\n      rgb(255, 255, 255) 20%,\n      rgba(0, 0, 0, 0.8) 80%);\n}\n.tag-icon[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 10%;\n  left: 20%;\n  padding: 5%;\n  height: 65%;\n  aspect-ratio: 1/1;\n  border-radius: 50%;\n  background: grey;\n}\n.tag-icon.redProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-red-dark);\n  background:\n    radial-gradient(\n      circle,\n      var(--color-ares-red-dark2) 0%,\n      var(--color-ares-red-dark2) 40%,\n      var(--color-ares-red-dark3) 40%,\n      var(--color-ares-red-dark0) 65%,\n      var(--color-ares-red) 100%);\n  border: 1px solid var(--color-ares-red-dark3);\n}\n.tag-icon.blueProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-blue-dark);\n  background:\n    radial-gradient(\n      circle,\n      var(--color-ares-blue-dark2) 0%,\n      var(--color-ares-blue-dark2) 40%,\n      var(--color-ares-blue-dark3) 40%,\n      var(--color-ares-blue-dark0) 65%,\n      var(--color-ares-blue) 100%);\n  border: 1px solid var(--color-ares-blue-dark3);\n}\n.tag-icon.greenProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-green-dark);\n  background:\n    radial-gradient(\n      circle,\n      var(--color-ares-green-dark2) 0%,\n      var(--color-ares-green-dark2) 40%,\n      var(--color-ares-green-dark3) 40%,\n      var(--color-ares-green-dark0) 65%,\n      var(--color-ares-green) 100%);\n  border: 1px solid var(--color-ares-green-dark3);\n}\n.tag-icon.purpleProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-purple-dark);\n  background:\n    radial-gradient(\n      circle,\n      var(--color-ares-purple-dark2) 0%,\n      var(--color-ares-purple-dark2) 40%,\n      var(--color-ares-purple-dark3) 40%,\n      var(--color-ares-purple-dark0) 65%,\n      var(--color-ares-purple) 100%);\n  border: 1px solid var(--color-ares-purple-dark3);\n}\n.tag-icon.orangeProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-orange-dark);\n  background:\n    radial-gradient(\n      circle,\n      var(--color-ares-orange-dark2) 0%,\n      var(--color-ares-orange-dark2) 40%,\n      var(--color-ares-orange-dark3) 40%,\n      var(--color-ares-orange-dark0) 65%,\n      var(--color-ares-orange) 100%);\n  border: 1px solid var(--color-ares-orange-dark3);\n}\n.tag-icon.redProject[_ngcontent-%COMP%] {\n  outline: rgba(var(--color-ares-red-light), 0.7) 2px solid;\n}\n.tag-icon.blueProject[_ngcontent-%COMP%] {\n  outline: rgba(var(--color-ares-blue-light), 0.7) 2px solid;\n}\n.tag-icon.greenProject[_ngcontent-%COMP%] {\n  outline: rgba(var(--color-ares-green-light), 0.7) 2px solid;\n}\n.tag-icon.purpleProject[_ngcontent-%COMP%] {\n  outline: rgba(var(--color-ares-purple-light), 0.7) 2px solid;\n}\n.tag-icon.orangeProject[_ngcontent-%COMP%] {\n  outline: rgba(var(--color-ares-orange-light), 0.7) 2px solid;\n}\n.wrapper-vp[_ngcontent-%COMP%] {\n  width: 100%;\n  height: calc(var(--card-height) * 0.14);\n  margin-bottom: 2%;\n  display: grid;\n  grid-template-columns: 3fr 1fr;\n}\n.wrapper-vp[_ngcontent-%COMP%]   .grid-box-vp-text[_ngcontent-%COMP%] {\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 1;\n  grid-row-end: 2;\n}\n.wrapper-vp[_ngcontent-%COMP%]   .grid-box-vp-icon[_ngcontent-%COMP%] {\n  grid-column-start: 2;\n  grid-column-end: 3;\n  grid-row-start: 1;\n  grid-row-end: 2;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n}\n.wrapper-vp-icon[_ngcontent-%COMP%] {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding-left: 30%;\n  display: flex;\n  align-items: center;\n  justify-content: left;\n}\n.vp-icon[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: relative;\n  border-radius: 50%;\n  border-width: 2px;\n  border-style: solid;\n  border-color: rgb(61, 61, 61);\n  outline: rgb(216, 216, 216) 1px solid;\n  outline-offset: 0px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 70%;\n  aspect-ratio: 1;\n  background:\n    linear-gradient(\n      0deg,\n      rgb(26, 17, 9) 0%,\n      rgb(143, 92, 63) 35%,\n      rgb(255, 239, 213) 100%);\n}\n.vp-icon[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-size: 20px;\n  font-weight: bold;\n}\n.wrapper-vp-background[_ngcontent-%COMP%] {\n  z-index: 0;\n  position: absolute;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  padding-left: 12%;\n}\n.layout-vp-right[_ngcontent-%COMP%] {\n  width: 75%;\n}\n.layout-vp-left[_ngcontent-%COMP%] {\n  width: 10%;\n}\n.layout-vp-right[_ngcontent-%COMP%], .layout-vp-left[_ngcontent-%COMP%] {\n  z-index: 0;\n  position: relative;\n  top: 0px;\n  height: 90%;\n  border: transparent 0px solid;\n  outline: white 1px solid;\n  outline-offset: 2px;\n  background-color: rgba(128, 128, 128, 0.7);\n}\n.wrapper-left-layout[_ngcontent-%COMP%] {\n  top: -100%;\n  position: relative;\n  height: 100%;\n}\n.left-layout[_ngcontent-%COMP%] {\n  z-index: 0;\n  position: relative;\n  height: calc(var(--card-height) * 0.72);\n  width: 18%;\n  border-top-left-radius: 15px;\n  -webkit-clip-path: polygon(100% 0, 100% 65%, 54% 100%, 0 100%, 0 0);\n  clip-path: polygon(0 0, 100% 0, 100% 27%, 90% 28.5%, 90% 94%, 70% 97%, 20% 97%, 0 100%);\n  border-top: 0;\n  border-left: 0;\n}\n.left-layout.redProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-red-dark);\n}\n.left-layout.blueProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-blue-dark);\n}\n.left-layout.greenProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-green-dark);\n}\n.left-layout.purpleProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-purple-dark);\n}\n.left-layout.orangeProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-orange-dark);\n}\n.left-layout[_ngcontent-%COMP%]:before {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background:\n    linear-gradient(\n      45deg,\n      rgb(0, 0, 0) 0%,\n      rgb(0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      rgb(0, 0, 0) 70%,\n      rgb(0, 0, 0) 100%),\n    linear-gradient(\n      135deg,\n      rgb(0, 0, 0) 0%,\n      rgb(0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      rgb(0, 0, 0) 70%,\n      rgb(0, 0, 0) 100%),\n    linear-gradient(\n      225deg,\n      rgb(0, 0, 0) 0%,\n      rgb(0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      rgb(0, 0, 0) 70%,\n      rgb(0, 0, 0) 100%),\n    linear-gradient(\n      315deg,\n      rgb(0, 0, 0) 0%,\n      rgb(0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      rgb(0, 0, 0) 70%,\n      rgb(0, 0, 0) 100%);\n  background-size: 7px 7px;\n  background-repeat: repeat;\n  transform: rotate(0deg);\n}\n.left-layout[_ngcontent-%COMP%]:after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background:\n    linear-gradient(\n      95deg,\n      rgba(0, 0, 0, 0.9) 0%,\n      rgba(0, 0, 0, 0.5) 40%,\n      rgba(0, 0, 0, 0.2) 80%);\n}\n.top-left-layout[_ngcontent-%COMP%] {\n  z-index: 0;\n  position: absolute;\n  top: 0;\n  height: calc(var(--card-height) / 5);\n  width: calc(var(--card-width) / 3.8);\n  border-top-left-radius: 15px;\n  -webkit-clip-path: polygon(100% 0, 100% 65%, 54% 100%, 0 100%, 0 0);\n  clip-path: polygon(100% 0, 95% 9%, 90% 9%, 90% 14%, 84% 14%, 84% 38%, 69% 50%, 25% 50%, 0% 33%, 0 0);\n  border-top: 0;\n  border-left: 0;\n}\n.top-left-layout.redProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-red);\n}\n.top-left-layout.blueProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-blue);\n}\n.top-left-layout.greenProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-green);\n}\n.top-left-layout.purpleProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-purple);\n}\n.top-left-layout.orangeProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-orange);\n}\n.wrapper-effect-summary-border[_ngcontent-%COMP%] {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: white;\n  clip-path: polygon(15% 3%, 37% 3%, 40% 0%, 60% 0%, 63% 3%, 93% 3%, 100% 10%, 100% 33%, 96% 37%, 96% 63%, 100% 67%, 100% 90%, 90% 97%, 63% 97%, 60% 100%, 40% 100%, 37% 97%, 0 97%, 0 18%);\n}\n.wrapper-effect-summary[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  clip-path: polygon(15% 12%, 37% 12%, 40% 15%, 60% 15%, 63% 12%, 100% 12%, 99% 12%, 99% 33%, 95% 37%, 95% 63%, 99% 67%, 99% 89%, 63% 89%, 60% 86%, 40% 86%, 37% 89%, 0 89%, 0 27%);\n}\n.effect-summary-top-shape[_ngcontent-%COMP%] {\n  position: absolute;\n  z-index: 5;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background:\n    linear-gradient(\n      90deg,\n      #505050 0%,\n      rgba(80, 80, 80, 0.4) 35%,\n      rgba(80, 80, 80, 0.5) 60%,\n      #505050 100%);\n  clip-path: polygon(15% 4%, 37% 4%, 40% 1%, 60% 1%, 63% 4%, 93% 4%, 99% 11%, 63% 11%, 60% 14%, 40% 14%, 37% 11%, 15% 11%, 0 26%, 0 19%);\n}\n.effect-summary-bottom-shape[_ngcontent-%COMP%] {\n  position: absolute;\n  z-index: 5;\n  top: 0%;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background:\n    linear-gradient(\n      90deg,\n      #505050 0%,\n      rgba(80, 80, 80, 0.4) 35%,\n      rgba(80, 80, 80, 0.5) 60%,\n      #505050 100%);\n  clip-path: polygon(0 90%, 37% 90%, 40% 87%, 60% 87%, 63% 90%, 99% 90%, 90% 96%, 63% 96%, 60% 99%, 40% 99%, 37% 96%, 0 96%);\n}\n.effect-summary-background[_ngcontent-%COMP%] {\n  z-index: 2;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: rgba(100, 100, 100, 0.5);\n}\n.effect-summary-background-production[_ngcontent-%COMP%] {\n  background:\n    repeating-linear-gradient(\n      135deg,\n      var(--color-ares-red) 0%,\n      rgb(253, 157, 67) 2%,\n      rgb(253, 157, 67) 4%,\n      var(--color-ares-red) 6%);\n  background: -webkit-repeating-linear-gradient(135deg, var(--color-ares-red) 0%, rgb(253, 157, 67) 2%, rgb(253, 157, 67) 4%, var(--color-ares-red) 6%);\n  background: -moz-repeating-linear-gradient(135deg, var(--color-ares-red) 0%, rgb(253, 157, 67) 2%, rgb(253, 157, 67) 4%, var(--color-ares-red) 6%);\n}\n.effect-summary-background-grey-production[_ngcontent-%COMP%] {\n  background:\n    repeating-linear-gradient(\n      135deg,\n      rgb(66, 66, 66) 0%,\n      rgb(184, 184, 184) 0%,\n      rgb(184, 184, 184) 4%,\n      rgb(66, 66, 66) 6%);\n  background: -webkit-repeating-linear-gradient(135deg, rgb(66, 66, 66) 0%, rgb(184, 184, 184) 0%, rgb(184, 184, 184) 4%, rgb(66, 66, 66) 6%);\n  background: -moz-repeating-linear-gradient(135deg, rgb(66, 66, 66) 0%, rgb(184, 184, 184) 0%, rgb(184, 184, 184) 4%, rgb(66, 66, 66) 6%);\n}\n.effect-summary-background-radial-grid[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n}\n.effect-summary-background-radial-grid.redProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-red-dark);\n}\n.effect-summary-background-radial-grid.blueProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-blue-dark);\n}\n.effect-summary-background-radial-grid.greenProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-green-dark);\n}\n.effect-summary-background-radial-grid.purpleProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-purple-dark);\n}\n.effect-summary-background-radial-grid.orangeProject[_ngcontent-%COMP%] {\n  background: var(--color-ares-orange-dark);\n}\n.effect-summary-background-radial-grid[_ngcontent-%COMP%]:after {\n  content: "";\n  position: absolute;\n  top: -100%;\n  left: -250%;\n  width: 500px;\n  height: 500px;\n}\n.effect-summary-background-radial-grid.action[_ngcontent-%COMP%] {\n  background-color: var(--color-ares-blue-dark);\n}\n.effect-summary-background-radial-grid.action[_ngcontent-%COMP%]:after {\n  background:\n    linear-gradient(\n      45deg,\n      var(--color-ares-blue-light) 0%,\n      var(--color-ares-blue-light) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      var(--color-ares-blue-light) 70%,\n      var(--color-ares-blue-light) 100%),\n    linear-gradient(\n      135deg,\n      var(--color-ares-blue-light) 0%,\n      var(--color-ares-blue-light) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      var(--color-ares-blue-light) 70%,\n      var(--color-ares-blue-light) 100%),\n    linear-gradient(\n      225deg,\n      var(--color-ares-blue-light) 0%,\n      var(--color-ares-blue-light) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      var(--color-ares-blue-light) 70%,\n      var(--color-ares-blue-light) 100%),\n    linear-gradient(\n      315deg,\n      var(--color-ares-blue-light) 0%,\n      var(--color-ares-blue-light) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      var(--color-ares-blue-light) 70%,\n      var(--color-ares-blue-light) 100%);\n  background-size: 3px 3px;\n  background-repeat: repeat;\n  pointer-events: none;\n  transform: rotate(45deg);\n}\n.effect-summary-background-radial-grid.trigger[_ngcontent-%COMP%] {\n  background-color: var(--color-ares-purple-dark);\n}\n.effect-summary-background-radial-grid.trigger[_ngcontent-%COMP%]:after {\n  background:\n    linear-gradient(\n      45deg,\n      var(--color-ares-purple-light) 0%,\n      var(--color-ares-purple-light) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      var(--color-ares-purple-light) 70%,\n      var(--color-ares-purple-light) 100%),\n    linear-gradient(\n      135deg,\n      var(--color-ares-purple-light) 0%,\n      var(--color-ares-purple-light) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      var(--color-ares-purple-light) 70%,\n      var(--color-ares-purple-light) 100%),\n    linear-gradient(\n      225deg,\n      var(--color-ares-purple-light) 0%,\n      var(--color-ares-purple-light) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      var(--color-ares-purple-light) 70%,\n      var(--color-ares-purple-light) 100%),\n    linear-gradient(\n      315deg,\n      var(--color-ares-purple-light) 0%,\n      var(--color-ares-purple-light) 30%,\n      rgba(0, 0, 0, 0) 30%,\n      rgba(0, 0, 0, 0) 70%,\n      var(--color-ares-purple-light) 70%,\n      var(--color-ares-purple-light) 100%);\n  background-size: 3px 3px;\n  background-repeat: repeat;\n  pointer-events: none;\n  transform: rotate(45deg);\n}\n.effect-summary-background-action[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: absolute;\n  top: 0;\n  background:\n    linear-gradient(\n      0deg,\n      rgba(var(--color-ares-blue-dark), 0.5) 0%,\n      var(--color-ares-blue-dark) 45%,\n      var(--color-ares-blue-dark) 65%,\n      rgba(var(--color-ares-blue-dark), 0.5) 100%);\n}\n.effect-summary-background-trigger[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: absolute;\n  top: 0;\n  background:\n    linear-gradient(\n      0deg,\n      rgba(var(--color-ares-purple-dark), 0.5) 0%,\n      var(--color-ares-purple-dark) 45%,\n      var(--color-ares-purple-dark) 65%,\n      rgba(var(--color-ares-purple-dark), 0.5) 100%);\n}\n.effect-summary-foreground-radial-white[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background:\n    radial-gradient(\n      ellipse 200% 80%,\n      rgba(255, 255, 255, 0) 0%,\n      rgba(255, 255, 255, 0) 40%,\n      rgba(255, 255, 255, 0.7) 55%,\n      rgb(255, 255, 255) 100%);\n}\n.effect-summary-text[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.wrapper-background-layout[_ngcontent-%COMP%] {\n  z-index: -1;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n.wrapper-activation[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n.unplayable[_ngcontent-%COMP%] {\n  filter: grayscale(100%);\n}\n/*# sourceMappingURL=project-card.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i017.\u0275setClassDebugInfo(ProjectCardComponent, { className: "ProjectCardComponent", filePath: "src\\app\\components\\cards\\project\\project-card\\project-card.component.ts", lineNumber: 25 });
})();

// src/app/components/cards/project/project-card-list/project-card-list.component.ts
import { CommonModule as CommonModule3 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i018 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i1 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c02 = ["projectCardComponent"];
function ProjectCardListComponent_app_project_card_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i018.\u0275\u0275getCurrentView();
    i018.\u0275\u0275elementStart(0, "app-project-card", 6, 0);
    i018.\u0275\u0275listener("cardStateChange", function ProjectCardListComponent_app_project_card_5_Template_app_project_card_cardStateChange_0_listener($event) {
      i018.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i018.\u0275\u0275nextContext();
      return i018.\u0275\u0275resetView(ctx_r1.cardStateChange($event));
    });
    i018.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const card_r3 = ctx.$implicit;
    const ctx_r1 = i018.\u0275\u0275nextContext();
    i018.\u0275\u0275property("stateFromParent", ctx_r1.cardSelector.stateFromParent)("projectCard", card_r3)("initialState", ctx_r1.cardSelector.cardInitialState)("buildDiscount", ctx_r1._buildDiscount);
  }
}
var ProjectCardListComponent = class _ProjectCardListComponent {
  constructor() {
    this.background = "";
    this.listType = "none";
    this.updateSelectedCardList = new EventEmitter2();
    this.selectedCardList = [];
    this.loaded = false;
  }
  ngOnInit() {
    this.updateCardList();
    this._eventId = this.eventId;
    this.loaded = true;
    this.setBackground();
  }
  setBackground() {
    switch (this.listType) {
      case "builderSelector": {
        this.background = this.currentPhase.toLowerCase();
        break;
      }
      default: {
        this.background = this.listType;
      }
    }
  }
  resetSelector() {
    this.cardSelector = {
      selectFrom: [],
      selectedList: [],
      selectionQuantity: 0,
      selectionQuantityTreshold: "equal"
    };
  }
  ngOnChanges(changes) {
    if (this.loaded === false) {
      return;
    }
    if (changes["event"] && changes["event"].currentValue) {
      this.updateCardList();
    }
    if (changes["eventId"] && changes["eventId"].currentValue) {
      this.updateCardList();
    }
    if (changes["CardBuilder"] && changes["CardBuilder"].currentValue) {
      this.updateCardList();
    }
    if (changes["cardList"] && changes["cardList"].currentValue) {
      this.updateCardList();
    }
    if (changes["playedCardList"] && changes["playedCardList"].currentValue) {
      this.updateCardList();
    }
    if (changes["listType"] && changes["listType"].currentValue) {
      this.setBackground();
    }
  }
  ngDoCheck() {
    if (this.loaded === false) {
      return;
    }
    if (this.event?.hasSelector()) {
      this.checkUpdateSelector(this.event);
    }
    if (this._eventId != this.eventId) {
      this.resetCardList();
      this.updateCardList();
      this.updateSelectedCardList.emit(this.selectedCardList);
    }
  }
  checkUpdateSelector(event) {
    if (Utils.jsonCopy(event.cardSelector) != Utils.jsonCopy(this.cardSelector)) {
      this.updateCardList();
    }
  }
  filterCards(cards, filter) {
    if (filter === void 0) {
      return cards;
    }
    let result = [];
    for (let card of cards) {
      if (card.isFilterOk(filter) === true) {
        result.push(card);
      }
    }
    return result;
  }
  cardStateChange(cardChange) {
    this.resetCardList();
    for (let card of this.projectCards) {
      if (card.state.isSelected() === true) {
        this.selectedCardList.push(card.projectCard);
      }
    }
    this.updateSelectedCardList.emit(this.selectedCardList);
  }
  setSelectorFromPlayedCardList() {
    this.cardSelector = {
      selectFrom: [],
      selectedList: this.playedCardList,
      selectionQuantity: 0,
      selectionQuantityTreshold: "equal"
    };
  }
  setSelectorFromEvent(event) {
    this.cardSelector = event.cardSelector;
  }
  setSelectorFromPlayZone(event) {
    let card = event.cardBuilder[this.playZoneId].getSelectedCard();
    if (card === void 0) {
      this.cardSelector.selectedList;
      this.cardSelector.selectionQuantity = 0;
    } else {
      this.cardSelector.selectedList = [card];
      this.cardSelector.selectionQuantity = 1;
    }
  }
  setSelectorFromCardList() {
    this._cardList = this.cardList;
    this.cardSelector = {
      selectFrom: this.cardList,
      selectedList: [],
      selectionQuantity: 0,
      selectionQuantityTreshold: "equal"
    };
  }
  setSelector() {
    this.resetSelector();
    if (this.playedCardList) {
      this.setSelectorFromPlayedCardList();
      return;
    }
    if (this.cardList) {
      this.setSelectorFromCardList();
      return;
    }
    if (this.playZoneId != void 0 && this.event?.hasCardBuilder() === true) {
      this.setSelectorFromPlayZone(this.event);
      return;
    }
    if (this.event?.hasSelector()) {
      this.resetCardList();
      this.setSelectorFromEvent(this.event);
      return;
    }
  }
  setDisplay() {
    if (this.event?.hasCardBuilder()) {
      this.setDiscount(this.event);
    }
    if (this.playedCardList != void 0) {
      this.displayedCards = this.getDisplayFromPlayed();
      return;
    }
    if (this.playZoneId != void 0) {
      this.displayedCards = this.getDisplayFromSelected();
      return;
    }
    this.displayedCards = this.getDisplayFromSelectable();
  }
  setDiscount(event) {
    if (!this.loaded) {
      return;
    }
    this._buildDiscount = event.buildDiscountValue;
    this.childrenUpdateCost();
  }
  updateDiscount(event) {
    this.setDiscount(event);
  }
  childrenUpdateCost() {
    if (this.projectCards === void 0) {
      return;
    }
    for (let card of this.projectCards) {
      card.updateCost();
    }
  }
  updateCardList() {
    this.setSelector();
    this.setDisplay();
    if (this.displayedCards != void 0 && this.displayedCards.length === 0) {
      this.displayedCards = void 0;
    }
    if (this.cardSelector.cardInitialState === void 0) {
      this.cardSelector.cardInitialState = Utils.toFullCardState({ selected: false, selectable: false });
    }
  }
  getDisplayFromSelectable() {
    return this.filterCards(this.cardSelector.selectFrom ? this.cardSelector.selectFrom : [], this.cardSelector.filter);
  }
  getDisplayFromSelected() {
    return this.cardSelector.selectedList;
  }
  getDisplayFromPlayed() {
    return this.playedCardList;
  }
  resetCardList() {
    this.selectedCardList = [];
  }
  updatePlayedCardList(cardList) {
    console.log("update played card list called", cardList);
    return;
    this.updateCardList();
  }
  static {
    this.\u0275fac = function ProjectCardListComponent_Factory(t) {
      return new (t || _ProjectCardListComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i018.\u0275\u0275defineComponent({ type: _ProjectCardListComponent, selectors: [["app-project-card-list"]], viewQuery: function ProjectCardListComponent_Query(rf, ctx) {
      if (rf & 1) {
        i018.\u0275\u0275viewQuery(_c02, 5);
      }
      if (rf & 2) {
        let _t;
        i018.\u0275\u0275queryRefresh(_t = i018.\u0275\u0275loadQuery()) && (ctx.projectCards = _t);
      }
    }, inputs: { event: "event", eventId: "eventId", playZoneId: "playZoneId", cardList: "cardList", currentPhase: "currentPhase", background: "background", listType: "listType", hovered: "hovered", cardListId: "cardListId" }, outputs: { updateSelectedCardList: "updateSelectedCardList" }, standalone: true, features: [i018.\u0275\u0275NgOnChangesFeature, i018.\u0275\u0275StandaloneFeature], decls: 6, vars: 6, consts: [["projectCardComponent", ""], [1, "wrapper-main"], [1, "wrapper-list"], [1, "list-mask"], [1, "wrapper-cards", 3, "ngClass"], [3, "stateFromParent", "projectCard", "initialState", "buildDiscount", "cardStateChange", 4, "ngFor", "ngForOf"], [3, "cardStateChange", "stateFromParent", "projectCard", "initialState", "buildDiscount"]], template: function ProjectCardListComponent_Template(rf, ctx) {
      if (rf & 1) {
        i018.\u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3);
        i018.\u0275\u0275element(3, "div");
        i018.\u0275\u0275elementEnd();
        i018.\u0275\u0275elementStart(4, "div", 4);
        i018.\u0275\u0275template(5, ProjectCardListComponent_app_project_card_5_Template, 2, 4, "app-project-card", 5);
        i018.\u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        i018.\u0275\u0275advance(3);
        i018.\u0275\u0275classMap("background--" + ctx.background);
        i018.\u0275\u0275advance();
        i018.\u0275\u0275classProp("hovered", ctx.hovered);
        i018.\u0275\u0275property("ngClass", ctx.listType);
        i018.\u0275\u0275advance();
        i018.\u0275\u0275property("ngForOf", ctx.displayedCards);
      }
    }, dependencies: [CommonModule3, i1.NgClass, i1.NgForOf, ProjectCardComponent], styles: ["\n\n.wrapper-main[_ngcontent-%COMP%] {\n  width: 100%;\n  height: auto;\n}\n.wrapper-list[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  width: 100%;\n  height: 100%;\n}\n.list-mask[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-mask-image:\n    radial-gradient(\n      circle,\n      rgb(255, 255, 255) 20%,\n      rgba(0, 0, 0, 0.8) 80%);\n  mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0) 0%,\n      rgb(0, 0, 0) 5%,\n      rgb(0, 0, 0) 95%,\n      rgba(0, 0, 0, 0) 100%);\n}\n.wrapper-cards[_ngcontent-%COMP%] {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  position: relative;\n  height: auto;\n  gap: calc(var(--card-width) * 0.03);\n  width: 100%;\n}\n.wrapper-cards.played[_ngcontent-%COMP%] {\n  width: 90%;\n}\n.wrapper-cards.hand[_ngcontent-%COMP%] {\n  padding: calc(var(--card-height) * 0.02);\n  background: rgba(0, 0, 0, 0.6);\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  border: solid 2px rgba(255, 129, 25, 0.8);\n  border-bottom: 0;\n}\n.wrapper-cards.hand.hovered[_ngcontent-%COMP%] {\n  box-shadow: 0 0 10px 5px rgba(255, 129, 25, 0.6);\n}\n.wrapper-cards.selector[_ngcontent-%COMP%] {\n  width: 100%;\n  height: auto;\n  justify-content: center;\n  align-items: center;\n  flex-direction: row;\n}\n.wrapper-cards.builderSelector[_ngcontent-%COMP%] {\n  max-width: calc(var(--card-width) * 5);\n  height: auto;\n  justify-content: center;\n  align-items: center;\n  flex-direction: row;\n}\n.background--played[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n.background--selector[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n.background--development[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n.background--construction[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n.background--played[_ngcontent-%COMP%], .background--selector[_ngcontent-%COMP%] {\n  background:\n    linear-gradient(\n      to right,\n      rgba(255, 255, 255, 0) 5%,\n      rgba(255, 255, 255, 0.3) 30%,\n      rgba(255, 255, 255, 0.3) 70%,\n      rgba(255, 255, 255, 0) 95%);\n}\n.background--development[_ngcontent-%COMP%] {\n  background:\n    linear-gradient(\n      to right,\n      rgba(42, 180, 92, 0) 0%,\n      rgba(42, 180, 92, 0.3) 30%,\n      rgba(42, 180, 92, 0.3) 70%,\n      rgba(42, 180, 92, 0) 100%);\n}\n.background--construction[_ngcontent-%COMP%] {\n  width: 100%;\n  background:\n    linear-gradient(\n      to right,\n      rgba(39, 177, 229, 0) 0%,\n      rgba(39, 177, 229, 0.25) 30%,\n      rgba(237, 53, 49, 0.25) 70%,\n      rgba(39, 177, 229, 0) 100%);\n}\n/*# sourceMappingURL=project-card-list.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i018.\u0275setClassDebugInfo(ProjectCardListComponent, { className: "ProjectCardListComponent", filePath: "src\\app\\components\\cards\\project\\project-card-list\\project-card-list.component.ts", lineNumber: 22 });
})();

// src/app/components/core-game/game-event/game-event.component.ts
import { CommonModule as CommonModule14 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import { Component as Component20, inject as inject2, ViewChild } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/models/core-game/handlers.model.ts
import { Injectable as Injectable14 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/services/designers/draw-event-designer.service.ts
import { Injectable as Injectable13 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i019 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var DrawEventDesigner = class _DrawEventDesigner {
  static createDrawEvent(resolveType, drawCardNumber, waiterId) {
    let event = new DrawEvent();
    event.drawCardNumber = drawCardNumber, event.resolveEventSubType = resolveType;
    event.waiterId = waiterId;
    return event;
  }
  static createScanKeepEvent(resolveType, scanKeep, waiterId) {
    let event = new DrawEvent();
    event.drawCardNumber = scanKeep.scan;
    event.resolveEventSubType = resolveType;
    event.waiterId = waiterId;
    event.keepCardNumber = scanKeep.keep;
    return event;
  }
  static {
    this.\u0275fac = function DrawEventDesigner_Factory(t) {
      return new (t || _DrawEventDesigner)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i019.\u0275\u0275defineInjectable({ token: _DrawEventDesigner, factory: _DrawEventDesigner.\u0275fac, providedIn: "root" });
  }
};

// src/app/models/core-game/handlers.model.ts
import * as i020 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var EventHandler = class _EventHandler {
  constructor(gameStateService, projectCardInfoService, rxStompService) {
    this.gameStateService = gameStateService;
    this.projectCardInfoService = projectCardInfoService;
    this.rxStompService = rxStompService;
    this.eventCounter = 0;
    this.clientPlayerId = this.gameStateService.clientPlayerId;
    this.waiterResolved = [];
    this.phaseHandler = new PhaseResolveHandler(this.gameStateService);
  }
  handleQueueUpdate(eventQueue) {
    if (eventQueue.length === 0) {
      return void 0;
    }
    if (eventQueue[0].id != void 0 && this.currentEventId != void 0 && Utils.jsonCopy(eventQueue[0].id) === Utils.jsonCopy(this.currentEventId)) {
      return this.currentEvent;
    }
    if (eventQueue[0].finalized === true) {
      this.gameStateService.cleanAndNextEventQueue();
      return this.currentEvent;
    }
    this.switchEvent(eventQueue, this.currentEvent);
    if (this.waiterResolved.length != 0) {
      this.resolveWaiters(eventQueue);
    }
    this.checkFinalized();
    return this.currentEvent;
  }
  eventMainButtonClicked() {
    this.finishEventEffect();
  }
  updateEventMainButton(enabled) {
    this.currentEvent.button?.updateEnabled(enabled);
  }
  cardBuilderButtonClicked(button) {
    let event = this.currentEvent;
    event.cardBuilderButtonClicked(button);
    switch (button.name) {
      case "buildCard": {
        let cardId = event.getCardToBuildId();
        if (cardId === void 0) {
          return;
        }
        this.gameStateService.addEventQueue(EventDesigner.createGeneric("buildCard", { cardId }), "first");
        break;
      }
      case "drawCard": {
        this.gameStateService.addEventQueue(EventDesigner.createDeckQueryEvent("drawQuery", { drawDiscard: { draw: 1 } }), "first");
        break;
      }
      case "gain6MC": {
        this.gameStateService.addEventQueue(EventDesigner.createGeneric("addRessourceToPlayer", { baseRessource: { name: "megacredit", valueStock: 6 } }), "first");
        break;
      }
    }
  }
  updateSelectedCardList(selection) {
    let event = this.currentEvent;
    event.updateCardSelection(selection);
  }
  cancelSellCardsOptional() {
    if (this.currentEvent.subType != "selectCardOptionalSell") {
      return;
    }
    this.finishEventEffect();
  }
  checkFinalized() {
    if (this.currentEvent.finalized === true) {
      this.gameStateService.cleanAndNextEventQueue();
    }
  }
  setEventId() {
    this.eventCounter += 1;
    return this.eventCounter;
  }
  switchEvent(eventQueue, event) {
    this.currentEvent = eventQueue[0];
    if (!this.currentEvent.id) {
      this.currentEvent.id = this.setEventId();
    }
    this.currentEventId = this.currentEvent.id;
    this.currentEvent.onSwitch();
    if (this.currentEvent.hasSelector() === true) {
      this.switchEventCardSelector(this.currentEvent);
    }
    if (this.currentEvent.type === "phase") {
      this.switchEventPhase(this.currentEvent);
    }
    this.applyAutoFinalize();
    return;
  }
  applyAutoFinalize() {
    if (this.currentEvent.autoFinalize != true) {
      return;
    }
    this.currentEvent.finalized = true;
    this.finishEventEffect();
  }
  switchEventCardSelector(event) {
    event.deactivateSelection();
    let subType = event.subType;
    if (event.refreshSelectorOnSwitch) {
      event.cardSelector.selectFrom = this.gameStateService.getClientHandModelList();
    }
    switch (subType) {
      case "selectCardForcedSell": {
        Utils.logEventResolution("resolving event: ", "EventCardSelector ", event.subType);
        let clientState = this.gameStateService.getClientState();
        let currentSize = clientState.getHandCurrentSize();
        let maximumSize = clientState.getHandMaximumSize();
        if (currentSize <= maximumSize) {
          event.finalized = true;
          break;
        }
        event.cardSelector.selectionQuantity = currentSize - maximumSize;
        event.activateSelection();
        event.cardSelector.stateFromParent = Utils.toFullCardState({ selectable: true, ignoreCost: true });
        event.title = `Too many cards in hand, please select ${event.cardSelector.selectionQuantity} cards to sell or more.`;
        break;
      }
      case "discardCards":
      case "selectCardOptionalSell": {
        event.activateSelection();
        event.cardSelector.stateFromParent = Utils.toFullCardState({ selectable: true, ignoreCost: true });
        break;
      }
      case "addRessourceToSelectedCard": {
        let selectFrom = this.gameStateService.getClientProjectPlayedModelList(event.cardSelector.filter);
        if (selectFrom.length === 0) {
          event.finalized = true;
          break;
        }
        event.activateSelection();
        event.cardSelector.selectFrom = selectFrom;
      }
    }
  }
  switchEventPhase(event) {
    let subType = event.subType;
    if (event.autoFinalize === true) {
      event.finalized = true;
    }
    switch (subType) {
      case "developmentPhase": {
        this.phaseHandler.resolveDevelopment();
        break;
      }
      case "constructionPhase": {
        this.phaseHandler.resolveConstruction();
        break;
      }
      case "productionPhase": {
        this.phaseHandler.resolveProduction();
        break;
      }
      case "researchPhase": {
        this.phaseHandler.resolveResearch();
        break;
      }
      default: {
        return;
      }
    }
  }
  finishEventEffect() {
    switch (this.currentEvent.type) {
      case "cardSelector": {
        this.finishEventCardSelector(this.currentEvent);
        break;
      }
      case "cardSelectorRessource": {
        this.finishEventCardSelectorRessource(this.currentEvent);
        break;
      }
      case "cardSelectorCardBuilder": {
        this.finishEventCardBuilder(this.currentEvent);
        break;
      }
      case "generic": {
        this.finishEventGeneric(this.currentEvent);
        break;
      }
      case "deck": {
        this.finishEventDeckQuery(this.currentEvent);
        break;
      }
      case "targetCard": {
        this.finishEventTargetCards(this.currentEvent);
        break;
      }
      case "waiter": {
        this.finishEventWaiter(this.currentEvent);
        break;
      }
      case "phase": {
        this.finishEventPhase(this.currentEvent);
        break;
      }
      default: {
        Utils.logError("Non mapped event in handler.finishEventEffect: ", this.currentEvent);
      }
    }
    if (this.currentEvent.waiterId != void 0) {
      this.waiterResolved.push(this.currentEvent.waiterId);
    }
    this.checkFinalized();
  }
  finishEventCardSelector(event) {
    Utils.logEventResolution("resolving event: ", "EventCardSelector ", event.subType);
    event.finalized = true;
    switch (event.subType) {
      case "selectCardForcedSell":
      case "selectCardOptionalSell":
      case "discardCards": {
        event.finalized = true;
        this.gameStateService.removeCardsFromClientHand(Utils.toCardsIdList(event.cardSelector.selectedList));
        if (event.subType === "discardCards") {
          break;
        }
        this.gameStateService.sellCardsFromClientHand(event.cardSelector.selectedList.length);
        break;
      }
      case "actionPhase": {
        break;
      }
      case "researchPhaseResult": {
        this.gameStateService.addCardsToClientHand(this.projectCardInfoService.getProjectCardIdListFromModel(event.cardSelector.selectedList));
        break;
      }
      case "scanKeepResult": {
        this.gameStateService.addCardsToClientHand(this.projectCardInfoService.getProjectCardIdListFromModel(event.cardSelector.selectedList));
        break;
      }
      default: {
        Utils.logError("Non mapped event in handler.finishEventCardSelector: ", this.currentEvent);
      }
    }
    if (event.subType != "actionPhase") {
      event.activateSelection();
    }
  }
  finishEventCardSelectorRessource(event) {
    Utils.logEventResolution("resolving event: ", "EventCardSelectorRessource ", event.subType);
    switch (event.subType) {
      case "addRessourceToSelectedCard": {
        event.finalized = true;
        let stock = event.advancedRessource ? [event.advancedRessource] : [];
        if (stock.length === 0) {
          break;
        }
        this.gameStateService.addRessourceToClientCard({ cardId: event.cardSelector.selectedList[0].id, stock });
        break;
      }
      default: {
        Utils.logError("Non mapped event in handler.finishEventCardSelectorRessource: ", this.currentEvent);
      }
    }
  }
  finishEventCardBuilder(event) {
    Utils.logEventResolution("resolving event: ", "EventCardBuilder ", event.subType);
    switch (event.subType) {
      case "developmentPhaseBuilder":
      case "constructionPhaseBuilder": {
        event.finalized = true;
        break;
      }
      default: {
        Utils.logError("Non mapped event in handler.finishEventCardBuilder: ", this.currentEvent);
      }
    }
  }
  finishEventGeneric(event) {
    Utils.logEventResolution("resolving event: ", "EventGeneric ", event.subType);
    if (event.subType != "buildCard") {
      event.finalized = true;
    }
    switch (event.subType) {
      case "endOfPhase": {
        this.gameStateService.setClientReady(true);
        this.rxStompService.publishPlayerState(this.gameStateService.getClientState());
        break;
      }
      case "buildCard": {
        let cardId = event.cardIdToBuild;
        if (cardId === void 0) {
          break;
        }
        let card = this.projectCardInfoService.getCardById(cardId);
        if (card === void 0) {
          break;
        }
        this.gameStateService.playCardFromClientHand(card);
        break;
      }
      case "drawResult": {
        if (event.drawResultList === void 0) {
          break;
        }
        this.gameStateService.addCardsToClientHand(event.drawResultList);
        break;
      }
      case "increaseGlobalParameter": {
        if (!event.increaseParameter) {
          break;
        }
        this.gameStateService.addGlobalParameterStepsEOPtoPlayerId(this.clientPlayerId, event.increaseParameter);
        break;
      }
      case "increaseResearchScanKeep": {
        if (!event.increaseResearchScanKeep) {
          break;
        }
        if (event.increaseResearchScanKeep.scan != void 0 && event.increaseResearchScanKeep.scan > 0) {
          this.gameStateService.addClientResearchScanValue(event.increaseResearchScanKeep.scan);
        }
        if (event.increaseResearchScanKeep.keep != void 0 && event.increaseResearchScanKeep.keep > 0) {
          this.gameStateService.addClientResearchKeepValue(event.increaseResearchScanKeep.keep);
        }
        break;
      }
      case "addRessourceToPlayer": {
        if (event.baseRessource === void 0) {
          break;
        }
        let baseRessources = [];
        if (Array.isArray(event.baseRessource)) {
          baseRessources = event.baseRessource;
        } else {
          baseRessources.push(event.baseRessource);
        }
        this.gameStateService.addRessourceToClient(baseRessources);
        break;
      }
      case "planificationPhase": {
        this.gameStateService.clientPlayerValidateSelectedPhase();
        break;
      }
      case "upgradePhaseCards": {
        break;
      }
      default: {
        Utils.logError("Non mapped event in handler.finishEventGeneric: ", this.currentEvent);
      }
    }
  }
  finishEventDeckQuery(event) {
    Utils.logEventResolution("resolving event: ", "EventDeckQuery ", event.subType);
    let resolveType;
    event.waiterId = event.id;
    switch (event.subType) {
      case "drawQuery": {
        resolveType = "drawResult";
        break;
      }
      case "researchPhaseQuery": {
        resolveType = "researchPhaseResult";
        break;
      }
      case "scanKeepQuery": {
        resolveType = "scanKeepResult";
        break;
      }
      default: {
        Utils.logError("Non mapped event in handler.finishEventDeckQuery: ", this.currentEvent);
      }
    }
    if (event.drawDiscard === void 0 && event.scanKeep === void 0 || event.waiterId === void 0 || resolveType === void 0) {
      return;
    }
    if ((event.drawDiscard?.draw ? event.drawDiscard.draw : 0) > 0 || event.scanKeep?.scan != void 0 && event.scanKeep.scan > 0) {
      this.gameStateService.addEventQueue(EventDesigner.createWaiter("deckWaiter", event.id), "second");
    }
    let drawNumber = event.drawDiscard?.draw;
    if (drawNumber != void 0 && drawNumber > 0) {
      this.gameStateService.addDrawQueue(DrawEventDesigner.createDrawEvent(resolveType, drawNumber, event.id));
    }
    if (event.scanKeep !== void 0) {
      let scanKeep = { scan: event.scanKeep?.scan ? event.scanKeep?.scan : 0, keep: event.scanKeep?.keep ? event.scanKeep?.keep : 0 };
      this.gameStateService.addDrawQueue(DrawEventDesigner.createScanKeepEvent(resolveType, scanKeep, event.waiterId));
    }
    this.gameStateService.cleanAndNextEventQueue();
  }
  finishEventWaiter(event) {
    Utils.logEventResolution("resolving event: ", "EventWaiter ", event.subType);
    switch (event.subType) {
      case "deckWaiter": {
        return;
      }
      default: {
        Utils.logError("Non mapped event in handler.EventWaiter: ", this.currentEvent);
      }
    }
  }
  finishEventTargetCards(event) {
    Utils.logEventResolution("resolving event: ", "EventTargetCard ", event.subType);
    switch (event.subType) {
      case "addRessourceToCardId": {
        if (event.advancedRessource === void 0) {
          Utils.logError("event tried to add ressource, but variable was empty: ", event);
          break;
        }
        let ressourceStock = [];
        if (Array.isArray(event.advancedRessource) === true) {
          ressourceStock = event.advancedRessource;
        } else {
          ressourceStock.push(event.advancedRessource);
        }
        let cardStock = {
          cardId: event.targetCardId,
          stock: ressourceStock
        };
        this.gameStateService.addRessourceToClientCard(cardStock);
        break;
      }
      case "deactivateTrigger": {
        this.gameStateService.setClientTriggerAsInactive(event.targetCardId);
        break;
      }
      default: {
        Utils.logError("Non mapped event in handler.finishEventTargetCards: ", this.currentEvent);
      }
    }
  }
  finishEventPhase(event) {
    Utils.logEventResolution("resolving event: ", "finishEventPhase ", event.subType);
    switch (event.subType) {
      case "developmentPhase":
      case "constructionPhase":
      case "researchPhase": {
        break;
      }
      case "productionPhase": {
        event.finalized = true;
        break;
      }
      default: {
        Utils.logError("Non mapped event in handler.finishEventPhase: ", this.currentEvent);
      }
    }
  }
  resolveWaiters(eventQueue) {
    let newWaiters = [];
    for (let waiterId of this.waiterResolved) {
      let waiterIsResolved = this.resolveWaiterId(waiterId, eventQueue);
      if (waiterIsResolved === false) {
        newWaiters.push(waiterId);
      }
    }
    this.waiterResolved = newWaiters;
  }
  resolveWaiterId(waiterId, eventQueue) {
    for (let event of eventQueue) {
      if (event.type !== "waiter") {
        continue;
      }
      let waiterEvent = event;
      if (waiterId !== waiterEvent.waiterId) {
        continue;
      }
      event.finalized = true;
      return true;
    }
    return false;
  }
  static {
    this.\u0275fac = function EventHandler_Factory(t) {
      return new (t || _EventHandler)(i020.\u0275\u0275inject(GameState), i020.\u0275\u0275inject(ProjectCardInfoService), i020.\u0275\u0275inject(RxStompService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i020.\u0275\u0275defineInjectable({ token: _EventHandler, factory: _EventHandler.\u0275fac });
  }
};
var DrawEventHandler = class _DrawEventHandler {
  constructor(gameStateService, projectCardInfoService, rxStompService) {
    this.gameStateService = gameStateService;
    this.projectCardInfoService = projectCardInfoService;
    this.rxStompService = rxStompService;
  }
  handleQueueUpdate(drawQueue) {
    if (drawQueue.length === 0) {
      return;
    }
    if (drawQueue[0].finalized === true) {
      return;
    }
    if (drawQueue[0].queried === false) {
      this.sendWsDrawQuery(drawQueue[0]);
    }
    if (drawQueue[0].served === false) {
      return;
    }
    let event = drawQueue[0];
    this.resolveDrawEvent(event);
    event.finalized = true;
    this.gameStateService.cleanAndNextDrawQueue();
  }
  sendWsDrawQuery(event) {
    event.queried = true;
    this.rxStompService.publishDraw(event.drawCardNumber, event.waiterId);
  }
  resolveDrawEvent(drawEvent) {
    let resultEvent;
    Utils.logEventResolution("resolving deck event: ", drawEvent.resolveEventSubType);
    switch (drawEvent.resolveEventSubType) {
      case "drawResult": {
        resultEvent = EventDesigner.createGeneric("drawResult", {
          drawEventResult: drawEvent.drawResultCardList,
          waiterId: drawEvent.waiterId
        });
        break;
      }
      case "researchPhaseResult": {
        resultEvent = EventDesigner.createCardSelector("researchPhaseResult", {
          cardSelector: {
            selectFrom: this.projectCardInfoService.getProjectCardList(drawEvent.drawResultCardList),
            selectedList: [],
            selectionQuantity: drawEvent.keepCardNumber
          },
          waiterId: drawEvent.waiterId
        });
        break;
      }
      case "scanKeepResult": {
        if (drawEvent.keepCardNumber === void 0) {
          break;
        }
        resultEvent = EventDesigner.createCardSelector("scanKeepResult", {
          cardSelector: {
            selectFrom: this.projectCardInfoService.getProjectCardList(drawEvent.drawResultCardList),
            selectedList: [],
            selectionQuantity: drawEvent.keepCardNumber
          },
          waiterId: drawEvent.waiterId
        });
        break;
      }
    }
    if (resultEvent === void 0) {
      return;
    }
    this.gameStateService.addEventQueue(resultEvent, "first");
  }
  static {
    this.\u0275fac = function DrawEventHandler_Factory(t) {
      return new (t || _DrawEventHandler)(i020.\u0275\u0275inject(GameState), i020.\u0275\u0275inject(ProjectCardInfoService), i020.\u0275\u0275inject(RxStompService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i020.\u0275\u0275defineInjectable({ token: _DrawEventHandler, factory: _DrawEventHandler.\u0275fac });
  }
};
var PhaseResolveHandler = class {
  constructor(gameStateService) {
    this.gameStateService = gameStateService;
    this.clientPlayerId = this.gameStateService.clientPlayerId;
  }
  getCurrentUpgradedPhaseCard() {
    return this.gameStateService.getClientUpgradedPhaseCards();
  }
  refreshCurrentUpgradedPhaseCard() {
    this.currentUpgradedPhaseCards = this.getCurrentUpgradedPhaseCard();
  }
  shouldReceivePhaseCardSelectionBonus(phaseResolved) {
    return this.gameStateService.getPlayerCurrentSelectedPhase(this.clientPlayerId) === phaseResolved;
  }
  resolveDevelopment() {
    this.refreshCurrentUpgradedPhaseCard();
    let builderType = this.currentUpgradedPhaseCards[0].phaseType;
    if (!this.shouldReceivePhaseCardSelectionBonus(SelectablePhaseEnum.development)) {
      builderType = "developmentAbilityOnly";
    }
    this.gameStateService.addEventQueue(EventDesigner.createCardBuilder("developmentPhaseBuilder", builderType), "second");
  }
  resolveConstruction() {
    this.refreshCurrentUpgradedPhaseCard();
    let builderType = this.currentUpgradedPhaseCards[1].phaseType;
    if (!this.shouldReceivePhaseCardSelectionBonus(SelectablePhaseEnum.construction)) {
      builderType = "constructionAbilityOnly";
    }
    this.gameStateService.addEventQueue(EventDesigner.createCardBuilder("constructionPhaseBuilder", builderType), "second");
    if (builderType === "construction_draw_card") {
      this.gameStateService.addEventQueue(EventDesigner.createDeckQueryEvent("drawQuery", { drawDiscard: { draw: 1 } }), "second");
    }
  }
  resolveProduction() {
    this.refreshCurrentUpgradedPhaseCard();
    let clientState = this.gameStateService.getClientState();
    let newClientRessource = [];
    newClientRessource = clientState.getRessources();
    for (let i = 0; i < newClientRessource.length; i++) {
      switch (i) {
        case 0: {
          newClientRessource[i].valueStock = newClientRessource[i].valueStock + newClientRessource[i].valueProd + clientState.getTR() + this.getProductionPhaseCardSelectionBonus();
          break;
        }
        case 1:
        case 2: {
          newClientRessource[i].valueStock = newClientRessource[i].valueStock + newClientRessource[i].valueProd;
          break;
        }
        case 5: {
          if (newClientRessource[i].valueProd === 0) {
            break;
          }
          this.gameStateService.addEventQueue(EventDesigner.createDeckQueryEvent("drawQuery", { drawDiscard: { draw: newClientRessource[i].valueProd, discard: 0 } }), "first");
          break;
        }
      }
    }
    this.gameStateService.updateClientState(clientState);
  }
  getProductionPhaseCardSelectionBonus() {
    if (!this.shouldReceivePhaseCardSelectionBonus(SelectablePhaseEnum.production)) {
      return 0;
    }
    let bonus = 0;
    let productionPhaseCard = this.currentUpgradedPhaseCards[3];
    switch (productionPhaseCard.phaseType) {
      case "production_base": {
        bonus = 4;
        break;
      }
      case "production_7mc": {
        bonus = 7;
        break;
      }
      case "production_1mc_activate_card": {
        bonus = 1;
        break;
      }
    }
    return bonus;
  }
  resolveResearch() {
    this.refreshCurrentUpgradedPhaseCard();
    let baseScanKeep = { scan: 2, keep: 1 };
    let clientState = this.gameStateService.getClientState();
    let modScanKeep = clientState.getResearch();
    let bonusScanKeep = this.getResearchPhaseCardSelectionBonus();
    let totalScanKeep = {
      scan: baseScanKeep.scan + modScanKeep.scan + bonusScanKeep.scan,
      keep: baseScanKeep.keep + modScanKeep.keep + bonusScanKeep.keep
    };
    this.gameStateService.addEventQueue(EventDesigner.createDeckQueryEvent("researchPhaseQuery", { scanKeep: totalScanKeep }), "first");
  }
  getResearchPhaseCardSelectionBonus() {
    if (!this.shouldReceivePhaseCardSelectionBonus(SelectablePhaseEnum.research)) {
      return { scan: 0, keep: 0 };
    }
    let bonus = { scan: 0, keep: 0 };
    let researchPhaseCard = this.currentUpgradedPhaseCards[4];
    switch (researchPhaseCard.phaseType) {
      case "research_base": {
        bonus = { scan: 3, keep: 1 };
        break;
      }
      case "research_scan6_keep1": {
        bonus = { scan: 6, keep: 1 };
        break;
      }
      case "research_scan2_keep2": {
        bonus = { scan: 2, keep: 2 };
        break;
      }
    }
    return bonus;
  }
};

// src/app/components/cards/card-builder-list/card-builder-list.component.ts
import { Component as Component11, Input as Input8, Output as Output6, EventEmitter as EventEmitter6 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/components/cards/card-builder/card-builder.component.ts
import { Component as Component10, Input as Input7, Output as Output5, EventEmitter as EventEmitter5 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule6 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";

// src/app/components/tools/button/event-card-builder-button.component.ts
import { CommonModule as CommonModule5 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import { Component as Component8, Input as Input6, Output as Output4, EventEmitter as EventEmitter4 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/components/tools/button/button.component.ts
import { Component as Component7, Output as Output3, Input as Input5, EventEmitter as EventEmitter3 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule4 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i021 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i12 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c03 = (a0, a1) => [a0, a1];
var _c12 = (a0, a1, a2) => [a0, a1, a2];
var _c22 = (a0) => [a0];
var _c3 = (a0) => ({ "element-disabled": a0 });
function ButtonComponent_button_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i021.\u0275\u0275elementStart(0, "div", 7);
    i021.\u0275\u0275element(1, "div", 7);
    i021.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i021.\u0275\u0275nextContext(2);
    i021.\u0275\u0275property("ngClass", i021.\u0275\u0275pureFunction2(2, _c03, "button-shape--" + ctx_r1.shape, "gradiant-mask--" + ctx_r1.shape));
    i021.\u0275\u0275advance();
    i021.\u0275\u0275property("ngClass", i021.\u0275\u0275pureFunction2(5, _c03, "button-gradiant-background--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape));
  }
}
function ButtonComponent_button_1_div_6_Template(rf, ctx) {
  if (rf & 1) {
    i021.\u0275\u0275element(0, "div", 10);
  }
  if (rf & 2) {
    const ctx_r1 = i021.\u0275\u0275nextContext(2);
    i021.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i021.\u0275\u0275property("ngClass", i021.\u0275\u0275pureFunction1(3, _c22, ctx_r1.button.enabled ? "enabled" : "disabled"));
  }
}
function ButtonComponent_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i021.\u0275\u0275getCurrentView();
    i021.\u0275\u0275elementStart(0, "button", 4);
    i021.\u0275\u0275listener("mouseenter", function ButtonComponent_button_1_Template_button_mouseenter_0_listener() {
      i021.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i021.\u0275\u0275nextContext();
      return i021.\u0275\u0275resetView(ctx_r1._isHovered = true);
    })("mouseleave", function ButtonComponent_button_1_Template_button_mouseleave_0_listener() {
      i021.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i021.\u0275\u0275nextContext();
      return i021.\u0275\u0275resetView(ctx_r1._isHovered = false);
    })("click", function ButtonComponent_button_1_Template_button_click_0_listener() {
      i021.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i021.\u0275\u0275nextContext();
      return i021.\u0275\u0275resetView(ctx_r1.onClick(ctx_r1.button));
    });
    i021.\u0275\u0275elementStart(1, "div", 5);
    i021.\u0275\u0275template(2, ButtonComponent_button_1_div_2_Template, 2, 8, "div", 6);
    i021.\u0275\u0275elementStart(3, "div", 7);
    i021.\u0275\u0275element(4, "app-text-with-image", 8);
    i021.\u0275\u0275elementEnd();
    i021.\u0275\u0275element(5, "div", 7);
    i021.\u0275\u0275template(6, ButtonComponent_button_1_div_6_Template, 1, 5, "div", 9);
    i021.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i021.\u0275\u0275nextContext();
    i021.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i021.\u0275\u0275property("disabled", ctx_r1.button.enabled === false)("ngClass", i021.\u0275\u0275pureFunction2(11, _c03, ctx_r1.button.enabled ? "enabled" : "disabled", ctx_r1.shape ? "button-shape--" + ctx_r1.shape : ""));
    i021.\u0275\u0275advance(2);
    i021.\u0275\u0275property("ngIf", ctx_r1.button.enabled === true && ctx_r1.shape != "hex_floating");
    i021.\u0275\u0275advance();
    i021.\u0275\u0275property("ngClass", i021.\u0275\u0275pureFunction3(14, _c12, "button-main--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape, ctx_r1.button.enabled ? "enabled" : "disabled"));
    i021.\u0275\u0275advance();
    i021.\u0275\u0275property("rawText", ctx_r1._caption);
    i021.\u0275\u0275advance();
    i021.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i021.\u0275\u0275property("ngClass", i021.\u0275\u0275pureFunction3(18, _c12, "button-background--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape, ctx_r1.button.enabled ? "enabled" : "disabled"));
    i021.\u0275\u0275advance();
    i021.\u0275\u0275property("ngIf", ctx_r1.shape === "hex_floating");
  }
}
function ButtonComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i021.\u0275\u0275element(0, "div", 11);
  }
  if (rf & 2) {
    const ctx_r1 = i021.\u0275\u0275nextContext();
    i021.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i021.\u0275\u0275property("ngClass", i021.\u0275\u0275pureFunction1(3, _c22, ctx_r1.button.enabled ? "enabled" : "disabled"));
  }
}
function ButtonComponent_div_3_img_5_Template(rf, ctx) {
  if (rf & 1) {
    i021.\u0275\u0275element(0, "img", 14);
  }
  if (rf & 2) {
    const ctx_r1 = i021.\u0275\u0275nextContext(2);
    i021.\u0275\u0275property("src", ctx_r1._imageUrl, i021.\u0275\u0275sanitizeUrl);
  }
}
function ButtonComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = i021.\u0275\u0275getCurrentView();
    i021.\u0275\u0275elementStart(0, "div", 0)(1, "div", 7)(2, "button", 12);
    i021.\u0275\u0275listener("click", function ButtonComponent_div_3_Template_button_click_2_listener() {
      i021.\u0275\u0275restoreView(_r3);
      const ctx_r1 = i021.\u0275\u0275nextContext();
      return i021.\u0275\u0275resetView(ctx_r1.onClick(ctx_r1.button));
    });
    i021.\u0275\u0275elementStart(3, "p");
    i021.\u0275\u0275text(4);
    i021.\u0275\u0275elementEnd();
    i021.\u0275\u0275template(5, ButtonComponent_div_3_img_5_Template, 1, 1, "img", 13);
    i021.\u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = i021.\u0275\u0275nextContext();
    i021.\u0275\u0275advance();
    i021.\u0275\u0275property("ngClass", i021.\u0275\u0275pureFunction1(5, _c3, ctx_r1.button.enabled === false));
    i021.\u0275\u0275advance();
    i021.\u0275\u0275property("disabled", ctx_r1.button.enabled === false)("ngClass", i021.\u0275\u0275pureFunction2(7, _c03, ctx_r1._imageUrl ? "image-button" : "validation-button", ctx_r1.button.enabled === true ? "element-clickable" : ""));
    i021.\u0275\u0275advance(2);
    i021.\u0275\u0275textInterpolate(ctx_r1.button.caption);
    i021.\u0275\u0275advance();
    i021.\u0275\u0275property("ngIf", ctx_r1._imageUrl);
  }
}
var ButtonComponent = class _ButtonComponent {
  constructor() {
    this.buttonClicked = new EventEmitter3();
    this.shape = "hex";
    this._isHovered = false;
  }
  ngOnChanges(changes) {
    if (changes["button"] && changes["button"].currentValue) {
      this._caption = this.button.caption ?? "";
      switch (this.button.type) {
        case "Image": {
          this.handleImageButtonChange();
          break;
        }
      }
    }
  }
  onClick(button) {
    this.buttonClicked.emit(button);
    console.log("clicked:", button);
  }
  handleImageButtonChange() {
    let imageButton = this.button;
    this._imageUrl = imageButton.imageUrl;
  }
  static {
    this.\u0275fac = function ButtonComponent_Factory(t) {
      return new (t || _ButtonComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i021.\u0275\u0275defineComponent({ type: _ButtonComponent, selectors: [["app-button"]], inputs: { button: "button", shape: "shape" }, outputs: { buttonClicked: "buttonClicked" }, standalone: true, features: [i021.\u0275\u0275NgOnChangesFeature, i021.\u0275\u0275StandaloneFeature], decls: 4, vars: 3, consts: [[1, "wrapper-button"], ["class", "main", 3, "disabled", "hovered", "ngClass", "mouseenter", "mouseleave", "click", 4, "ngIf"], ["class", "shadow", 3, "hovered", "ngClass", 4, "ngIf"], ["class", "wrapper-button", 4, "ngIf"], [1, "main", 3, "mouseenter", "mouseleave", "click", "disabled", "ngClass"], [1, "wrapper-elements"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"], [3, "rawText"], ["class", "button-border", 3, "ngClass", "hovered", 4, "ngIf"], [1, "button-border", 3, "ngClass"], [1, "shadow", 3, "ngClass"], [3, "click", "disabled", "ngClass"], ["alt", "", 3, "src", 4, "ngIf"], ["alt", "", 3, "src"]], template: function ButtonComponent_Template(rf, ctx) {
      if (rf & 1) {
        i021.\u0275\u0275elementStart(0, "div", 0);
        i021.\u0275\u0275template(1, ButtonComponent_button_1_Template, 7, 22, "button", 1)(2, ButtonComponent_div_2_Template, 1, 5, "div", 2);
        i021.\u0275\u0275elementEnd();
        i021.\u0275\u0275template(3, ButtonComponent_div_3_Template, 6, 10, "div", 3);
      }
      if (rf & 2) {
        i021.\u0275\u0275advance();
        i021.\u0275\u0275property("ngIf", !ctx._imageUrl);
        i021.\u0275\u0275advance();
        i021.\u0275\u0275property("ngIf", ctx.shape === "hex_floating");
        i021.\u0275\u0275advance();
        i021.\u0275\u0275property("ngIf", ctx._imageUrl);
      }
    }, dependencies: [CommonModule4, i12.NgClass, i12.NgIf, TextWithImageComponent], styles: ['\n\n.wrapper-button[_ngcontent-%COMP%] {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n.main[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  border: 0;\n  height: 100%;\n  background: transparent;\n}\n.main.hovered.enabled[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.main.disabled[_ngcontent-%COMP%], .main[_ngcontent-%COMP%]   .hovered.disabled[_ngcontent-%COMP%] {\n  filter: grayscale(40%);\n}\n.main.disabled[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%], .main[_ngcontent-%COMP%]   .hovered.disabled[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\n  filter: grayscale(50%);\n}\n.main[_ngcontent-%COMP%]  app-text-with-image .text-tag {\n  max-width: 100%;\n  max-height: 25px;\n  font-weight: bold;\n}\n.main.enabled[_ngcontent-%COMP%]  app-text-with-image p {\n  font-weight: 550;\n  font-size: 100%;\n}\n.main.disabled[_ngcontent-%COMP%]  app-text-with-image p {\n  color: rgb(61, 61, 61);\n  font-size: 100%;\n}\n.wrapper-elements[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n.gradiant-mask--hex[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--hex[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--hex[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.button-gradiant-background--hex[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--small[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--large[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--hex_floating[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-main--hex[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--hex[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 25%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--hex_floating[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--hex_floating[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 25%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--small[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--small[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 15%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--large[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--large[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 10%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--hex_floating.enabled[_ngcontent-%COMP%] {\n  background: transparent;\n}\n.button-background--hex[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--small[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--large[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--hex_floating[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--hex_floating[_ngcontent-%COMP%] {\n  background: rgba(181, 128, 108, 0.8);\n}\n.button-background--hex_floating.enabled[_ngcontent-%COMP%]::before {\n  content: "";\n  position: absolute;\n  inset: 0;\n  opacity: 1;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-background--hex_floating.enabled[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background: rgba(255, 255, 255, 0.2);\n  opacity: 0;\n  transition: opacity 0.15s ease;\n  z-index: 10;\n}\n.button-background--hex_floating.hovered[_ngcontent-%COMP%]::before {\n  opacity: 0;\n}\n.button-background--hex_floating.hovered[_ngcontent-%COMP%]::after {\n  opacity: 1;\n}\n.button-shape--hex[_ngcontent-%COMP%], .button-shape--hex_floating[_ngcontent-%COMP%] {\n  aspect-ratio: 1.15/1;\n}\n.button-shape--small[_ngcontent-%COMP%] {\n  aspect-ratio: 3.5/1;\n}\n.button-shape--large[_ngcontent-%COMP%] {\n  aspect-ratio: 5/1;\n}\n.button-shape--hex[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n}\n.button-shape--hex_floating[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n}\n.button-shape--small[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 15% 0%, calc(100% - 15%) 0%, 100% 50%, calc(100% - 15%) 100%, 15% 100%);\n  clip-path: polygon(0% 50%, 15% 0%, calc(100% - 15%) 0%, 100% 50%, calc(100% - 15%) 100%, 15% 100%);\n}\n.button-shape--large[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 10% 0%, calc(100% - 10%) 0%, 100% 50%, calc(100% - 10%) 100%, 10% 100%);\n  clip-path: polygon(0% 50%, 10% 0%, calc(100% - 10%) 0%, 100% 50%, calc(100% - 10%) 100%, 10% 100%);\n}\n.button-border[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%, 0% 50%, 3px 50%, calc(25% + 1.5px) calc(100% - 3px), calc(100% - (25% + 1.5px)) calc(100% - 3px), calc(100% - 3px) 50%, calc(100% - (25% + 1.5px)) 3px, calc(25% + 1.5px) 3px, 3px 50%);\n}\n.button-border.enabled[_ngcontent-%COMP%]::before {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background-image:\n    linear-gradient(\n      135deg,\n      rgb(215, 215, 215) 30%,\n      rgb(147, 147, 147) 60%,\n      rgb(234, 234, 234) 90%);\n  opacity: 1;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-border.enabled[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background-image:\n    linear-gradient(\n      to right,\n      var(--color-ares-orange) 0%,\n      var(--color-ares-orange) 100%);\n  opacity: 0;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-border.enabled.hovered[_ngcontent-%COMP%]::before {\n  opacity: 0;\n}\n.button-border.enabled.hovered[_ngcontent-%COMP%]::after {\n  opacity: 1;\n}\n.shadow[_ngcontent-%COMP%] {\n  z-index: -1;\n  position: absolute;\n  height: 100%;\n  aspect-ratio: 1;\n  background: transparent;\n  border-radius: 50%;\n}\n.shadow.hovered.enabled[_ngcontent-%COMP%] {\n  box-shadow: 0px 0px 15px 10px rgba(255, 119, 0, 0.3);\n}\n.shadow.enabled[_ngcontent-%COMP%] {\n  box-shadow: 0px 0px 15px 10px rgba(196, 196, 196, 0.2);\n}\n/*# sourceMappingURL=button.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i021.\u0275setClassDebugInfo(ButtonComponent, { className: "ButtonComponent", filePath: "src\\app\\components\\tools\\button\\button.component.ts", lineNumber: 18 });
})();

// src/app/components/tools/button/event-card-builder-button.component.ts
import * as i022 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i13 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c04 = (a0, a1) => [a0, a1];
var _c13 = (a0, a1, a2) => [a0, a1, a2];
var _c23 = (a0) => [a0];
var _c32 = (a0) => ({ "element-disabled": a0 });
function EventCardBuilderButtonComponent_button_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i022.\u0275\u0275elementStart(0, "div", 7);
    i022.\u0275\u0275element(1, "div", 7);
    i022.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i022.\u0275\u0275nextContext(2);
    i022.\u0275\u0275property("ngClass", i022.\u0275\u0275pureFunction2(2, _c04, "button-shape--" + ctx_r1.shape, "gradiant-mask--" + ctx_r1.shape));
    i022.\u0275\u0275advance();
    i022.\u0275\u0275property("ngClass", i022.\u0275\u0275pureFunction2(5, _c04, "button-gradiant-background--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape));
  }
}
function EventCardBuilderButtonComponent_button_1_div_6_Template(rf, ctx) {
  if (rf & 1) {
    i022.\u0275\u0275element(0, "div", 10);
  }
  if (rf & 2) {
    const ctx_r1 = i022.\u0275\u0275nextContext(2);
    i022.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i022.\u0275\u0275property("ngClass", i022.\u0275\u0275pureFunction1(3, _c23, ctx_r1.button.enabled ? "enabled" : "disabled"));
  }
}
function EventCardBuilderButtonComponent_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i022.\u0275\u0275getCurrentView();
    i022.\u0275\u0275elementStart(0, "button", 4);
    i022.\u0275\u0275listener("mouseenter", function EventCardBuilderButtonComponent_button_1_Template_button_mouseenter_0_listener() {
      i022.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i022.\u0275\u0275nextContext();
      return i022.\u0275\u0275resetView(ctx_r1._isHovered = true);
    })("mouseleave", function EventCardBuilderButtonComponent_button_1_Template_button_mouseleave_0_listener() {
      i022.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i022.\u0275\u0275nextContext();
      return i022.\u0275\u0275resetView(ctx_r1._isHovered = false);
    })("click", function EventCardBuilderButtonComponent_button_1_Template_button_click_0_listener() {
      i022.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i022.\u0275\u0275nextContext();
      return i022.\u0275\u0275resetView(ctx_r1.onClick(ctx_r1.button));
    });
    i022.\u0275\u0275elementStart(1, "div", 5);
    i022.\u0275\u0275template(2, EventCardBuilderButtonComponent_button_1_div_2_Template, 2, 8, "div", 6);
    i022.\u0275\u0275elementStart(3, "div", 7);
    i022.\u0275\u0275element(4, "app-text-with-image", 8);
    i022.\u0275\u0275elementEnd();
    i022.\u0275\u0275element(5, "div", 7);
    i022.\u0275\u0275template(6, EventCardBuilderButtonComponent_button_1_div_6_Template, 1, 5, "div", 9);
    i022.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i022.\u0275\u0275nextContext();
    i022.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i022.\u0275\u0275property("disabled", ctx_r1.button.enabled === false)("ngClass", i022.\u0275\u0275pureFunction2(11, _c04, ctx_r1.button.enabled ? "enabled" : "disabled", ctx_r1.shape ? "button-shape--" + ctx_r1.shape : ""));
    i022.\u0275\u0275advance(2);
    i022.\u0275\u0275property("ngIf", ctx_r1.button.enabled === true && ctx_r1.shape != "hex_floating");
    i022.\u0275\u0275advance();
    i022.\u0275\u0275property("ngClass", i022.\u0275\u0275pureFunction3(14, _c13, "button-main--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape, ctx_r1.button.enabled ? "enabled" : "disabled"));
    i022.\u0275\u0275advance();
    i022.\u0275\u0275property("rawText", ctx_r1._caption);
    i022.\u0275\u0275advance();
    i022.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i022.\u0275\u0275property("ngClass", i022.\u0275\u0275pureFunction3(18, _c13, "button-background--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape, ctx_r1.button.enabled ? "enabled" : "disabled"));
    i022.\u0275\u0275advance();
    i022.\u0275\u0275property("ngIf", ctx_r1.shape === "hex_floating");
  }
}
function EventCardBuilderButtonComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i022.\u0275\u0275element(0, "div", 11);
  }
  if (rf & 2) {
    const ctx_r1 = i022.\u0275\u0275nextContext();
    i022.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i022.\u0275\u0275property("ngClass", i022.\u0275\u0275pureFunction1(3, _c23, ctx_r1.button.enabled ? "enabled" : "disabled"));
  }
}
function EventCardBuilderButtonComponent_div_3_img_5_Template(rf, ctx) {
  if (rf & 1) {
    i022.\u0275\u0275element(0, "img", 14);
  }
  if (rf & 2) {
    const ctx_r1 = i022.\u0275\u0275nextContext(2);
    i022.\u0275\u0275property("src", ctx_r1._imageUrl, i022.\u0275\u0275sanitizeUrl);
  }
}
function EventCardBuilderButtonComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = i022.\u0275\u0275getCurrentView();
    i022.\u0275\u0275elementStart(0, "div", 0)(1, "div", 7)(2, "button", 12);
    i022.\u0275\u0275listener("click", function EventCardBuilderButtonComponent_div_3_Template_button_click_2_listener() {
      i022.\u0275\u0275restoreView(_r3);
      const ctx_r1 = i022.\u0275\u0275nextContext();
      return i022.\u0275\u0275resetView(ctx_r1.onClick(ctx_r1.button));
    });
    i022.\u0275\u0275elementStart(3, "p");
    i022.\u0275\u0275text(4);
    i022.\u0275\u0275elementEnd();
    i022.\u0275\u0275template(5, EventCardBuilderButtonComponent_div_3_img_5_Template, 1, 1, "img", 13);
    i022.\u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = i022.\u0275\u0275nextContext();
    i022.\u0275\u0275advance();
    i022.\u0275\u0275property("ngClass", i022.\u0275\u0275pureFunction1(5, _c32, ctx_r1.button.enabled === false));
    i022.\u0275\u0275advance();
    i022.\u0275\u0275property("disabled", ctx_r1.button.enabled === false)("ngClass", i022.\u0275\u0275pureFunction2(7, _c04, ctx_r1._imageUrl ? "image-button" : "validation-button", ctx_r1.button.enabled === true ? "element-clickable" : ""));
    i022.\u0275\u0275advance(2);
    i022.\u0275\u0275textInterpolate(ctx_r1.button.caption);
    i022.\u0275\u0275advance();
    i022.\u0275\u0275property("ngIf", ctx_r1._imageUrl);
  }
}
var EventCardBuilderButtonComponent = class _EventCardBuilderButtonComponent extends ButtonComponent {
  constructor() {
    super(...arguments);
    this.eventCardBuilderButtonClicked = new EventEmitter4();
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275EventCardBuilderButtonComponent_BaseFactory;
      return function EventCardBuilderButtonComponent_Factory(t) {
        return (\u0275EventCardBuilderButtonComponent_BaseFactory || (\u0275EventCardBuilderButtonComponent_BaseFactory = i022.\u0275\u0275getInheritedFactory(_EventCardBuilderButtonComponent)))(t || _EventCardBuilderButtonComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i022.\u0275\u0275defineComponent({ type: _EventCardBuilderButtonComponent, selectors: [["app-event-card-builder-button"]], inputs: { button: "button" }, outputs: { eventCardBuilderButtonClicked: "eventCardBuilderButtonClicked" }, standalone: true, features: [i022.\u0275\u0275InheritDefinitionFeature, i022.\u0275\u0275StandaloneFeature], decls: 4, vars: 3, consts: [[1, "wrapper-button"], ["class", "main", 3, "disabled", "hovered", "ngClass", "mouseenter", "mouseleave", "click", 4, "ngIf"], ["class", "shadow", 3, "hovered", "ngClass", 4, "ngIf"], ["class", "wrapper-button", 4, "ngIf"], [1, "main", 3, "mouseenter", "mouseleave", "click", "disabled", "ngClass"], [1, "wrapper-elements"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"], [3, "rawText"], ["class", "button-border", 3, "ngClass", "hovered", 4, "ngIf"], [1, "button-border", 3, "ngClass"], [1, "shadow", 3, "ngClass"], [3, "click", "disabled", "ngClass"], ["alt", "", 3, "src", 4, "ngIf"], ["alt", "", 3, "src"]], template: function EventCardBuilderButtonComponent_Template(rf, ctx) {
      if (rf & 1) {
        i022.\u0275\u0275elementStart(0, "div", 0);
        i022.\u0275\u0275template(1, EventCardBuilderButtonComponent_button_1_Template, 7, 22, "button", 1)(2, EventCardBuilderButtonComponent_div_2_Template, 1, 5, "div", 2);
        i022.\u0275\u0275elementEnd();
        i022.\u0275\u0275template(3, EventCardBuilderButtonComponent_div_3_Template, 6, 10, "div", 3);
      }
      if (rf & 2) {
        i022.\u0275\u0275advance();
        i022.\u0275\u0275property("ngIf", !ctx._imageUrl);
        i022.\u0275\u0275advance();
        i022.\u0275\u0275property("ngIf", ctx.shape === "hex_floating");
        i022.\u0275\u0275advance();
        i022.\u0275\u0275property("ngIf", ctx._imageUrl);
      }
    }, dependencies: [CommonModule5, i13.NgClass, i13.NgIf, TextWithImageComponent], styles: ['\n\n.wrapper-button[_ngcontent-%COMP%] {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n.main[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  border: 0;\n  height: 100%;\n  background: transparent;\n}\n.main.hovered.enabled[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.main.disabled[_ngcontent-%COMP%], .main[_ngcontent-%COMP%]   .hovered.disabled[_ngcontent-%COMP%] {\n  filter: grayscale(40%);\n}\n.main.disabled[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%], .main[_ngcontent-%COMP%]   .hovered.disabled[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\n  filter: grayscale(50%);\n}\n.main[_ngcontent-%COMP%]  app-text-with-image .text-tag {\n  max-width: 100%;\n  max-height: 25px;\n  font-weight: bold;\n}\n.main.enabled[_ngcontent-%COMP%]  app-text-with-image p {\n  font-weight: 550;\n  font-size: 100%;\n}\n.main.disabled[_ngcontent-%COMP%]  app-text-with-image p {\n  color: rgb(61, 61, 61);\n  font-size: 100%;\n}\n.wrapper-elements[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n.gradiant-mask--hex[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--hex[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--hex[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.button-gradiant-background--hex[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--small[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--large[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--hex_floating[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-main--hex[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--hex[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 25%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--hex_floating[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--hex_floating[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 25%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--small[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--small[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 15%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--large[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--large[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 10%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--hex_floating.enabled[_ngcontent-%COMP%] {\n  background: transparent;\n}\n.button-background--hex[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--small[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--large[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--hex_floating[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--hex_floating[_ngcontent-%COMP%] {\n  background: rgba(181, 128, 108, 0.8);\n}\n.button-background--hex_floating.enabled[_ngcontent-%COMP%]::before {\n  content: "";\n  position: absolute;\n  inset: 0;\n  opacity: 1;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-background--hex_floating.enabled[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background: rgba(255, 255, 255, 0.2);\n  opacity: 0;\n  transition: opacity 0.15s ease;\n  z-index: 10;\n}\n.button-background--hex_floating.hovered[_ngcontent-%COMP%]::before {\n  opacity: 0;\n}\n.button-background--hex_floating.hovered[_ngcontent-%COMP%]::after {\n  opacity: 1;\n}\n.button-shape--hex[_ngcontent-%COMP%], .button-shape--hex_floating[_ngcontent-%COMP%] {\n  aspect-ratio: 1.15/1;\n}\n.button-shape--small[_ngcontent-%COMP%] {\n  aspect-ratio: 3.5/1;\n}\n.button-shape--large[_ngcontent-%COMP%] {\n  aspect-ratio: 5/1;\n}\n.button-shape--hex[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n}\n.button-shape--hex_floating[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n}\n.button-shape--small[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 15% 0%, calc(100% - 15%) 0%, 100% 50%, calc(100% - 15%) 100%, 15% 100%);\n  clip-path: polygon(0% 50%, 15% 0%, calc(100% - 15%) 0%, 100% 50%, calc(100% - 15%) 100%, 15% 100%);\n}\n.button-shape--large[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 10% 0%, calc(100% - 10%) 0%, 100% 50%, calc(100% - 10%) 100%, 10% 100%);\n  clip-path: polygon(0% 50%, 10% 0%, calc(100% - 10%) 0%, 100% 50%, calc(100% - 10%) 100%, 10% 100%);\n}\n.button-border[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%, 0% 50%, 3px 50%, calc(25% + 1.5px) calc(100% - 3px), calc(100% - (25% + 1.5px)) calc(100% - 3px), calc(100% - 3px) 50%, calc(100% - (25% + 1.5px)) 3px, calc(25% + 1.5px) 3px, 3px 50%);\n}\n.button-border.enabled[_ngcontent-%COMP%]::before {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background-image:\n    linear-gradient(\n      135deg,\n      rgb(215, 215, 215) 30%,\n      rgb(147, 147, 147) 60%,\n      rgb(234, 234, 234) 90%);\n  opacity: 1;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-border.enabled[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background-image:\n    linear-gradient(\n      to right,\n      var(--color-ares-orange) 0%,\n      var(--color-ares-orange) 100%);\n  opacity: 0;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-border.enabled.hovered[_ngcontent-%COMP%]::before {\n  opacity: 0;\n}\n.button-border.enabled.hovered[_ngcontent-%COMP%]::after {\n  opacity: 1;\n}\n.shadow[_ngcontent-%COMP%] {\n  z-index: -1;\n  position: absolute;\n  height: 100%;\n  aspect-ratio: 1;\n  background: transparent;\n  border-radius: 50%;\n}\n.shadow.hovered.enabled[_ngcontent-%COMP%] {\n  box-shadow: 0px 0px 15px 10px rgba(255, 119, 0, 0.3);\n}\n.shadow.enabled[_ngcontent-%COMP%] {\n  box-shadow: 0px 0px 15px 10px rgba(196, 196, 196, 0.2);\n}\n/*# sourceMappingURL=button.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i022.\u0275setClassDebugInfo(EventCardBuilderButtonComponent, { className: "EventCardBuilderButtonComponent", filePath: "src\\app\\components\\tools\\button\\event-card-builder-button.component.ts", lineNumber: 17 });
})();

// src/app/components/tools/layouts/top-decoration/top-decoration.component.ts
import { Component as Component9 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i023 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var TopDecorationComponent = class _TopDecorationComponent {
  static {
    this.\u0275fac = function TopDecorationComponent_Factory(t) {
      return new (t || _TopDecorationComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i023.\u0275\u0275defineComponent({ type: _TopDecorationComponent, selectors: [["app-top-decoration"]], standalone: true, features: [i023.\u0275\u0275StandaloneFeature], decls: 11, vars: 0, consts: [[1, "decoration"], [1, "main"], [1, "box-parent"], [1, "top-card-decoration", "shape"], ["xmlns", "http://www.w3.org/2000/svg", 1, "flt-svg"], ["id", "flt_tag"], ["in", "SourceGraphic", "stdDeviation", "2", "result", "blur"], ["in", "blur", "mode", "matrix", "values", "1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9", "result", "flt_tag"], ["in", "SourceGraphic", "in2", "flt_tag", "operator", "atop"], [1, "colored-part"]], template: function TopDecorationComponent_Template(rf, ctx) {
      if (rf & 1) {
        i023.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2);
        i023.\u0275\u0275element(3, "div", 3);
        i023.\u0275\u0275namespaceSVG();
        i023.\u0275\u0275elementStart(4, "svg", 4)(5, "defs")(6, "filter", 5);
        i023.\u0275\u0275element(7, "feGaussianBlur", 6)(8, "feColorMatrix", 7)(9, "feComposite", 8);
        i023.\u0275\u0275elementEnd()()()()();
        i023.\u0275\u0275namespaceHTML();
        i023.\u0275\u0275element(10, "div", 9);
        i023.\u0275\u0275elementEnd();
      }
    }, styles: ['\n\n.flt-svg[_ngcontent-%COMP%] {\n  visibility: hidden;\n  position: absolute;\n  width: 0px;\n  height: 0px;\n}\n.box-parent[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: relative;\n  filter: url(#flt_tag);\n  height: 100%;\n  width: 100%;\n}\n.shape[_ngcontent-%COMP%] {\n  clip-path: polygon(0% 100%, 0% 80%, 10% 40%, 30% 40%, 40% 0%, 60% 0%, 70% 40%, 90% 40%, 100% 80%, 100% 100%);\n  height: 100%;\n  width: 100%;\n}\n.top-card-decoration[_ngcontent-%COMP%] {\n  position: absolute;\n  z-index: 2;\n  top: 0;\n  left: 0;\n  background-color: white;\n  margin: 0 auto;\n}\n.main[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n}\n.main[_ngcontent-%COMP%]::before, .main[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  z-index: 0;\n  box-shadow: 0 0 10px 0px rgb(0, 0, 0);\n}\n.main[_ngcontent-%COMP%]::before {\n  top: 5%;\n  width: 33%;\n  height: 60%;\n  border-radius: 50%;\n}\n.main[_ngcontent-%COMP%]::after {\n  width: 95%;\n  height: 100%;\n  top: 40%;\n  border-top-left-radius: 40%;\n  border-top-right-radius: 40%;\n}\n.decoration[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n}\n.colored-part[_ngcontent-%COMP%] {\n  z-index: 10;\n  position: absolute;\n  top: 80%;\n  width: 70%;\n  height: 10%;\n  background-image:\n    linear-gradient(\n      to right,\n      white 0%,\n      var(--color-ares-orange) 10%,\n      var(--color-ares-orange) 90%,\n      white 100%);\n}\n/*# sourceMappingURL=top-decoration.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i023.\u0275setClassDebugInfo(TopDecorationComponent, { className: "TopDecorationComponent", filePath: "src\\app\\components\\tools\\layouts\\top-decoration\\top-decoration.component.ts", lineNumber: 10 });
})();

// src/app/components/cards/card-builder/card-builder.component.ts
import * as i024 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i14 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c05 = (a0) => [a0];
function CardBuilderComponent_app_project_card_list_4_Template(rf, ctx) {
  if (rf & 1) {
    i024.\u0275\u0275element(0, "app-project-card-list", 10);
  }
  if (rf & 2) {
    const ctx_r0 = i024.\u0275\u0275nextContext();
    i024.\u0275\u0275property("cardList", i024.\u0275\u0275pureFunction1(1, _c05, ctx_r0.cardBuilder.getSelectedCard()));
  }
}
function CardBuilderComponent_div_7_app_event_card_builder_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = i024.\u0275\u0275getCurrentView();
    i024.\u0275\u0275elementStart(0, "app-event-card-builder-button", 13);
    i024.\u0275\u0275listener("buttonClicked", function CardBuilderComponent_div_7_app_event_card_builder_button_1_Template_app_event_card_builder_button_buttonClicked_0_listener() {
      i024.\u0275\u0275restoreView(_r2);
      const ctx_r0 = i024.\u0275\u0275nextContext(2);
      return i024.\u0275\u0275resetView(ctx_r0.cardBuilderButtonClicked(ctx_r0.cardBuilder.getButtons()[0]));
    });
    i024.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = i024.\u0275\u0275nextContext(2);
    i024.\u0275\u0275property("button", ctx_r0.cardBuilder.getButtons()[0])("shape", "large");
  }
}
function CardBuilderComponent_div_7_app_event_card_builder_button_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = i024.\u0275\u0275getCurrentView();
    i024.\u0275\u0275elementStart(0, "app-event-card-builder-button", 13);
    i024.\u0275\u0275listener("buttonClicked", function CardBuilderComponent_div_7_app_event_card_builder_button_2_Template_app_event_card_builder_button_buttonClicked_0_listener() {
      i024.\u0275\u0275restoreView(_r3);
      const ctx_r0 = i024.\u0275\u0275nextContext(2);
      return i024.\u0275\u0275resetView(ctx_r0.cardBuilderButtonClicked(ctx_r0.cardBuilder.getButtons()[1]));
    });
    i024.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = i024.\u0275\u0275nextContext(2);
    i024.\u0275\u0275property("button", ctx_r0.cardBuilder.getButtons()[1])("shape", "large");
  }
}
function CardBuilderComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    i024.\u0275\u0275elementStart(0, "div", 11);
    i024.\u0275\u0275template(1, CardBuilderComponent_div_7_app_event_card_builder_button_1_Template, 1, 2, "app-event-card-builder-button", 12)(2, CardBuilderComponent_div_7_app_event_card_builder_button_2_Template, 1, 2, "app-event-card-builder-button", 12);
    i024.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = i024.\u0275\u0275nextContext();
    i024.\u0275\u0275advance();
    i024.\u0275\u0275property("ngIf", ctx_r0.cardBuilder.getButtons()[0].enabled);
    i024.\u0275\u0275advance();
    i024.\u0275\u0275property("ngIf", ctx_r0.cardBuilder.getButtons()[1].enabled);
  }
}
function CardBuilderComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = i024.\u0275\u0275getCurrentView();
    i024.\u0275\u0275elementStart(0, "div", 14)(1, "app-event-card-builder-button", 13);
    i024.\u0275\u0275listener("buttonClicked", function CardBuilderComponent_div_8_Template_app_event_card_builder_button_buttonClicked_1_listener() {
      i024.\u0275\u0275restoreView(_r4);
      const ctx_r0 = i024.\u0275\u0275nextContext();
      return i024.\u0275\u0275resetView(ctx_r0.cardBuilderButtonClicked(ctx_r0.cardBuilder.getButtons()[2]));
    });
    i024.\u0275\u0275elementEnd();
    i024.\u0275\u0275elementStart(2, "app-event-card-builder-button", 13);
    i024.\u0275\u0275listener("buttonClicked", function CardBuilderComponent_div_8_Template_app_event_card_builder_button_buttonClicked_2_listener() {
      i024.\u0275\u0275restoreView(_r4);
      const ctx_r0 = i024.\u0275\u0275nextContext();
      return i024.\u0275\u0275resetView(ctx_r0.cardBuilderButtonClicked(ctx_r0.cardBuilder.getButtons()[3]));
    });
    i024.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = i024.\u0275\u0275nextContext();
    i024.\u0275\u0275advance();
    i024.\u0275\u0275property("button", ctx_r0.cardBuilder.getButtons()[2])("shape", "small");
    i024.\u0275\u0275advance();
    i024.\u0275\u0275property("button", ctx_r0.cardBuilder.getButtons()[3])("shape", "small");
  }
}
function CardBuilderComponent_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = i024.\u0275\u0275getCurrentView();
    i024.\u0275\u0275elementContainerStart(0);
    i024.\u0275\u0275element(1, "div", 15);
    i024.\u0275\u0275elementStart(2, "div", 16)(3, "div", 17)(4, "h2");
    i024.\u0275\u0275text(5, "Or");
    i024.\u0275\u0275elementEnd();
    i024.\u0275\u0275elementStart(6, "div", 6)(7, "app-event-card-builder-button", 13);
    i024.\u0275\u0275listener("buttonClicked", function CardBuilderComponent_ng_container_9_Template_app_event_card_builder_button_buttonClicked_7_listener() {
      i024.\u0275\u0275restoreView(_r5);
      const ctx_r0 = i024.\u0275\u0275nextContext();
      return i024.\u0275\u0275resetView(ctx_r0.cardBuilderButtonClicked(ctx_r0.cardBuilder.getButtons()[4]));
    });
    i024.\u0275\u0275elementEnd()()()();
    i024.\u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = i024.\u0275\u0275nextContext();
    i024.\u0275\u0275advance(7);
    i024.\u0275\u0275property("button", ctx_r0.cardBuilder.getButtons()[4])("shape", "small");
  }
}
var CardBuilderComponent = class _CardBuilderComponent {
  constructor() {
    this.cardBuilderListButtonClicked = new EventEmitter5();
  }
  cardBuilderButtonClicked(button) {
    this.cardBuilderListButtonClicked.emit(button);
  }
  ngOnInit() {
    console.log("the builder:", this.cardBuilder, "option:", this.option, "event:", this.event, "filter:", this.projectFilterType);
  }
  static {
    this.\u0275fac = function CardBuilderComponent_Factory(t) {
      return new (t || _CardBuilderComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i024.\u0275\u0275defineComponent({ type: _CardBuilderComponent, selectors: [["app-card-builder"]], inputs: { cardBuilder: "cardBuilder", option: "option", projectFilterType: "projectFilterType", event: "event", eventId: "eventId" }, outputs: { cardBuilderListButtonClicked: "cardBuilderListButtonClicked" }, standalone: true, features: [i024.\u0275\u0275StandaloneFeature], decls: 10, vars: 5, consts: [[1, "wrapper-main"], [1, "wrapper-card-builder", "ares-background", "ares-border"], [1, "inner-decoration--side"], [1, "selected-card-zone", 3, "ngClass"], ["class", "play-card-zone-list", 3, "cardList", 4, "ngIf"], [1, "wrapper-buton-zone"], [1, "wrapper-buttons"], ["class", "wrapper-select-button", 4, "ngIf"], ["class", "wrapper-build-button", 4, "ngIf"], [4, "ngIf"], [1, "play-card-zone-list", 3, "cardList"], [1, "wrapper-select-button"], [3, "button", "shape", "buttonClicked", 4, "ngIf"], [3, "buttonClicked", "button", "shape"], [1, "wrapper-build-button"], [1, "inner-decoration--separator"], [1, "wrapper-alternative"], [1, "wrapper-alternative-inner"]], template: function CardBuilderComponent_Template(rf, ctx) {
      if (rf & 1) {
        i024.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        i024.\u0275\u0275element(2, "div", 2);
        i024.\u0275\u0275elementStart(3, "div", 3);
        i024.\u0275\u0275template(4, CardBuilderComponent_app_project_card_list_4_Template, 1, 3, "app-project-card-list", 4);
        i024.\u0275\u0275elementEnd();
        i024.\u0275\u0275elementStart(5, "div", 5)(6, "div", 6);
        i024.\u0275\u0275template(7, CardBuilderComponent_div_7_Template, 3, 2, "div", 7)(8, CardBuilderComponent_div_8_Template, 3, 4, "div", 8);
        i024.\u0275\u0275elementEnd();
        i024.\u0275\u0275template(9, CardBuilderComponent_ng_container_9_Template, 8, 2, "ng-container", 9);
        i024.\u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        i024.\u0275\u0275advance(3);
        i024.\u0275\u0275property("ngClass", "filter-type-" + ctx.projectFilterType);
        i024.\u0275\u0275advance();
        i024.\u0275\u0275property("ngIf", ctx.cardBuilder.getSelectedCard() != void 0);
        i024.\u0275\u0275advance(3);
        i024.\u0275\u0275property("ngIf", ctx.cardBuilder.getButtons()[0].enabled || ctx.cardBuilder.getButtons()[1].enabled);
        i024.\u0275\u0275advance();
        i024.\u0275\u0275property("ngIf", ctx.cardBuilder.getButtons()[2].enabled || ctx.cardBuilder.getButtons()[3].enabled);
        i024.\u0275\u0275advance();
        i024.\u0275\u0275property("ngIf", ctx.cardBuilder.getOption() != void 0);
      }
    }, dependencies: [
      CommonModule6,
      i14.NgClass,
      i14.NgIf,
      EventCardBuilderButtonComponent,
      ProjectCardListComponent
    ], styles: ['\n\n.wrapper-card-builder[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: calc(var(--card-width) * 1.05 + 3px + 4px);\n  padding: calc(var(--card-height) * 0.06);\n}\n.wrapper-buton-zone[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin-top: calc(var(--card-height) * 0.06);\n}\n.filter-type-development[_ngcontent-%COMP%] {\n  background:\n    linear-gradient(\n      130deg,\n      var(--color-ares-green-light3) 0%,\n      var(--color-ares-green) 35%,\n      var(--color-ares-green-dark4) 80%);\n}\n.filter-type-construction[_ngcontent-%COMP%] {\n  background:\n    linear-gradient(\n      130deg,\n      var(--color-ares-blue-dark0) 49%,\n      black 50%,\n      var(--color-ares-red-dark) 51%);\n  opacity: 0.9;\n}\n.selected-card-zone[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: 0;\n  left: 0;\n  z-index: 0;\n  position: relative;\n  width: calc(var(--card-width) * 1.05);\n  height: calc(var(--card-height) * 1.05);\n  border-radius: calc(var(--card-height) * 0.05);\n  border: black solid 3px;\n  overflow: hidden;\n  box-shadow: inset 0 0 calc(var(--card-height) * 0.07) calc(var(--card-height) * 0.05) rgb(0, 0, 0);\n}\n.selected-card-zone[_ngcontent-%COMP%]:before {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.1);\n}\n.wrapper-buttons[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: end;\n  height: calc(var(--card-height) * 0.1);\n  max-width: var(--card-width);\n}\n.wrapper-select-button[_ngcontent-%COMP%], .wrapper-build-button[_ngcontent-%COMP%], .wrapper-alternative[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n}\n.wrapper-alternative-inner[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 70%;\n}\n.button-select-card[_ngcontent-%COMP%], .button-cancel-card[_ngcontent-%COMP%], .button-build-card[_ngcontent-%COMP%], .button-discard-card[_ngcontent-%COMP%] {\n  z-index: 1;\n}\napp-event-card-builder-button[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n}\napp-project-card-list[_ngcontent-%COMP%] {\n  position: relative;\n  z-index: 10;\n  width: var(--card-width);\n  height: var(--card-height);\n}\n.wrapper-main[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  align-items: center;\n  position: relative;\n}\n.wrapper-top-decoration[_ngcontent-%COMP%] {\n  position: relative;\n  top: calc(var(--card-height) * 0.07 * 0.2);\n  left: 0;\n  height: calc(var(--card-height) * 0.07);\n  width: 80%;\n}\n.inner-decoration--side[_ngcontent-%COMP%] {\n  position: absolute;\n  width: calc(100% - var(--card-height) * 0.06);\n  height: calc(var(--card-height) * 1.05 + var(--card-height) * 0.06);\n  border-left: solid 2px;\n  border-right: solid 2px;\n  border-image:\n    linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0) 0%,\n      var(--color-ares-orange) 5%,\n      var(--color-ares-orange) 95%,\n      rgba(255, 255, 255, 0)) 1;\n  top: calc(var(--card-height) * 0.06 / 2);\n  left: calc(var(--card-height) * 0.06 / 2 - 2px);\n}\n.inner-decoration--separator[_ngcontent-%COMP%] {\n  z-index: 10;\n  width: 100%;\n  margin-top: calc(var(--card-height) * 0.06 / 2);\n  margin-bottom: calc(var(--card-height) * 0.06 / 2);\n  border-top: solid 2px;\n  border-image:\n    linear-gradient(\n      to right,\n      rgba(255, 255, 255, 0) 0%,\n      var(--color-ares-orange) 5%,\n      var(--color-ares-orange) 95%,\n      rgba(255, 255, 255, 0)) 1;\n}\n/*# sourceMappingURL=card-builder.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i024.\u0275setClassDebugInfo(CardBuilderComponent, { className: "CardBuilderComponent", filePath: "src\\app\\components\\cards\\card-builder\\card-builder.component.ts", lineNumber: 23 });
})();

// src/app/components/cards/card-builder-list/card-builder-list.component.ts
import { CommonModule as CommonModule7 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i025 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i15 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
function CardBuilderListComponent_app_card_builder_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i025.\u0275\u0275getCurrentView();
    i025.\u0275\u0275elementStart(0, "app-card-builder", 2);
    i025.\u0275\u0275listener("cardBuilderListButtonClicked", function CardBuilderListComponent_app_card_builder_1_Template_app_card_builder_cardBuilderListButtonClicked_0_listener($event) {
      i025.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i025.\u0275\u0275nextContext();
      return i025.\u0275\u0275resetView(ctx_r1.cardBuilderListButtonClicked($event));
    });
    i025.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const builder_r3 = ctx.$implicit;
    const ctx_r1 = i025.\u0275\u0275nextContext();
    i025.\u0275\u0275property("cardBuilder", builder_r3)("projectFilterType", ctx_r1.currentEvent.cardSelector.filter == null ? null : ctx_r1.currentEvent.cardSelector.filter.type);
  }
}
var CardBuilderListComponent = class _CardBuilderListComponent {
  constructor() {
    this.eventCardBuilderListButtonClicked = new EventEmitter6();
  }
  ngOnInit() {
    this.updateEvent();
  }
  ngOnChanges(changes) {
    if (changes["eventId"] && changes["eventId"].currentValue) {
      this.updateEvent();
    }
  }
  ngDoCheck() {
  }
  updateEvent() {
    this.currentEvent = this.event;
    console.log("event:", this.event);
  }
  cardBuilderListButtonClicked(button) {
    this.currentEvent.cardBuilderIdHavingFocus = button.parentCardBuilderId;
    this.eventCardBuilderListButtonClicked.emit(button);
  }
  static {
    this.\u0275fac = function CardBuilderListComponent_Factory(t) {
      return new (t || _CardBuilderListComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i025.\u0275\u0275defineComponent({ type: _CardBuilderListComponent, selectors: [["app-card-builder-list"]], inputs: { event: "event", eventId: "eventId" }, outputs: { eventCardBuilderListButtonClicked: "eventCardBuilderListButtonClicked" }, standalone: true, features: [i025.\u0275\u0275NgOnChangesFeature, i025.\u0275\u0275StandaloneFeature], decls: 2, vars: 1, consts: [[1, "wrapper-main"], [3, "cardBuilder", "projectFilterType", "cardBuilderListButtonClicked", 4, "ngFor", "ngForOf"], [3, "cardBuilderListButtonClicked", "cardBuilder", "projectFilterType"]], template: function CardBuilderListComponent_Template(rf, ctx) {
      if (rf & 1) {
        i025.\u0275\u0275elementStart(0, "div", 0);
        i025.\u0275\u0275template(1, CardBuilderListComponent_app_card_builder_1_Template, 1, 2, "app-card-builder", 1);
        i025.\u0275\u0275elementEnd();
      }
      if (rf & 2) {
        i025.\u0275\u0275advance();
        i025.\u0275\u0275property("ngForOf", ctx.currentEvent.cardBuilder);
      }
    }, dependencies: [CommonModule7, i15.NgForOf, CardBuilderComponent], styles: ["\n\n.wrapper-main[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-around;\n  width: 100%;\n}\n/*# sourceMappingURL=card-builder-list.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i025.\u0275setClassDebugInfo(CardBuilderListComponent, { className: "CardBuilderListComponent", filePath: "src\\app\\components\\cards\\card-builder-list\\card-builder-list.component.ts", lineNumber: 17 });
})();

// src/app/components/cards/phase/phase-card-upgrade-selector/phase-card-upgrade-selector.component.ts
import { Component as Component14, Input as Input11, ViewChildren as ViewChildren3 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule10 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";

// src/app/components/cards/phase/phase-card-upgrade-list/phase-card-upgrade-list.component.ts
import { Component as Component13, Input as Input10, Output as Output8, EventEmitter as EventEmitter8, ViewChildren as ViewChildren2 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule9 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";

// src/app/components/cards/phase/phase-card/phase-card.component.ts
import { Component as Component12, Input as Input9, Output as Output7 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule8 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import { EventEmitter as EventEmitter7 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i026 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i16 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c06 = (a0, a1, a2) => [a0, a1, a2];
function PhaseCardComponent_div_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i026.\u0275\u0275getCurrentView();
    i026.\u0275\u0275elementStart(0, "div", 4)(1, "button", 5);
    i026.\u0275\u0275listener("click", function PhaseCardComponent_div_9_Template_button_click_1_listener() {
      i026.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i026.\u0275\u0275nextContext();
      return i026.\u0275\u0275resetView(ctx_r1.upgrade());
    });
    i026.\u0275\u0275text(2, "Upgrade");
    i026.\u0275\u0275elementEnd()();
  }
}
var PhaseCardComponent = class _PhaseCardComponent extends BaseCardComponent {
  constructor() {
    super(...arguments);
    this.phaseCardLevel = 0;
    this.phaseCardUpgraded = new EventEmitter7();
  }
  ngOnInit() {
    super.ngOnInit();
    if (this.phaseIndex === void 0) {
      this.phaseIndex = 0;
    }
    this.setState();
  }
  upgrade() {
    let newState = Utils.jsonCopy(this.state);
    newState.upgraded = true;
    this.phaseCardUpgraded.emit(this.phaseCard.phaseType);
  }
  refreshState() {
    this.setState();
  }
  setState() {
    this.state.setUpgraded(this.phaseCard.phaseCardUpgraded);
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275PhaseCardComponent_BaseFactory;
      return function PhaseCardComponent_Factory(t) {
        return (\u0275PhaseCardComponent_BaseFactory || (\u0275PhaseCardComponent_BaseFactory = i026.\u0275\u0275getInheritedFactory(_PhaseCardComponent)))(t || _PhaseCardComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i026.\u0275\u0275defineComponent({ type: _PhaseCardComponent, selectors: [["app-phase-card"]], inputs: { phaseCardLevel: "phaseCardLevel", phaseIndex: "phaseIndex", phaseCard: "phaseCard" }, outputs: { phaseCardUpgraded: "phaseCardUpgraded" }, standalone: true, features: [i026.\u0275\u0275InheritDefinitionFeature, i026.\u0275\u0275StandaloneFeature], decls: 10, vars: 11, consts: [[1, "wrapper-main"], [1, "wrapper-selection-border", 3, "ngClass"], [1, "wrapper-phase-card", "ares-card", 3, "ngClass"], ["class", "wrapper-button", 4, "ngIf"], [1, "wrapper-button"], [1, "validation-button", "element-clickable", 3, "click"]], template: function PhaseCardComponent_Template(rf, ctx) {
      if (rf & 1) {
        i026.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "p");
        i026.\u0275\u0275text(4);
        i026.\u0275\u0275elementEnd();
        i026.\u0275\u0275elementStart(5, "p");
        i026.\u0275\u0275text(6);
        i026.\u0275\u0275elementEnd();
        i026.\u0275\u0275elementStart(7, "p");
        i026.\u0275\u0275text(8);
        i026.\u0275\u0275elementEnd()()();
        i026.\u0275\u0275template(9, PhaseCardComponent_div_9_Template, 3, 0, "div", 3);
        i026.\u0275\u0275elementEnd();
      }
      if (rf & 2) {
        i026.\u0275\u0275advance();
        i026.\u0275\u0275property("ngClass", ctx.state.isSelected() === true ? "element-selected-bracket" : "element-not-selected");
        i026.\u0275\u0275advance();
        i026.\u0275\u0275property("ngClass", i026.\u0275\u0275pureFunction3(7, _c06, "phase" + ctx.phaseIndex, ctx.state.isSelectable() ? "element-selectable" : "", ctx.state.isSelected() === true ? "selected" : ""));
        i026.\u0275\u0275advance(2);
        i026.\u0275\u0275textInterpolate(ctx.phaseCard.baseDescription);
        i026.\u0275\u0275advance(2);
        i026.\u0275\u0275textInterpolate(ctx.phaseCard.bonusDescription);
        i026.\u0275\u0275advance(2);
        i026.\u0275\u0275textInterpolate2("upgraded:", ctx.state.isUpgraded(), " upgradable:", ctx.state.isUpgradable(), "");
        i026.\u0275\u0275advance();
        i026.\u0275\u0275property("ngIf", ctx.state.isUpgraded() != true && (ctx.state == null ? null : ctx.state.isUpgradable()) == true);
      }
    }, dependencies: [CommonModule8, i16.NgClass, i16.NgIf], styles: ["\n\n.wrapper-main[_ngcontent-%COMP%] {\n  width: 221.9318181818px;\n  padding: 10px;\n}\n.wrapper-phase-card[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  flex-direction: column;\n  width: 221.9318181818px;\n  height: 310px;\n  border: black solid 1px;\n  border-radius: 5px;\n}\n.wrapper-button[_ngcontent-%COMP%] {\n  margin-top: 4vh;\n}\n.phase0[_ngcontent-%COMP%] {\n  border: green solid 2px;\n}\n.phase1[_ngcontent-%COMP%] {\n  border: red solid 2px;\n  border-image:\n    linear-gradient(\n      to right,\n      blue,\n      red) 10;\n}\n.phase2[_ngcontent-%COMP%] {\n  border: blue solid 2px;\n}\n.phase3[_ngcontent-%COMP%] {\n  border: orange solid 2px;\n}\n.phase4[_ngcontent-%COMP%] {\n  border: yellow solid 2px;\n}\n.wrapper-selection-border[_ngcontent-%COMP%] {\n  z-index: -1;\n  border-radius: 16.5px;\n  height: 330px;\n  width: 241.9318181818px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n/*# sourceMappingURL=phase-card.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i026.\u0275setClassDebugInfo(PhaseCardComponent, { className: "PhaseCardComponent", filePath: "src\\app\\components\\cards\\phase\\phase-card\\phase-card.component.ts", lineNumber: 20 });
})();

// src/app/components/cards/phase/phase-card-upgrade-list/phase-card-upgrade-list.component.ts
import * as i027 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i22 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c07 = ["phaseCards"];
function PhaseCardUpgradeListComponent_app_phase_card_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i027.\u0275\u0275getCurrentView();
    i027.\u0275\u0275elementStart(0, "app-phase-card", 4, 0);
    i027.\u0275\u0275listener("phaseCardUpgraded", function PhaseCardUpgradeListComponent_app_phase_card_2_Template_app_phase_card_phaseCardUpgraded_0_listener($event) {
      i027.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i027.\u0275\u0275nextContext();
      return i027.\u0275\u0275resetView(ctx_r1.phaseCardUpgraded($event));
    });
    i027.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const phaseCardIndex_r3 = ctx.$implicit;
    const ctx_r1 = i027.\u0275\u0275nextContext();
    i027.\u0275\u0275property("phaseIndex", ctx_r1.phaseIndex)("phaseCardLevel", phaseCardIndex_r3)("stateFromParent", ctx_r1.phaseCardState[phaseCardIndex_r3])("initialState", ctx_r1.cardInitialState)("phaseCard", ctx_r1.phaseCardModels[phaseCardIndex_r3])("stateFromParent", ctx_r1.stateFromParent);
  }
}
var PhaseCardUpgradeListComponent = class _PhaseCardUpgradeListComponent {
  constructor(gameStateService) {
    this.gameStateService = gameStateService;
    this.upgradeFinished = false;
    this.cardUpgraded = new EventEmitter8();
    this.phaseCardState = [];
    this.phaseCardModels = [];
    this.loaded = false;
  }
  ngOnInit() {
    this.clientPlayerId = this.gameStateService.clientPlayerId;
    this.phaseCardLevelList = [0, 1, 2];
    this.phaseCardModels = this.phaseGroup.phaseCards;
    this.loaded = true;
    this.cardInitialState = Utils.toFullCardState({ upgradable: this.canUpgrade() });
    this.setState();
  }
  refreshPhaseGroup() {
    for (let card of this.phaseCards) {
      card.refreshState();
    }
  }
  setUpgradeFinished() {
    this.upgradeFinished = true;
    this.stateFromParent = Utils.toFullCardState({ upgradable: this.canUpgrade() });
    console.log(this.phaseIndex);
  }
  canUpgrade() {
    if (this.upgradeFinished) {
      return false;
    }
    if (this.phaseGroup.getPhaseIsUpgraded()) {
      return false;
    }
    return true;
  }
  setState() {
    if (this.loaded === false) {
      return;
    }
    this.stateFromParent = Utils.toFullCardState({ upgradable: this.canUpgrade() });
  }
  phaseCardUpgraded(upgradeType) {
    this.cardUpgraded.emit();
    this.gameStateService.setClientPhaseCardUpgraded(upgradeType);
    this.setState();
  }
  static {
    this.\u0275fac = function PhaseCardUpgradeListComponent_Factory(t) {
      return new (t || _PhaseCardUpgradeListComponent)(i027.\u0275\u0275directiveInject(GameState));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i027.\u0275\u0275defineComponent({ type: _PhaseCardUpgradeListComponent, selectors: [["app-phase-card-upgrade-list"]], viewQuery: function PhaseCardUpgradeListComponent_Query(rf, ctx) {
      if (rf & 1) {
        i027.\u0275\u0275viewQuery(_c07, 5);
      }
      if (rf & 2) {
        let _t;
        i027.\u0275\u0275queryRefresh(_t = i027.\u0275\u0275loadQuery()) && (ctx.phaseCards = _t);
      }
    }, inputs: { phaseIndex: "phaseIndex", phaseGroup: "phaseGroup", upgradeFinished: "upgradeFinished" }, outputs: { cardUpgraded: "cardUpgraded" }, standalone: true, features: [i027.\u0275\u0275StandaloneFeature], decls: 6, vars: 4, consts: [["phaseCards", ""], [1, "wrapper-main"], [1, "wrapper-phase-card-zone", "ares-background"], [3, "phaseIndex", "phaseCardLevel", "stateFromParent", "initialState", "phaseCard", "phaseCardUpgraded", 4, "ngFor", "ngForOf"], [3, "phaseCardUpgraded", "phaseIndex", "phaseCardLevel", "stateFromParent", "initialState", "phaseCard"]], template: function PhaseCardUpgradeListComponent_Template(rf, ctx) {
      if (rf & 1) {
        i027.\u0275\u0275elementStart(0, "div", 1)(1, "div", 2);
        i027.\u0275\u0275template(2, PhaseCardUpgradeListComponent_app_phase_card_2_Template, 2, 6, "app-phase-card", 3);
        i027.\u0275\u0275elementEnd()();
        i027.\u0275\u0275elementStart(3, "p");
        i027.\u0275\u0275text(4);
        i027.\u0275\u0275pipe(5, "json");
        i027.\u0275\u0275elementEnd();
      }
      if (rf & 2) {
        i027.\u0275\u0275advance(2);
        i027.\u0275\u0275property("ngForOf", ctx.phaseCardLevelList);
        i027.\u0275\u0275advance(2);
        i027.\u0275\u0275textInterpolate1("state: ", i027.\u0275\u0275pipeBind1(5, 2, ctx.cardInitialState), "");
      }
    }, dependencies: [CommonModule9, i22.NgForOf, i22.JsonPipe, PhaseCardComponent], styles: ["\n\n.wrapper-main[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n}\n.wrapper-phase-card-zone[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 50%;\n  padding: 20px;\n}\n/*# sourceMappingURL=phase-card-upgrade-list.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i027.\u0275setClassDebugInfo(PhaseCardUpgradeListComponent, { className: "PhaseCardUpgradeListComponent", filePath: "src\\app\\components\\cards\\phase\\phase-card-upgrade-list\\phase-card-upgrade-list.component.ts", lineNumber: 22 });
})();

// src/app/components/cards/phase/phase-card-upgrade-selector/phase-card-upgrade-selector.component.ts
import * as i028 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i23 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c08 = ["phaseUpgradeList"];
function PhaseCardUpgradeSelectorComponent_h1_2_Template(rf, ctx) {
  if (rf & 1) {
    i028.\u0275\u0275elementStart(0, "h1");
    i028.\u0275\u0275text(1);
    i028.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = i028.\u0275\u0275nextContext();
    i028.\u0275\u0275advance();
    i028.\u0275\u0275textInterpolate1("Upgrade up to ", ctx_r0.upgradeNumber, " phase card");
  }
}
function PhaseCardUpgradeSelectorComponent_h1_3_Template(rf, ctx) {
  if (rf & 1) {
    i028.\u0275\u0275elementStart(0, "h1");
    i028.\u0275\u0275text(1, "Change upgraded phase card selection");
    i028.\u0275\u0275elementEnd();
  }
}
function PhaseCardUpgradeSelectorComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = i028.\u0275\u0275getCurrentView();
    i028.\u0275\u0275elementStart(0, "div", 3)(1, "p");
    i028.\u0275\u0275text(2);
    i028.\u0275\u0275elementEnd();
    i028.\u0275\u0275elementStart(3, "app-phase-card-upgrade-list", 4, 0);
    i028.\u0275\u0275listener("cardUpgraded", function PhaseCardUpgradeSelectorComponent_div_4_Template_app_phase_card_upgrade_list_cardUpgraded_3_listener() {
      i028.\u0275\u0275restoreView(_r2);
      const ctx_r0 = i028.\u0275\u0275nextContext();
      return i028.\u0275\u0275resetView(ctx_r0.cardUpgraded());
    });
    i028.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const phaseIndex_r3 = ctx.$implicit;
    const ctx_r0 = i028.\u0275\u0275nextContext();
    i028.\u0275\u0275advance(2);
    i028.\u0275\u0275textInterpolate1("Phase ", phaseIndex_r3, "");
    i028.\u0275\u0275advance();
    i028.\u0275\u0275property("phaseIndex", phaseIndex_r3)("phaseGroup", ctx_r0.phaseGroups[phaseIndex_r3])("upgradeFinished", ctx_r0.upgradeNumber <= 0);
  }
}
var PhaseCardUpgradeSelectorComponent = class _PhaseCardUpgradeSelectorComponent {
  constructor(gameStateService) {
    this.gameStateService = gameStateService;
    this.upgradeNumber = 0;
  }
  ngOnInit() {
    this._currentEvent = this.event;
    this.phaseList = this._currentEvent.phaseCardUpgradeList ?? [0, 1, 2, 3, 4];
    this.upgradeNumber = this._currentEvent.phaseCardUpgradeQuantity ?? 0;
    this.gameStateService.clientState.subscribe((state) => this.stateUpdated(state));
  }
  stateUpdated(clientState) {
    this.phaseGroups = clientState.getPhaseGroups();
    console.log(this.phaseGroups);
    if (this.phaseUpgradeList === void 0) {
      return;
    }
    for (let list of this.phaseUpgradeList) {
      list.refreshPhaseGroup();
    }
  }
  cardUpgraded() {
    if (this._currentEvent.phaseCardUpgradeQuantity === void 0) {
      return;
    }
    this._currentEvent.phaseCardUpgradeQuantity -= 1;
    if (this._currentEvent.phaseCardUpgradeQuantity > 0) {
      return;
    }
    for (let list of this.phaseUpgradeList) {
      list.setUpgradeFinished();
    }
    console.log(this._currentEvent.phaseCardUpgradeQuantity);
  }
  static {
    this.\u0275fac = function PhaseCardUpgradeSelectorComponent_Factory(t) {
      return new (t || _PhaseCardUpgradeSelectorComponent)(i028.\u0275\u0275directiveInject(GameState));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i028.\u0275\u0275defineComponent({ type: _PhaseCardUpgradeSelectorComponent, selectors: [["app-phase-card-upgrade-selector"]], viewQuery: function PhaseCardUpgradeSelectorComponent_Query(rf, ctx) {
      if (rf & 1) {
        i028.\u0275\u0275viewQuery(_c08, 5);
      }
      if (rf & 2) {
        let _t;
        i028.\u0275\u0275queryRefresh(_t = i028.\u0275\u0275loadQuery()) && (ctx.phaseUpgradeList = _t);
      }
    }, inputs: { event: "event" }, standalone: true, features: [i028.\u0275\u0275StandaloneFeature], decls: 5, vars: 3, consts: [["phaseUpgradeList", ""], [4, "ngIf"], ["class", "wrapper-phase-upgrade-selection", 4, "ngFor", "ngForOf"], [1, "wrapper-phase-upgrade-selection"], [3, "cardUpgraded", "phaseIndex", "phaseGroup", "upgradeFinished"]], template: function PhaseCardUpgradeSelectorComponent_Template(rf, ctx) {
      if (rf & 1) {
        i028.\u0275\u0275elementStart(0, "p");
        i028.\u0275\u0275text(1, "phase upgrade selector");
        i028.\u0275\u0275elementEnd();
        i028.\u0275\u0275template(2, PhaseCardUpgradeSelectorComponent_h1_2_Template, 2, 1, "h1", 1)(3, PhaseCardUpgradeSelectorComponent_h1_3_Template, 2, 0, "h1", 1)(4, PhaseCardUpgradeSelectorComponent_div_4_Template, 5, 4, "div", 2);
      }
      if (rf & 2) {
        i028.\u0275\u0275advance(2);
        i028.\u0275\u0275property("ngIf", ctx.upgradeNumber > 0);
        i028.\u0275\u0275advance();
        i028.\u0275\u0275property("ngIf", ctx.upgradeNumber === 0);
        i028.\u0275\u0275advance();
        i028.\u0275\u0275property("ngForOf", ctx.phaseList);
      }
    }, dependencies: [CommonModule10, i23.NgForOf, i23.NgIf, PhaseCardUpgradeListComponent], styles: ["\n\n.wrapper-phase-upgrade-selection[_ngcontent-%COMP%] {\n  width: 100%;\n}\n/*# sourceMappingURL=phase-card-upgrade-selector.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i028.\u0275setClassDebugInfo(PhaseCardUpgradeSelectorComponent, { className: "PhaseCardUpgradeSelectorComponent", filePath: "src\\app\\components\\cards\\phase\\phase-card-upgrade-selector\\phase-card-upgrade-selector.component.ts", lineNumber: 19 });
})();

// src/app/components/phases/phase-planification/phase-planification.component.ts
import { Component as Component15, Input as Input12, Output as Output9, EventEmitter as EventEmitter9 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule11 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i029 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i24 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
function PhasePlanificationComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i029.\u0275\u0275getCurrentView();
    i029.\u0275\u0275elementStart(0, "div", 7)(1, "app-button", 8);
    i029.\u0275\u0275listener("buttonClicked", function PhasePlanificationComponent_div_2_Template_app_button_buttonClicked_1_listener() {
      const button_r2 = i029.\u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = i029.\u0275\u0275nextContext();
      return i029.\u0275\u0275resetView(ctx_r2.buttonClicked(button_r2));
    });
    i029.\u0275\u0275element(2, "img", 9);
    i029.\u0275\u0275elementStart(3, "p");
    i029.\u0275\u0275text(4);
    i029.\u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const button_r2 = ctx.$implicit;
    const ctx_r2 = i029.\u0275\u0275nextContext();
    i029.\u0275\u0275classProp("selected", button_r2.name === ctx_r2.currentPhaseSelected);
    i029.\u0275\u0275advance();
    i029.\u0275\u0275property("button", button_r2);
    i029.\u0275\u0275advance();
    i029.\u0275\u0275propertyInterpolate1("src", "/assets/other/phase_", button_r2.name, ".png", i029.\u0275\u0275sanitizeUrl);
    i029.\u0275\u0275advance(2);
    i029.\u0275\u0275textInterpolate(button_r2.name);
  }
}
function PhasePlanificationComponent_ng_container_5_div_1_Template(rf, ctx) {
  if (rf & 1) {
    i029.\u0275\u0275elementStart(0, "div", 11)(1, "div", 12)(2, "h4");
    i029.\u0275\u0275text(3, "Ability:");
    i029.\u0275\u0275elementEnd();
    i029.\u0275\u0275element(4, "app-text-with-image", 13);
    i029.\u0275\u0275elementEnd();
    i029.\u0275\u0275elementStart(5, "div", 12)(6, "h4");
    i029.\u0275\u0275text(7, "Bonus:");
    i029.\u0275\u0275elementEnd();
    i029.\u0275\u0275element(8, "app-text-with-image", 13);
    i029.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const phaseCard_r4 = i029.\u0275\u0275nextContext().$implicit;
    i029.\u0275\u0275advance(4);
    i029.\u0275\u0275property("rawText", phaseCard_r4.baseDescription);
    i029.\u0275\u0275advance(4);
    i029.\u0275\u0275property("rawText", phaseCard_r4.bonusDescription);
  }
}
function PhasePlanificationComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    i029.\u0275\u0275elementContainerStart(0);
    i029.\u0275\u0275template(1, PhasePlanificationComponent_ng_container_5_div_1_Template, 9, 2, "div", 10);
    i029.\u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const phaseCard_r4 = ctx.$implicit;
    const ctx_r2 = i029.\u0275\u0275nextContext();
    i029.\u0275\u0275advance();
    i029.\u0275\u0275property("ngIf", ctx_r2.currentPhaseCard === phaseCard_r4);
  }
}
function PhasePlanificationComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    i029.\u0275\u0275elementStart(0, "div", 14)(1, "h2");
    i029.\u0275\u0275text(2, "Select a phase");
    i029.\u0275\u0275elementEnd()();
  }
}
var phaseList = [SelectablePhaseEnum.development, SelectablePhaseEnum.construction, SelectablePhaseEnum.action, SelectablePhaseEnum.production, SelectablePhaseEnum.research];
var phaseIndexMap = /* @__PURE__ */ new Map([
  [0, SelectablePhaseEnum.development],
  [1, SelectablePhaseEnum.construction],
  [2, SelectablePhaseEnum.action],
  [3, SelectablePhaseEnum.production],
  [4, SelectablePhaseEnum.research]
]);
var PhasePlanificationComponent = class _PhasePlanificationComponent {
  constructor(gameStateService) {
    this.gameStateService = gameStateService;
    this.phaseSelected = new EventEmitter9();
    this.buttonList = [];
    this.selectedPhaseCards = [];
  }
  ngOnInit() {
    let playerPhase = this.gameStateService.getPlayerPhase(this.clientPlayerId);
    if (playerPhase === void 0) {
      return;
    }
    for (let phase of phaseList) {
      this.createPhaseButtons(phase, playerPhase.previousSelectedPhase != phase);
    }
    this.setPhaseCards();
    console.log("playerphase: ", playerPhase);
  }
  createPhaseButtons(buttonPhase, enabled) {
    let newButton = new ImageButton();
    newButton.name = buttonPhase.toLocaleLowerCase(), newButton.enabled = enabled, newButton.startEnabled = enabled, newButton.value = buttonPhase, newButton.imageUrl = `/assets/other/phase_${buttonPhase.toLocaleLowerCase()}.png`;
    this.buttonList.push(newButton);
  }
  setPhaseCards() {
    this.selectedPhaseCards = this.gameStateService.getClientUpgradedPhaseCards();
  }
  setCurrentPhaseCard() {
    for (let index of phaseIndexMap.keys()) {
      if (String(phaseIndexMap.get(index)) === this.currentPhaseSelected) {
        this.currentPhaseCard = this.selectedPhaseCards[index];
        return;
      }
    }
    this.currentPhaseCard = void 0;
  }
  buttonClicked(button) {
    console.log("planif button clicked:", button);
    if (button.name === void 0) {
      return;
    }
    this.currentPhaseSelected = button.name;
    this.gameStateService.playerSelectPhase(this.clientPlayerId, button.value);
    this.currentPhaseCard = void 0;
    this.setCurrentPhaseCard();
    this.phaseSelected.emit();
  }
  static {
    this.\u0275fac = function PhasePlanificationComponent_Factory(t) {
      return new (t || _PhasePlanificationComponent)(i029.\u0275\u0275directiveInject(GameState));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i029.\u0275\u0275defineComponent({ type: _PhasePlanificationComponent, selectors: [["app-phase-planification"]], inputs: { clientPlayerId: "clientPlayerId" }, outputs: { phaseSelected: "phaseSelected" }, standalone: true, features: [i029.\u0275\u0275StandaloneFeature], decls: 7, vars: 3, consts: [[1, "wrapper-main"], [1, "wrapper-phase-card"], ["class", "wrapper-button", 3, "selected", 4, "ngFor", "ngForOf"], [1, "wrapper-selected-phase-card"], [1, "wrapper-phase-card-description", "ares-background", "ares-border"], [4, "ngFor", "ngForOf"], ["class", "wrapper-phase-not-selected", 4, "ngIf"], [1, "wrapper-button"], [1, "phase-card", 3, "buttonClicked", "button"], ["alt", "", 1, "phase-image", 3, "src"], ["class", "wrapper-phase-selected", 4, "ngIf"], [1, "wrapper-phase-selected"], [1, "wrapper-title-and-text"], [3, "rawText"], [1, "wrapper-phase-not-selected"]], template: function PhasePlanificationComponent_Template(rf, ctx) {
      if (rf & 1) {
        i029.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        i029.\u0275\u0275template(2, PhasePlanificationComponent_div_2_Template, 5, 6, "div", 2);
        i029.\u0275\u0275elementEnd();
        i029.\u0275\u0275elementStart(3, "div", 3)(4, "div", 4);
        i029.\u0275\u0275template(5, PhasePlanificationComponent_ng_container_5_Template, 2, 1, "ng-container", 5)(6, PhasePlanificationComponent_div_6_Template, 3, 0, "div", 6);
        i029.\u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        i029.\u0275\u0275advance(2);
        i029.\u0275\u0275property("ngForOf", ctx.buttonList);
        i029.\u0275\u0275advance(3);
        i029.\u0275\u0275property("ngForOf", ctx.selectedPhaseCards);
        i029.\u0275\u0275advance();
        i029.\u0275\u0275property("ngIf", ctx.currentPhaseCard === void 0);
      }
    }, dependencies: [
      CommonModule11,
      i24.NgForOf,
      i24.NgIf,
      ButtonComponent,
      TextWithImageComponent
    ], styles: ["\n\n.wrapper-phase-card[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  gap: 3%;\n  width: 100%;\n  height: auto;\n}\n.phase-card[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: transparent;\n  max-width: 100%;\n}\n.phase-image[_ngcontent-%COMP%] {\n  max-height: 100%;\n  max-width: 100%;\n}\n.wrapper-button[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 10%;\n  aspect-ratio: 1;\n  box-shadow: 0 0 15px 5px white;\n  border-radius: 15px;\n}\n.wrapper-button.selected[_ngcontent-%COMP%] {\n  box-shadow: 0 0 50px 20px white;\n  background-color: white;\n  outline-offset: 20px;\n  outline: white 1px solid;\n}\n.wrapper-selected-phase-card[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  margin-top: 5%;\n}\n.wrapper-phase-card-description[_ngcontent-%COMP%] {\n  height: 200px;\n  width: 400px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.wrapper-phase-selected[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  padding-left: 5%;\n  padding-right: 5%;\n  height: 100%;\n  width: 100%;\n}\napp-text-with-image[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.wrapper-title-and-text[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 40%;\n}\n/*# sourceMappingURL=phase-planification.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i029.\u0275setClassDebugInfo(PhasePlanificationComponent, { className: "PhasePlanificationComponent", filePath: "src\\app\\components\\phases\\phase-planification\\phase-planification.component.ts", lineNumber: 31 });
})();

// src/app/components/phases/phase-production/phase-production.component.ts
import { Component as Component17 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/components/player-info/player-ready/player-ready.component.ts
import { Component as Component16 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i030 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var PlayerReadyComponent = class _PlayerReadyComponent {
  constructor(gameState) {
    this.gameState = gameState;
  }
  ready(isReady) {
    this.gameState.setClientReady(isReady);
  }
  static {
    this.\u0275fac = function PlayerReadyComponent_Factory(t) {
      return new (t || _PlayerReadyComponent)(i030.\u0275\u0275directiveInject(GameState));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i030.\u0275\u0275defineComponent({ type: _PlayerReadyComponent, selectors: [["app-player-ready"]], standalone: true, features: [i030.\u0275\u0275StandaloneFeature], decls: 5, vars: 0, consts: [[1, "wrapper-player-ready"], [1, "clickable", "validation-button", 3, "click"]], template: function PlayerReadyComponent_Template(rf, ctx) {
      if (rf & 1) {
        i030.\u0275\u0275elementStart(0, "div", 0)(1, "button", 1);
        i030.\u0275\u0275listener("click", function PlayerReadyComponent_Template_button_click_1_listener() {
          return ctx.ready(true);
        });
        i030.\u0275\u0275text(2, "Confirm");
        i030.\u0275\u0275elementEnd();
        i030.\u0275\u0275elementStart(3, "button", 1);
        i030.\u0275\u0275listener("click", function PlayerReadyComponent_Template_button_click_3_listener() {
          return ctx.ready(false);
        });
        i030.\u0275\u0275text(4, "Cancel");
        i030.\u0275\u0275elementEnd()();
      }
    }, styles: ["\n\n.wrapper-player-ready[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 20%;\n}\n/*# sourceMappingURL=player-ready.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i030.\u0275setClassDebugInfo(PlayerReadyComponent, { className: "PlayerReadyComponent", filePath: "src\\app\\components\\player-info\\player-ready\\player-ready.component.ts", lineNumber: 11 });
})();

// src/app/components/phases/phase-production/phase-production.component.ts
import * as i031 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var PhaseProductionComponent = class _PhaseProductionComponent {
  constructor(gameStateService) {
    this.gameStateService = gameStateService;
  }
  ngOnInit() {
    this.gameStateService.currentGroupPlayerState.subscribe((groupPlayerState) => this.updateState(groupPlayerState));
  }
  updateState(state) {
    this.currentGroupPlayerState = state;
    this.clientPlayerState = this.gameStateService.getClientState();
  }
  static {
    this.\u0275fac = function PhaseProductionComponent_Factory(t) {
      return new (t || _PhaseProductionComponent)(i031.\u0275\u0275directiveInject(GameState));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i031.\u0275\u0275defineComponent({ type: _PhaseProductionComponent, selectors: [["app-phase-production"]], standalone: true, features: [i031.\u0275\u0275StandaloneFeature], decls: 11, vars: 6, consts: [[1, "wrapper-production-phase"]], template: function PhaseProductionComponent_Template(rf, ctx) {
      if (rf & 1) {
        i031.\u0275\u0275elementStart(0, "div", 0)(1, "ul");
        i031.\u0275\u0275text(2, "you gained : ");
        i031.\u0275\u0275elementStart(3, "li");
        i031.\u0275\u0275text(4);
        i031.\u0275\u0275elementEnd();
        i031.\u0275\u0275elementStart(5, "li");
        i031.\u0275\u0275text(6);
        i031.\u0275\u0275elementEnd();
        i031.\u0275\u0275elementStart(7, "li");
        i031.\u0275\u0275text(8);
        i031.\u0275\u0275elementEnd();
        i031.\u0275\u0275elementStart(9, "li");
        i031.\u0275\u0275text(10);
        i031.\u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        let tmp_0_0;
        let tmp_1_0;
        let tmp_2_0;
        let tmp_3_0;
        i031.\u0275\u0275advance(4);
        i031.\u0275\u0275textInterpolate3("", ((tmp_0_0 = ctx.clientPlayerState.getRessourceInfoFromId(0)) == null ? null : tmp_0_0.valueProd) + ctx.clientPlayerState.getTR(), " megacredits (", (tmp_0_0 = ctx.clientPlayerState.getRessourceInfoFromId(0)) == null ? null : tmp_0_0.valueProd, " from production and ", ctx.clientPlayerState.getTR(), " from TR)");
        i031.\u0275\u0275advance(2);
        i031.\u0275\u0275textInterpolate1("", (tmp_1_0 = ctx.clientPlayerState.getRessourceInfoFromId(1)) == null ? null : tmp_1_0.valueProd, " heat");
        i031.\u0275\u0275advance(2);
        i031.\u0275\u0275textInterpolate1("", (tmp_2_0 = ctx.clientPlayerState.getRessourceInfoFromId(2)) == null ? null : tmp_2_0.valueProd, " plants");
        i031.\u0275\u0275advance(2);
        i031.\u0275\u0275textInterpolate1("", (tmp_3_0 = ctx.clientPlayerState.getRessourceInfoFromId(5)) == null ? null : tmp_3_0.valueProd, " cards");
      }
    }, styles: ["\n\n.wrapper-production-phase[_ngcontent-%COMP%] {\n  width: 100%;\n  background: orange;\n}\n/*# sourceMappingURL=phase-production.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i031.\u0275setClassDebugInfo(PhaseProductionComponent, { className: "PhaseProductionComponent", filePath: "src\\app\\components\\phases\\phase-production\\phase-production.component.ts", lineNumber: 13 });
})();

// src/app/components/tools/button/event-main-button.component.ts
import { CommonModule as CommonModule12 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import { Component as Component18, Input as Input13, Output as Output10, EventEmitter as EventEmitter10 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i032 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i17 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c09 = (a0, a1) => [a0, a1];
var _c14 = (a0, a1, a2) => [a0, a1, a2];
var _c24 = (a0) => [a0];
var _c33 = (a0) => ({ "element-disabled": a0 });
function EventMainButtonComponent_button_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i032.\u0275\u0275elementStart(0, "div", 7);
    i032.\u0275\u0275element(1, "div", 7);
    i032.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i032.\u0275\u0275nextContext(2);
    i032.\u0275\u0275property("ngClass", i032.\u0275\u0275pureFunction2(2, _c09, "button-shape--" + ctx_r1.shape, "gradiant-mask--" + ctx_r1.shape));
    i032.\u0275\u0275advance();
    i032.\u0275\u0275property("ngClass", i032.\u0275\u0275pureFunction2(5, _c09, "button-gradiant-background--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape));
  }
}
function EventMainButtonComponent_button_1_div_6_Template(rf, ctx) {
  if (rf & 1) {
    i032.\u0275\u0275element(0, "div", 10);
  }
  if (rf & 2) {
    const ctx_r1 = i032.\u0275\u0275nextContext(2);
    i032.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i032.\u0275\u0275property("ngClass", i032.\u0275\u0275pureFunction1(3, _c24, ctx_r1.button.enabled ? "enabled" : "disabled"));
  }
}
function EventMainButtonComponent_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i032.\u0275\u0275getCurrentView();
    i032.\u0275\u0275elementStart(0, "button", 4);
    i032.\u0275\u0275listener("mouseenter", function EventMainButtonComponent_button_1_Template_button_mouseenter_0_listener() {
      i032.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i032.\u0275\u0275nextContext();
      return i032.\u0275\u0275resetView(ctx_r1._isHovered = true);
    })("mouseleave", function EventMainButtonComponent_button_1_Template_button_mouseleave_0_listener() {
      i032.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i032.\u0275\u0275nextContext();
      return i032.\u0275\u0275resetView(ctx_r1._isHovered = false);
    })("click", function EventMainButtonComponent_button_1_Template_button_click_0_listener() {
      i032.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i032.\u0275\u0275nextContext();
      return i032.\u0275\u0275resetView(ctx_r1.onClick(ctx_r1.button));
    });
    i032.\u0275\u0275elementStart(1, "div", 5);
    i032.\u0275\u0275template(2, EventMainButtonComponent_button_1_div_2_Template, 2, 8, "div", 6);
    i032.\u0275\u0275elementStart(3, "div", 7);
    i032.\u0275\u0275element(4, "app-text-with-image", 8);
    i032.\u0275\u0275elementEnd();
    i032.\u0275\u0275element(5, "div", 7);
    i032.\u0275\u0275template(6, EventMainButtonComponent_button_1_div_6_Template, 1, 5, "div", 9);
    i032.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i032.\u0275\u0275nextContext();
    i032.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i032.\u0275\u0275property("disabled", ctx_r1.button.enabled === false)("ngClass", i032.\u0275\u0275pureFunction2(11, _c09, ctx_r1.button.enabled ? "enabled" : "disabled", ctx_r1.shape ? "button-shape--" + ctx_r1.shape : ""));
    i032.\u0275\u0275advance(2);
    i032.\u0275\u0275property("ngIf", ctx_r1.button.enabled === true && ctx_r1.shape != "hex_floating");
    i032.\u0275\u0275advance();
    i032.\u0275\u0275property("ngClass", i032.\u0275\u0275pureFunction3(14, _c14, "button-main--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape, ctx_r1.button.enabled ? "enabled" : "disabled"));
    i032.\u0275\u0275advance();
    i032.\u0275\u0275property("rawText", ctx_r1._caption);
    i032.\u0275\u0275advance();
    i032.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i032.\u0275\u0275property("ngClass", i032.\u0275\u0275pureFunction3(18, _c14, "button-background--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape, ctx_r1.button.enabled ? "enabled" : "disabled"));
    i032.\u0275\u0275advance();
    i032.\u0275\u0275property("ngIf", ctx_r1.shape === "hex_floating");
  }
}
function EventMainButtonComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i032.\u0275\u0275element(0, "div", 11);
  }
  if (rf & 2) {
    const ctx_r1 = i032.\u0275\u0275nextContext();
    i032.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i032.\u0275\u0275property("ngClass", i032.\u0275\u0275pureFunction1(3, _c24, ctx_r1.button.enabled ? "enabled" : "disabled"));
  }
}
function EventMainButtonComponent_div_3_img_5_Template(rf, ctx) {
  if (rf & 1) {
    i032.\u0275\u0275element(0, "img", 14);
  }
  if (rf & 2) {
    const ctx_r1 = i032.\u0275\u0275nextContext(2);
    i032.\u0275\u0275property("src", ctx_r1._imageUrl, i032.\u0275\u0275sanitizeUrl);
  }
}
function EventMainButtonComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = i032.\u0275\u0275getCurrentView();
    i032.\u0275\u0275elementStart(0, "div", 0)(1, "div", 7)(2, "button", 12);
    i032.\u0275\u0275listener("click", function EventMainButtonComponent_div_3_Template_button_click_2_listener() {
      i032.\u0275\u0275restoreView(_r3);
      const ctx_r1 = i032.\u0275\u0275nextContext();
      return i032.\u0275\u0275resetView(ctx_r1.onClick(ctx_r1.button));
    });
    i032.\u0275\u0275elementStart(3, "p");
    i032.\u0275\u0275text(4);
    i032.\u0275\u0275elementEnd();
    i032.\u0275\u0275template(5, EventMainButtonComponent_div_3_img_5_Template, 1, 1, "img", 13);
    i032.\u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = i032.\u0275\u0275nextContext();
    i032.\u0275\u0275advance();
    i032.\u0275\u0275property("ngClass", i032.\u0275\u0275pureFunction1(5, _c33, ctx_r1.button.enabled === false));
    i032.\u0275\u0275advance();
    i032.\u0275\u0275property("disabled", ctx_r1.button.enabled === false)("ngClass", i032.\u0275\u0275pureFunction2(7, _c09, ctx_r1._imageUrl ? "image-button" : "validation-button", ctx_r1.button.enabled === true ? "element-clickable" : ""));
    i032.\u0275\u0275advance(2);
    i032.\u0275\u0275textInterpolate(ctx_r1.button.caption);
    i032.\u0275\u0275advance();
    i032.\u0275\u0275property("ngIf", ctx_r1._imageUrl);
  }
}
var EventMainButtonComponent = class _EventMainButtonComponent extends ButtonComponent {
  constructor() {
    super(...arguments);
    this.eventMainButtonClicked = new EventEmitter10();
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275EventMainButtonComponent_BaseFactory;
      return function EventMainButtonComponent_Factory(t) {
        return (\u0275EventMainButtonComponent_BaseFactory || (\u0275EventMainButtonComponent_BaseFactory = i032.\u0275\u0275getInheritedFactory(_EventMainButtonComponent)))(t || _EventMainButtonComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i032.\u0275\u0275defineComponent({ type: _EventMainButtonComponent, selectors: [["app-event-main-button"]], inputs: { button: "button" }, outputs: { eventMainButtonClicked: "eventMainButtonClicked" }, standalone: true, features: [i032.\u0275\u0275InheritDefinitionFeature, i032.\u0275\u0275StandaloneFeature], decls: 4, vars: 3, consts: [[1, "wrapper-button"], ["class", "main", 3, "disabled", "hovered", "ngClass", "mouseenter", "mouseleave", "click", 4, "ngIf"], ["class", "shadow", 3, "hovered", "ngClass", 4, "ngIf"], ["class", "wrapper-button", 4, "ngIf"], [1, "main", 3, "mouseenter", "mouseleave", "click", "disabled", "ngClass"], [1, "wrapper-elements"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"], [3, "rawText"], ["class", "button-border", 3, "ngClass", "hovered", 4, "ngIf"], [1, "button-border", 3, "ngClass"], [1, "shadow", 3, "ngClass"], [3, "click", "disabled", "ngClass"], ["alt", "", 3, "src", 4, "ngIf"], ["alt", "", 3, "src"]], template: function EventMainButtonComponent_Template(rf, ctx) {
      if (rf & 1) {
        i032.\u0275\u0275elementStart(0, "div", 0);
        i032.\u0275\u0275template(1, EventMainButtonComponent_button_1_Template, 7, 22, "button", 1)(2, EventMainButtonComponent_div_2_Template, 1, 5, "div", 2);
        i032.\u0275\u0275elementEnd();
        i032.\u0275\u0275template(3, EventMainButtonComponent_div_3_Template, 6, 10, "div", 3);
      }
      if (rf & 2) {
        i032.\u0275\u0275advance();
        i032.\u0275\u0275property("ngIf", !ctx._imageUrl);
        i032.\u0275\u0275advance();
        i032.\u0275\u0275property("ngIf", ctx.shape === "hex_floating");
        i032.\u0275\u0275advance();
        i032.\u0275\u0275property("ngIf", ctx._imageUrl);
      }
    }, dependencies: [CommonModule12, i17.NgClass, i17.NgIf, TextWithImageComponent], styles: ['\n\n.wrapper-button[_ngcontent-%COMP%] {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n.main[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  border: 0;\n  height: 100%;\n  background: transparent;\n}\n.main.hovered.enabled[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.main.disabled[_ngcontent-%COMP%], .main[_ngcontent-%COMP%]   .hovered.disabled[_ngcontent-%COMP%] {\n  filter: grayscale(40%);\n}\n.main.disabled[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%], .main[_ngcontent-%COMP%]   .hovered.disabled[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\n  filter: grayscale(50%);\n}\n.main[_ngcontent-%COMP%]  app-text-with-image .text-tag {\n  max-width: 100%;\n  max-height: 25px;\n  font-weight: bold;\n}\n.main.enabled[_ngcontent-%COMP%]  app-text-with-image p {\n  font-weight: 550;\n  font-size: 100%;\n}\n.main.disabled[_ngcontent-%COMP%]  app-text-with-image p {\n  color: rgb(61, 61, 61);\n  font-size: 100%;\n}\n.wrapper-elements[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n.gradiant-mask--hex[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--hex[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--hex[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.button-gradiant-background--hex[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--small[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--large[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--hex_floating[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-main--hex[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--hex[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 25%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--hex_floating[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--hex_floating[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 25%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--small[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--small[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 15%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--large[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--large[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 10%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--hex_floating.enabled[_ngcontent-%COMP%] {\n  background: transparent;\n}\n.button-background--hex[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--small[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--large[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--hex_floating[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--hex_floating[_ngcontent-%COMP%] {\n  background: rgba(181, 128, 108, 0.8);\n}\n.button-background--hex_floating.enabled[_ngcontent-%COMP%]::before {\n  content: "";\n  position: absolute;\n  inset: 0;\n  opacity: 1;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-background--hex_floating.enabled[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background: rgba(255, 255, 255, 0.2);\n  opacity: 0;\n  transition: opacity 0.15s ease;\n  z-index: 10;\n}\n.button-background--hex_floating.hovered[_ngcontent-%COMP%]::before {\n  opacity: 0;\n}\n.button-background--hex_floating.hovered[_ngcontent-%COMP%]::after {\n  opacity: 1;\n}\n.button-shape--hex[_ngcontent-%COMP%], .button-shape--hex_floating[_ngcontent-%COMP%] {\n  aspect-ratio: 1.15/1;\n}\n.button-shape--small[_ngcontent-%COMP%] {\n  aspect-ratio: 3.5/1;\n}\n.button-shape--large[_ngcontent-%COMP%] {\n  aspect-ratio: 5/1;\n}\n.button-shape--hex[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n}\n.button-shape--hex_floating[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n}\n.button-shape--small[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 15% 0%, calc(100% - 15%) 0%, 100% 50%, calc(100% - 15%) 100%, 15% 100%);\n  clip-path: polygon(0% 50%, 15% 0%, calc(100% - 15%) 0%, 100% 50%, calc(100% - 15%) 100%, 15% 100%);\n}\n.button-shape--large[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 10% 0%, calc(100% - 10%) 0%, 100% 50%, calc(100% - 10%) 100%, 10% 100%);\n  clip-path: polygon(0% 50%, 10% 0%, calc(100% - 10%) 0%, 100% 50%, calc(100% - 10%) 100%, 10% 100%);\n}\n.button-border[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%, 0% 50%, 3px 50%, calc(25% + 1.5px) calc(100% - 3px), calc(100% - (25% + 1.5px)) calc(100% - 3px), calc(100% - 3px) 50%, calc(100% - (25% + 1.5px)) 3px, calc(25% + 1.5px) 3px, 3px 50%);\n}\n.button-border.enabled[_ngcontent-%COMP%]::before {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background-image:\n    linear-gradient(\n      135deg,\n      rgb(215, 215, 215) 30%,\n      rgb(147, 147, 147) 60%,\n      rgb(234, 234, 234) 90%);\n  opacity: 1;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-border.enabled[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background-image:\n    linear-gradient(\n      to right,\n      var(--color-ares-orange) 0%,\n      var(--color-ares-orange) 100%);\n  opacity: 0;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-border.enabled.hovered[_ngcontent-%COMP%]::before {\n  opacity: 0;\n}\n.button-border.enabled.hovered[_ngcontent-%COMP%]::after {\n  opacity: 1;\n}\n.shadow[_ngcontent-%COMP%] {\n  z-index: -1;\n  position: absolute;\n  height: 100%;\n  aspect-ratio: 1;\n  background: transparent;\n  border-radius: 50%;\n}\n.shadow.hovered.enabled[_ngcontent-%COMP%] {\n  box-shadow: 0px 0px 15px 10px rgba(255, 119, 0, 0.3);\n}\n.shadow.enabled[_ngcontent-%COMP%] {\n  box-shadow: 0px 0px 15px 10px rgba(196, 196, 196, 0.2);\n}\n/*# sourceMappingURL=button.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i032.\u0275setClassDebugInfo(EventMainButtonComponent, { className: "EventMainButtonComponent", filePath: "src\\app\\components\\tools\\button\\event-main-button.component.ts", lineNumber: 17 });
})();

// src/app/components/tools/button/non-event-button.component.ts
import { CommonModule as CommonModule13 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import { Component as Component19, Input as Input14, Output as Output11, EventEmitter as EventEmitter11 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i033 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i18 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c010 = (a0, a1) => [a0, a1];
var _c15 = (a0, a1, a2) => [a0, a1, a2];
var _c25 = (a0) => [a0];
var _c34 = (a0) => ({ "element-disabled": a0 });
function NonEventButtonComponent_button_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i033.\u0275\u0275elementStart(0, "div", 7);
    i033.\u0275\u0275element(1, "div", 7);
    i033.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i033.\u0275\u0275nextContext(2);
    i033.\u0275\u0275property("ngClass", i033.\u0275\u0275pureFunction2(2, _c010, "button-shape--" + ctx_r1.shape, "gradiant-mask--" + ctx_r1.shape));
    i033.\u0275\u0275advance();
    i033.\u0275\u0275property("ngClass", i033.\u0275\u0275pureFunction2(5, _c010, "button-gradiant-background--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape));
  }
}
function NonEventButtonComponent_button_1_div_6_Template(rf, ctx) {
  if (rf & 1) {
    i033.\u0275\u0275element(0, "div", 10);
  }
  if (rf & 2) {
    const ctx_r1 = i033.\u0275\u0275nextContext(2);
    i033.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i033.\u0275\u0275property("ngClass", i033.\u0275\u0275pureFunction1(3, _c25, ctx_r1.button.enabled ? "enabled" : "disabled"));
  }
}
function NonEventButtonComponent_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i033.\u0275\u0275getCurrentView();
    i033.\u0275\u0275elementStart(0, "button", 4);
    i033.\u0275\u0275listener("mouseenter", function NonEventButtonComponent_button_1_Template_button_mouseenter_0_listener() {
      i033.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i033.\u0275\u0275nextContext();
      return i033.\u0275\u0275resetView(ctx_r1._isHovered = true);
    })("mouseleave", function NonEventButtonComponent_button_1_Template_button_mouseleave_0_listener() {
      i033.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i033.\u0275\u0275nextContext();
      return i033.\u0275\u0275resetView(ctx_r1._isHovered = false);
    })("click", function NonEventButtonComponent_button_1_Template_button_click_0_listener() {
      i033.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i033.\u0275\u0275nextContext();
      return i033.\u0275\u0275resetView(ctx_r1.onClick(ctx_r1.button));
    });
    i033.\u0275\u0275elementStart(1, "div", 5);
    i033.\u0275\u0275template(2, NonEventButtonComponent_button_1_div_2_Template, 2, 8, "div", 6);
    i033.\u0275\u0275elementStart(3, "div", 7);
    i033.\u0275\u0275element(4, "app-text-with-image", 8);
    i033.\u0275\u0275elementEnd();
    i033.\u0275\u0275element(5, "div", 7);
    i033.\u0275\u0275template(6, NonEventButtonComponent_button_1_div_6_Template, 1, 5, "div", 9);
    i033.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i033.\u0275\u0275nextContext();
    i033.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i033.\u0275\u0275property("disabled", ctx_r1.button.enabled === false)("ngClass", i033.\u0275\u0275pureFunction2(11, _c010, ctx_r1.button.enabled ? "enabled" : "disabled", ctx_r1.shape ? "button-shape--" + ctx_r1.shape : ""));
    i033.\u0275\u0275advance(2);
    i033.\u0275\u0275property("ngIf", ctx_r1.button.enabled === true && ctx_r1.shape != "hex_floating");
    i033.\u0275\u0275advance();
    i033.\u0275\u0275property("ngClass", i033.\u0275\u0275pureFunction3(14, _c15, "button-main--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape, ctx_r1.button.enabled ? "enabled" : "disabled"));
    i033.\u0275\u0275advance();
    i033.\u0275\u0275property("rawText", ctx_r1._caption);
    i033.\u0275\u0275advance();
    i033.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i033.\u0275\u0275property("ngClass", i033.\u0275\u0275pureFunction3(18, _c15, "button-background--" + ctx_r1.shape, "button-shape--" + ctx_r1.shape, ctx_r1.button.enabled ? "enabled" : "disabled"));
    i033.\u0275\u0275advance();
    i033.\u0275\u0275property("ngIf", ctx_r1.shape === "hex_floating");
  }
}
function NonEventButtonComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i033.\u0275\u0275element(0, "div", 11);
  }
  if (rf & 2) {
    const ctx_r1 = i033.\u0275\u0275nextContext();
    i033.\u0275\u0275classProp("hovered", ctx_r1._isHovered);
    i033.\u0275\u0275property("ngClass", i033.\u0275\u0275pureFunction1(3, _c25, ctx_r1.button.enabled ? "enabled" : "disabled"));
  }
}
function NonEventButtonComponent_div_3_img_5_Template(rf, ctx) {
  if (rf & 1) {
    i033.\u0275\u0275element(0, "img", 14);
  }
  if (rf & 2) {
    const ctx_r1 = i033.\u0275\u0275nextContext(2);
    i033.\u0275\u0275property("src", ctx_r1._imageUrl, i033.\u0275\u0275sanitizeUrl);
  }
}
function NonEventButtonComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = i033.\u0275\u0275getCurrentView();
    i033.\u0275\u0275elementStart(0, "div", 0)(1, "div", 7)(2, "button", 12);
    i033.\u0275\u0275listener("click", function NonEventButtonComponent_div_3_Template_button_click_2_listener() {
      i033.\u0275\u0275restoreView(_r3);
      const ctx_r1 = i033.\u0275\u0275nextContext();
      return i033.\u0275\u0275resetView(ctx_r1.onClick(ctx_r1.button));
    });
    i033.\u0275\u0275elementStart(3, "p");
    i033.\u0275\u0275text(4);
    i033.\u0275\u0275elementEnd();
    i033.\u0275\u0275template(5, NonEventButtonComponent_div_3_img_5_Template, 1, 1, "img", 13);
    i033.\u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = i033.\u0275\u0275nextContext();
    i033.\u0275\u0275advance();
    i033.\u0275\u0275property("ngClass", i033.\u0275\u0275pureFunction1(5, _c34, ctx_r1.button.enabled === false));
    i033.\u0275\u0275advance();
    i033.\u0275\u0275property("disabled", ctx_r1.button.enabled === false)("ngClass", i033.\u0275\u0275pureFunction2(7, _c010, ctx_r1._imageUrl ? "image-button" : "validation-button", ctx_r1.button.enabled === true ? "element-clickable" : ""));
    i033.\u0275\u0275advance(2);
    i033.\u0275\u0275textInterpolate(ctx_r1.button.caption);
    i033.\u0275\u0275advance();
    i033.\u0275\u0275property("ngIf", ctx_r1._imageUrl);
  }
}
var NonEventButtonComponent = class _NonEventButtonComponent extends ButtonComponent {
  constructor() {
    super(...arguments);
    this.nonEventButtonClicked = new EventEmitter11();
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NonEventButtonComponent_BaseFactory;
      return function NonEventButtonComponent_Factory(t) {
        return (\u0275NonEventButtonComponent_BaseFactory || (\u0275NonEventButtonComponent_BaseFactory = i033.\u0275\u0275getInheritedFactory(_NonEventButtonComponent)))(t || _NonEventButtonComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i033.\u0275\u0275defineComponent({ type: _NonEventButtonComponent, selectors: [["app-non-event-button"]], inputs: { button: "button" }, outputs: { nonEventButtonClicked: "nonEventButtonClicked" }, standalone: true, features: [i033.\u0275\u0275InheritDefinitionFeature, i033.\u0275\u0275StandaloneFeature], decls: 4, vars: 3, consts: [[1, "wrapper-button"], ["class", "main", 3, "disabled", "hovered", "ngClass", "mouseenter", "mouseleave", "click", 4, "ngIf"], ["class", "shadow", 3, "hovered", "ngClass", 4, "ngIf"], ["class", "wrapper-button", 4, "ngIf"], [1, "main", 3, "mouseenter", "mouseleave", "click", "disabled", "ngClass"], [1, "wrapper-elements"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"], [3, "rawText"], ["class", "button-border", 3, "ngClass", "hovered", 4, "ngIf"], [1, "button-border", 3, "ngClass"], [1, "shadow", 3, "ngClass"], [3, "click", "disabled", "ngClass"], ["alt", "", 3, "src", 4, "ngIf"], ["alt", "", 3, "src"]], template: function NonEventButtonComponent_Template(rf, ctx) {
      if (rf & 1) {
        i033.\u0275\u0275elementStart(0, "div", 0);
        i033.\u0275\u0275template(1, NonEventButtonComponent_button_1_Template, 7, 22, "button", 1)(2, NonEventButtonComponent_div_2_Template, 1, 5, "div", 2);
        i033.\u0275\u0275elementEnd();
        i033.\u0275\u0275template(3, NonEventButtonComponent_div_3_Template, 6, 10, "div", 3);
      }
      if (rf & 2) {
        i033.\u0275\u0275advance();
        i033.\u0275\u0275property("ngIf", !ctx._imageUrl);
        i033.\u0275\u0275advance();
        i033.\u0275\u0275property("ngIf", ctx.shape === "hex_floating");
        i033.\u0275\u0275advance();
        i033.\u0275\u0275property("ngIf", ctx._imageUrl);
      }
    }, dependencies: [CommonModule13, i18.NgClass, i18.NgIf, TextWithImageComponent], styles: ['\n\n.wrapper-button[_ngcontent-%COMP%] {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n.main[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  border: 0;\n  height: 100%;\n  background: transparent;\n}\n.main.hovered.enabled[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.main.disabled[_ngcontent-%COMP%], .main[_ngcontent-%COMP%]   .hovered.disabled[_ngcontent-%COMP%] {\n  filter: grayscale(40%);\n}\n.main.disabled[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%], .main[_ngcontent-%COMP%]   .hovered.disabled[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\n  filter: grayscale(50%);\n}\n.main[_ngcontent-%COMP%]  app-text-with-image .text-tag {\n  max-width: 100%;\n  max-height: 25px;\n  font-weight: bold;\n}\n.main.enabled[_ngcontent-%COMP%]  app-text-with-image p {\n  font-weight: 550;\n  font-size: 100%;\n}\n.main.disabled[_ngcontent-%COMP%]  app-text-with-image p {\n  color: rgb(61, 61, 61);\n  font-size: 100%;\n}\n.wrapper-elements[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n.gradiant-mask--hex[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--hex[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--hex[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--small[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--large[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%] {\n  z-index: 3;\n  position: absolute;\n  top: 0;\n  left: 0px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.15) 0%,\n      rgba(0, 0, 0, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.15) 30%,\n      rgba(0, 0, 0, 0) 70%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%]:hover {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0) 0%,\n      rgba(0, 0, 0, 0.15) 100%);\n}\n.gradiant-mask--hex_floating[_ngcontent-%COMP%]:active {\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n  mask-image:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.5) 0%,\n      rgba(0, 0, 0, 0.5) 100%);\n}\n.button-gradiant-background--hex[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--small[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--large[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-gradiant-background--hex_floating[_ngcontent-%COMP%] {\n  z-index: 2;\n  background: black;\n}\n.button-main--hex[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--hex[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 25%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--hex_floating[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--hex_floating[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 25%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--small[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--small[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 15%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--large[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  left: 1px;\n  top: 1px;\n  height: calc(100% - 2px);\n  width: calc(100% - 2px);\n  position: absolute;\n  background-color: var(--color-ares-orange);\n}\n.button-main--large[_ngcontent-%COMP%]   app-text-with-image[_ngcontent-%COMP%] {\n  width: calc(100% - 10%);\n  color: white;\n}\n.button-main.disabled[_ngcontent-%COMP%] {\n  background-color: gray;\n}\n.button-main--hex_floating.enabled[_ngcontent-%COMP%] {\n  background: transparent;\n}\n.button-background--hex[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--small[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--large[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--hex_floating[_ngcontent-%COMP%] {\n  position: relative;\n  left: 0;\n  top: 0;\n  z-index: 0;\n  background-color: var(--color-ares-orange-dark);\n}\n.button-background--hex_floating[_ngcontent-%COMP%] {\n  background: rgba(181, 128, 108, 0.8);\n}\n.button-background--hex_floating.enabled[_ngcontent-%COMP%]::before {\n  content: "";\n  position: absolute;\n  inset: 0;\n  opacity: 1;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-background--hex_floating.enabled[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background: rgba(255, 255, 255, 0.2);\n  opacity: 0;\n  transition: opacity 0.15s ease;\n  z-index: 10;\n}\n.button-background--hex_floating.hovered[_ngcontent-%COMP%]::before {\n  opacity: 0;\n}\n.button-background--hex_floating.hovered[_ngcontent-%COMP%]::after {\n  opacity: 1;\n}\n.button-shape--hex[_ngcontent-%COMP%], .button-shape--hex_floating[_ngcontent-%COMP%] {\n  aspect-ratio: 1.15/1;\n}\n.button-shape--small[_ngcontent-%COMP%] {\n  aspect-ratio: 3.5/1;\n}\n.button-shape--large[_ngcontent-%COMP%] {\n  aspect-ratio: 5/1;\n}\n.button-shape--hex[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n}\n.button-shape--hex_floating[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n}\n.button-shape--small[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 15% 0%, calc(100% - 15%) 0%, 100% 50%, calc(100% - 15%) 100%, 15% 100%);\n  clip-path: polygon(0% 50%, 15% 0%, calc(100% - 15%) 0%, 100% 50%, calc(100% - 15%) 100%, 15% 100%);\n}\n.button-shape--large[_ngcontent-%COMP%] {\n  -webkit-clip-path: polygon(0% 50%, 10% 0%, calc(100% - 10%) 0%, 100% 50%, calc(100% - 10%) 100%, 10% 100%);\n  clip-path: polygon(0% 50%, 10% 0%, calc(100% - 10%) 0%, 100% 50%, calc(100% - 10%) 100%, 10% 100%);\n}\n.button-border[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  -webkit-clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%);\n  clip-path: polygon(0% 50%, 25% 0%, calc(100% - 25%) 0%, 100% 50%, calc(100% - 25%) 100%, 25% 100%, 0% 50%, 3px 50%, calc(25% + 1.5px) calc(100% - 3px), calc(100% - (25% + 1.5px)) calc(100% - 3px), calc(100% - 3px) 50%, calc(100% - (25% + 1.5px)) 3px, calc(25% + 1.5px) 3px, 3px 50%);\n}\n.button-border.enabled[_ngcontent-%COMP%]::before {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background-image:\n    linear-gradient(\n      135deg,\n      rgb(215, 215, 215) 30%,\n      rgb(147, 147, 147) 60%,\n      rgb(234, 234, 234) 90%);\n  opacity: 1;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-border.enabled[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  inset: 0;\n  background-image:\n    linear-gradient(\n      to right,\n      var(--color-ares-orange) 0%,\n      var(--color-ares-orange) 100%);\n  opacity: 0;\n  transition: opacity 0.15s ease;\n  z-index: -1;\n}\n.button-border.enabled.hovered[_ngcontent-%COMP%]::before {\n  opacity: 0;\n}\n.button-border.enabled.hovered[_ngcontent-%COMP%]::after {\n  opacity: 1;\n}\n.shadow[_ngcontent-%COMP%] {\n  z-index: -1;\n  position: absolute;\n  height: 100%;\n  aspect-ratio: 1;\n  background: transparent;\n  border-radius: 50%;\n}\n.shadow.hovered.enabled[_ngcontent-%COMP%] {\n  box-shadow: 0px 0px 15px 10px rgba(255, 119, 0, 0.3);\n}\n.shadow.enabled[_ngcontent-%COMP%] {\n  box-shadow: 0px 0px 15px 10px rgba(196, 196, 196, 0.2);\n}\n/*# sourceMappingURL=button.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i033.\u0275setClassDebugInfo(NonEventButtonComponent, { className: "NonEventButtonComponent", filePath: "src\\app\\components\\tools\\button\\non-event-button.component.ts", lineNumber: 17 });
})();

// src/app/components/animations/animations.ts
import { trigger, transition, style, animate } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_animations.js?v=ba073120";
var expandCollapseVertical = trigger("expandCollapseVertical", [
  transition(":enter", [
    style({ height: "0px", overflow: "hidden", opacity: 0 }),
    // Départ
    animate("150ms ease-out", style({ height: "*", opacity: 1 }))
    // Arrivée
  ]),
  transition(":leave", [
    animate("150ms ease-in", style({ height: "0px", opacity: 0 }))
    // Disparition
  ])
]);
var expandCollapseHorizontal = trigger("expandCollapseHorizontal", [
  transition(":enter", [
    style({ width: "0px", opacity: 0 }),
    // Départ
    animate("300ms ease-out", style({ width: "*", opacity: 1 }))
    // Arrivée
  ]),
  transition(":leave", [
    animate("300ms ease-in", style({ width: "0px", opacity: 0 }))
    // Disparition
  ])
]);
var enterFromLeft = trigger("enterFromLeft", [
  transition(":enter", [
    style({ left: "-100%", opacity: 1 }),
    // Départ
    animate("500ms ease-out", style({ left: "*", opacity: 1 }))
    // Arrivée
  ]),
  transition(":leave", [
    animate("500ms ease-in", style({ left: "-100%", opacity: 1 }))
    // Disparition
  ])
]);

// src/app/components/core-game/game-event/game-event.component.ts
import * as i034 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i25 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c011 = ["cardListSelector"];
function GameEventComponent_div_0_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i034.\u0275\u0275getCurrentView();
    i034.\u0275\u0275elementStart(0, "div", 22)(1, "app-event-main-button", 23);
    i034.\u0275\u0275listener("buttonClicked", function GameEventComponent_div_0_div_2_Template_app_event_main_button_buttonClicked_1_listener() {
      i034.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i034.\u0275\u0275nextContext(2);
      return i034.\u0275\u0275resetView(ctx_r1.eventMainButtonClicked());
    });
    i034.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("button", ctx_r1.currentEvent.button)("shape", "hex_floating");
  }
}
function GameEventComponent_div_0_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = i034.\u0275\u0275getCurrentView();
    i034.\u0275\u0275elementStart(0, "div", 24)(1, "app-non-event-button", 23);
    i034.\u0275\u0275listener("buttonClicked", function GameEventComponent_div_0_div_3_Template_app_non_event_button_buttonClicked_1_listener() {
      i034.\u0275\u0275restoreView(_r3);
      const ctx_r1 = i034.\u0275\u0275nextContext(2);
      return i034.\u0275\u0275resetView(ctx_r1.nonEventButtonClicked(ctx_r1.sellCardsButton));
    });
    i034.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("button", ctx_r1.sellCardsButton)("shape", "hex_floating");
  }
}
function GameEventComponent_div_0_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = i034.\u0275\u0275getCurrentView();
    i034.\u0275\u0275elementStart(0, "div", 25)(1, "app-non-event-button", 23);
    i034.\u0275\u0275listener("buttonClicked", function GameEventComponent_div_0_div_4_Template_app_non_event_button_buttonClicked_1_listener() {
      i034.\u0275\u0275restoreView(_r4);
      const ctx_r1 = i034.\u0275\u0275nextContext(2);
      return i034.\u0275\u0275resetView(ctx_r1.nonEventButtonClicked(ctx_r1.sellCardsCancelButton));
    });
    i034.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("button", ctx_r1.sellCardsCancelButton)("shape", "hex_floating");
  }
}
function GameEventComponent_div_0_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = i034.\u0275\u0275getCurrentView();
    i034.\u0275\u0275elementStart(0, "div", 25)(1, "app-non-event-button", 23);
    i034.\u0275\u0275listener("buttonClicked", function GameEventComponent_div_0_div_5_Template_app_non_event_button_buttonClicked_1_listener() {
      i034.\u0275\u0275restoreView(_r5);
      const ctx_r1 = i034.\u0275\u0275nextContext(2);
      return i034.\u0275\u0275resetView(ctx_r1.nonEventButtonClicked(ctx_r1.rollbackButton));
    });
    i034.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("button", ctx_r1.rollbackButton)("shape", "hex_floating");
  }
}
function GameEventComponent_div_0_div_7_h1_1_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275elementStart(0, "h1");
    i034.\u0275\u0275text(1);
    i034.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(3);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275textInterpolate(ctx_r1.currentEvent.title);
  }
}
function GameEventComponent_div_0_div_7_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275elementStart(0, "div", 26);
    i034.\u0275\u0275template(1, GameEventComponent_div_0_div_7_h1_1_Template, 2, 1, "h1", 17);
    i034.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", ctx_r1.currentEvent.title != void 0);
  }
}
function GameEventComponent_div_0_div_8_ng_container_1_ng_container_1_div_4_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275elementStart(0, "div", 32);
    i034.\u0275\u0275element(1, "app-text-with-image", 30);
    i034.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("rawText", "$other_next$");
  }
}
function GameEventComponent_div_0_div_8_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275elementContainerStart(0);
    i034.\u0275\u0275elementStart(1, "div", 29);
    i034.\u0275\u0275element(2, "app-text-with-image", 30);
    i034.\u0275\u0275pipe(3, "lowercase");
    i034.\u0275\u0275elementEnd();
    i034.\u0275\u0275template(4, GameEventComponent_div_0_div_8_ng_container_1_ng_container_1_div_4_Template, 2, 1, "div", 31);
    i034.\u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const phase_r6 = i034.\u0275\u0275nextContext().$implicit;
    const ctx_r1 = i034.\u0275\u0275nextContext(3);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275classProp("current", ctx_r1.currentPhase === phase_r6);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("rawText", "$other_phase_" + i034.\u0275\u0275pipeBind1(3, 4, phase_r6) + "$");
    i034.\u0275\u0275advance(2);
    i034.\u0275\u0275property("ngIf", phase_r6 != "RESEARCH");
  }
}
function GameEventComponent_div_0_div_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275elementContainerStart(0);
    i034.\u0275\u0275template(1, GameEventComponent_div_0_div_8_ng_container_1_ng_container_1_Template, 5, 6, "ng-container", 17);
    i034.\u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const phase_r6 = ctx.$implicit;
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", phase_r6 != "PLANIFICATION");
  }
}
function GameEventComponent_div_0_div_8_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275elementStart(0, "div", 27);
    i034.\u0275\u0275template(1, GameEventComponent_div_0_div_8_ng_container_1_Template, 2, 1, "ng-container", 28);
    i034.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275property("@enterFromLeft", void 0);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngForOf", ctx_r1.phaseList);
  }
}
function GameEventComponent_div_0_div_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = i034.\u0275\u0275getCurrentView();
    i034.\u0275\u0275elementStart(0, "div", 33)(1, "app-card-builder-list", 34);
    i034.\u0275\u0275listener("eventCardBuilderListButtonClicked", function GameEventComponent_div_0_div_11_Template_app_card_builder_list_eventCardBuilderListButtonClicked_1_listener($event) {
      i034.\u0275\u0275restoreView(_r7);
      const ctx_r1 = i034.\u0275\u0275nextContext(2);
      return i034.\u0275\u0275resetView(ctx_r1.eventCardBuilderListButtonClicked($event));
    });
    i034.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("event", ctx_r1.currentEvent)("eventId", ctx_r1.currentEvent.id);
  }
}
function GameEventComponent_div_0_app_phase_planification_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = i034.\u0275\u0275getCurrentView();
    i034.\u0275\u0275elementStart(0, "app-phase-planification", 35);
    i034.\u0275\u0275listener("phaseSelected", function GameEventComponent_div_0_app_phase_planification_12_Template_app_phase_planification_phaseSelected_0_listener() {
      i034.\u0275\u0275restoreView(_r8);
      const ctx_r1 = i034.\u0275\u0275nextContext(2);
      return i034.\u0275\u0275resetView(ctx_r1.phaseSelected());
    });
    i034.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275property("clientPlayerId", ctx_r1.clientPlayerId);
  }
}
function GameEventComponent_div_0_app_phase_production_13_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275element(0, "app-phase-production");
  }
}
function GameEventComponent_div_0_div_14_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275elementStart(0, "div", 36)(1, "h1");
    i034.\u0275\u0275text(2, "[Waiting for other players to be ready]");
    i034.\u0275\u0275elementEnd()();
  }
}
function GameEventComponent_div_0_div_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = i034.\u0275\u0275getCurrentView();
    i034.\u0275\u0275elementStart(0, "div", 37)(1, "app-project-card-list", 38, 0);
    i034.\u0275\u0275listener("updateSelectedCardList", function GameEventComponent_div_0_div_16_Template_app_project_card_list_updateSelectedCardList_1_listener($event) {
      i034.\u0275\u0275restoreView(_r9);
      const ctx_r1 = i034.\u0275\u0275nextContext(2);
      return i034.\u0275\u0275resetView(ctx_r1.updateSelectedCardList($event));
    });
    i034.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("currentPhase", ctx_r1.currentPhase)("cardListId", "game event list")("event", ctx_r1.currentEvent)("listType", ctx_r1.currentEvent.hasCardBuilder() ? "builderSelector" : "selector");
  }
}
function GameEventComponent_div_0_app_phase_card_upgrade_selector_17_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275element(0, "app-phase-card-upgrade-selector", 39);
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext(2);
    i034.\u0275\u0275property("event", ctx_r1.currentEvent);
  }
}
function GameEventComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    i034.\u0275\u0275elementStart(0, "div", 5)(1, "div", 6);
    i034.\u0275\u0275template(2, GameEventComponent_div_0_div_2_Template, 2, 2, "div", 7)(3, GameEventComponent_div_0_div_3_Template, 2, 2, "div", 8)(4, GameEventComponent_div_0_div_4_Template, 2, 2, "div", 9)(5, GameEventComponent_div_0_div_5_Template, 2, 2, "div", 9);
    i034.\u0275\u0275elementEnd();
    i034.\u0275\u0275elementStart(6, "div", 10);
    i034.\u0275\u0275template(7, GameEventComponent_div_0_div_7_Template, 2, 1, "div", 11);
    i034.\u0275\u0275elementEnd();
    i034.\u0275\u0275template(8, GameEventComponent_div_0_div_8_Template, 2, 2, "div", 12);
    i034.\u0275\u0275elementStart(9, "div", 13)(10, "div", 14);
    i034.\u0275\u0275template(11, GameEventComponent_div_0_div_11_Template, 2, 2, "div", 15)(12, GameEventComponent_div_0_app_phase_planification_12_Template, 1, 1, "app-phase-planification", 16)(13, GameEventComponent_div_0_app_phase_production_13_Template, 1, 0, "app-phase-production", 17)(14, GameEventComponent_div_0_div_14_Template, 3, 0, "div", 18);
    i034.\u0275\u0275elementStart(15, "div", 19);
    i034.\u0275\u0275template(16, GameEventComponent_div_0_div_16_Template, 3, 4, "div", 20)(17, GameEventComponent_div_0_app_phase_card_upgrade_selector_17_Template, 1, 1, "app-phase-card-upgrade-selector", 21);
    i034.\u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = i034.\u0275\u0275nextContext();
    i034.\u0275\u0275advance(2);
    i034.\u0275\u0275property("ngIf", ctx_r1.currentEvent.button);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", ctx_r1.sellCardsButton.enabled);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", ctx_r1.sellCardsCancelButton.enabled);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", ctx_r1.rollbackButton.enabled);
    i034.\u0275\u0275advance(2);
    i034.\u0275\u0275property("ngIf", ctx_r1.currentEvent.title != void 0);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", ctx_r1.currentPhase != "PLANIFICATION");
    i034.\u0275\u0275advance(3);
    i034.\u0275\u0275property("ngIf", ctx_r1.currentEvent.hasCardBuilder() === true);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", ctx_r1.currentPhase === "PLANIFICATION" && ctx_r1.currentEvent.subType === "planificationPhase");
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", ctx_r1.currentPhase === "PRODUCTION" && ctx_r1.currentEvent.subType === "productionPhase");
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", ctx_r1.currentEvent.subType === "waitingGroupReady");
    i034.\u0275\u0275advance(2);
    i034.\u0275\u0275property("ngIf", ctx_r1.currentEvent.hasSelector() === true);
    i034.\u0275\u0275advance();
    i034.\u0275\u0275property("ngIf", ctx_r1.currentEvent.subType === "upgradePhaseCards");
  }
}
var GameEventComponent = class _GameEventComponent {
  constructor(elRef, renderer, gameStateService) {
    this.elRef = elRef;
    this.renderer = renderer;
    this.gameStateService = gameStateService;
    this.delete = [];
    this.currentEventId = -1;
    this.eventCounter = -1;
    this.currentPhase = NonSelectablePhaseEnum.planification;
    this.phaseList = [
      NonSelectablePhaseEnum.planification,
      NonSelectablePhaseEnum.development,
      NonSelectablePhaseEnum.construction,
      NonSelectablePhaseEnum.action,
      NonSelectablePhaseEnum.production,
      NonSelectablePhaseEnum.research
    ];
    this.selectionActive = false;
    this.eventHandler = inject2(EventHandler);
    this.drawHandler = inject2(DrawEventHandler);
  }
  ngOnInit() {
    this.currentButtonSelectorId = -1;
    this.clientPlayerId = this.gameStateService.clientPlayerId;
    this.sellCardsButton = ButtonDesigner.createNonEventButton("sellOptionalCard");
    this.sellCardsCancelButton = ButtonDesigner.createNonEventButton("sellOptionalCardCancel");
    this.rollbackButton = ButtonDesigner.createNonEventButton("rollBack");
    this.gameStateService.currentPhase.subscribe((phase) => this.updatePhase(phase));
    this.gameStateService.currentDrawQueue.subscribe((drawQueue) => this.handleDrawQueueNext(drawQueue));
    this.gameStateService.currentEventQueue.subscribe((eventQueue) => this.handleEventQueueNext(eventQueue));
  }
  ngAfterViewInit() {
    const commandPannel = this.elRef.nativeElement.querySelector("#command-pannel");
    if (commandPannel) {
      const commandPannelHeight = commandPannel.offsetHeight;
      this.elRef.nativeElement.style.setProperty("--command-pannel-height", `${commandPannelHeight}px`);
    }
  }
  updatePhase(phase) {
    this.currentPhase = phase;
    let events = [];
    switch (phase) {
      case NonSelectablePhaseEnum.undefined: {
        return;
      }
      case NonSelectablePhaseEnum.planification: {
        this.gameStateService.clearEventQueue();
        events.push(EventDesigner.createGeneric("planificationPhase"));
        break;
      }
      case NonSelectablePhaseEnum.development: {
        events.push(EventDesigner.createPhase("developmentPhase"));
        break;
      }
      case NonSelectablePhaseEnum.construction: {
        events.push(EventDesigner.createPhase("constructionPhase"));
        break;
      }
      case NonSelectablePhaseEnum.action: {
        events.push(EventDesigner.createCardSelector("actionPhase"));
        break;
      }
      case NonSelectablePhaseEnum.production: {
        events.push(EventDesigner.createPhase("productionPhase"));
        break;
      }
      case NonSelectablePhaseEnum.research: {
        events.push(EventDesigner.createPhase("researchPhase"));
        break;
      }
    }
    events.push(EventDesigner.createCardSelector("selectCardForcedSell"));
    events.push(EventDesigner.createGeneric("endOfPhase"));
    this.gameStateService.addEventQueue(events, "last");
  }
  addPhaseCardUpgradeEvent(upgradeNumber, phaseIndexToUpgrade) {
    let newEvent = EventDesigner.createGeneric("upgradePhaseCards", {
      phaseCardUpgradeNumber: upgradeNumber,
      phaseCardUpgradeList: phaseIndexToUpgrade
    });
    this.gameStateService.addEventQueue(newEvent, "first");
  }
  handleDrawQueueNext(drawQueue) {
    this.drawHandler.handleQueueUpdate(drawQueue);
  }
  handleEventQueueNext(eventQueue) {
    this.currentEvent = this.eventHandler.handleQueueUpdate(eventQueue);
    this.resetSellButtonsState();
  }
  resetSellButtonsState() {
    this.sellCardsButton.resetStartEnabled();
    this.sellCardsCancelButton.resetStartEnabled();
  }
  buttonClicked(button) {
    console.log("game event button clicked:", button);
  }
  updateSelectedCardList(cardList) {
    this.eventHandler.updateSelectedCardList(cardList);
  }
  nonEventButtonClicked(button) {
    switch (button.name) {
      case "sellOptionalCard": {
        this.gameStateService.addEventQueue(EventDesigner.createCardSelector("selectCardOptionalSell"), "first");
        this.sellCardsButton.updateEnabled(false);
        this.sellCardsCancelButton.updateEnabled(true);
        break;
      }
      case "sellOptionalCardCancel": {
        this.eventHandler.cancelSellCardsOptional();
      }
    }
  }
  eventMainButtonClicked() {
    this.eventHandler.eventMainButtonClicked();
  }
  eventCardBuilderListButtonClicked(button) {
    this.eventHandler.cardBuilderButtonClicked(button);
    if (button.name === "buildCard") {
      this.cardListSelector.updateDiscount(this.currentEvent);
    }
  }
  phaseSelected() {
    this.eventHandler.updateEventMainButton(true);
  }
  static {
    this.\u0275fac = function GameEventComponent_Factory(t) {
      return new (t || _GameEventComponent)(i034.\u0275\u0275directiveInject(i034.ElementRef), i034.\u0275\u0275directiveInject(i034.Renderer2), i034.\u0275\u0275directiveInject(GameState));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i034.\u0275\u0275defineComponent({ type: _GameEventComponent, selectors: [["app-game-event"]], viewQuery: function GameEventComponent_Query(rf, ctx) {
      if (rf & 1) {
        i034.\u0275\u0275viewQuery(_c011, 5);
      }
      if (rf & 2) {
        let _t;
        i034.\u0275\u0275queryRefresh(_t = i034.\u0275\u0275loadQuery()) && (ctx.cardListSelector = _t.first);
      }
    }, standalone: true, features: [i034.\u0275\u0275ProvidersFeature([
      EventHandler,
      DrawEventHandler
    ]), i034.\u0275\u0275StandaloneFeature], decls: 4, vars: 2, consts: [["cardListSelector", ""], ["class", "wrapper-game-event", 4, "ngIf"], [1, "wrapper-selection-active", 3, "ngClass"], [1, "selection-active-left"], [1, "selection-active-right"], [1, "wrapper-game-event"], ["id", "command-pannel"], ["class", "wrapper-event-button wrapper-validate-button", 4, "ngIf"], ["class", "wrapper-event-button--smaller wrapper-sell-button", 4, "ngIf"], ["class", "wrapper-event-button--smaller", 4, "ngIf"], [1, "wrapper-title"], ["class", "wrapper-event-description ares-title", 4, "ngIf"], ["id", "round-pannel", "class", "ares-background ares-border", 4, "ngIf"], [1, "wrapper-event-main"], [1, "wrapper-event-top"], ["class", "wrapper-builder", 4, "ngIf"], [3, "clientPlayerId", "phaseSelected", 4, "ngIf"], [4, "ngIf"], ["class", "ares-background", 4, "ngIf"], [1, "wrapper-selectors"], ["class", "wrapper-card-selector", 4, "ngIf"], [3, "event", 4, "ngIf"], [1, "wrapper-event-button", "wrapper-validate-button"], [3, "buttonClicked", "button", "shape"], [1, "wrapper-event-button--smaller", "wrapper-sell-button"], [1, "wrapper-event-button--smaller"], [1, "wrapper-event-description", "ares-title"], ["id", "round-pannel", 1, "ares-background", "ares-border"], [4, "ngFor", "ngForOf"], [1, "wrapper-phase"], [3, "rawText"], ["class", "wrapper-next", 4, "ngIf"], [1, "wrapper-next"], [1, "wrapper-builder"], [3, "eventCardBuilderListButtonClicked", "event", "eventId"], [3, "phaseSelected", "clientPlayerId"], [1, "ares-background"], [1, "wrapper-card-selector"], [3, "updateSelectedCardList", "currentPhase", "cardListId", "event", "listType"], [3, "event"]], template: function GameEventComponent_Template(rf, ctx) {
      if (rf & 1) {
        i034.\u0275\u0275template(0, GameEventComponent_div_0_Template, 18, 12, "div", 1);
        i034.\u0275\u0275elementStart(1, "div", 2);
        i034.\u0275\u0275element(2, "div", 3)(3, "div", 4);
        i034.\u0275\u0275elementEnd();
      }
      if (rf & 2) {
        i034.\u0275\u0275property("ngIf", ctx.currentEvent);
        i034.\u0275\u0275advance();
        i034.\u0275\u0275property("ngClass", (ctx.currentEvent == null ? null : ctx.currentEvent.getSelectionActive()) === true ? "element-fade-in" : "element-fade-out");
      }
    }, dependencies: [
      CommonModule14,
      i25.NgClass,
      i25.NgForOf,
      i25.NgIf,
      i25.LowerCasePipe,
      PhasePlanificationComponent,
      PhaseProductionComponent,
      ProjectCardListComponent,
      PhaseCardUpgradeSelectorComponent,
      EventMainButtonComponent,
      CardBuilderListComponent,
      NonEventButtonComponent,
      TextWithImageComponent
    ], styles: ["\n\n[_nghost-%COMP%] {\n  --command-pannel-height: 0px;\n}\n#command-pannel[_ngcontent-%COMP%] {\n  z-index: 10;\n  position: sticky;\n  left: 0%;\n  top: calc(var(--navbar-height));\n  max-height: 100%;\n  height: 100px;\n  width: 17%;\n  padding: 1%;\n  padding-right: 0;\n  display: flex;\n  flex-direction: row;\n  align-items: top;\n  justify-content: center;\n  gap: 4%;\n}\n#round-pannel[_ngcontent-%COMP%] {\n  z-index: 1000;\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: auto;\n  width: 3%;\n  top: 34%;\n  border-left: 0;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  overflow: hidden;\n}\n.wrapper-phase[_ngcontent-%COMP%] {\n  filter: grayscale(80%);\n  margin: 10%;\n}\n.wrapper-phase[_ngcontent-%COMP%]     app-text-with-image img {\n  width: 100%;\n}\n.wrapper-phase.current[_ngcontent-%COMP%] {\n  filter: grayscale(0);\n  border-radius: 5px;\n  box-shadow: 0 0 5px 3px var(--color-ares-orange);\n  background: var(--color-ares-orange);\n}\n.wrapper-phase[_ngcontent-%COMP%]     app-text-with-image * {\n  display: block;\n}\n.wrapper-phase[_ngcontent-%COMP%]     app-text-with-image img {\n  width: 100%;\n  aspect-ratio: 1;\n}\n.wrapper-next[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 25%;\n  aspect-ratio: 1;\n}\n.wrapper-next[_ngcontent-%COMP%]     app-text-with-image * {\n  display: block;\n}\n.wrapper-next[_ngcontent-%COMP%]     app-text-with-image img {\n  width: 100%;\n  aspect-ratio: 1;\n}\n.wrapper-card-selector[_ngcontent-%COMP%] {\n  width: 100%;\n  height: fit-content;\n}\n.wrapper-selection-active[_ngcontent-%COMP%] {\n  z-index: -1;\n  position: fixed;\n  width: 100%;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: space-between;\n}\n.selection-active-left[_ngcontent-%COMP%] {\n  height: 100%;\n  width: 2%;\n  background:\n    linear-gradient(\n      to right,\n      var(--color-ares-blue),\n      rgba(255, 255, 255, 0));\n}\n.selection-active-right[_ngcontent-%COMP%] {\n  height: 100%;\n  width: 2%;\n  background:\n    linear-gradient(\n      to left,\n      var(--color-ares-blue),\n      rgba(255, 255, 255, 0));\n}\n.wrapper-event-button[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.wrapper-event-button--smaller[_ngcontent-%COMP%] {\n  height: 70%;\n}\n.wrapper-title[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: calc(-1 * var(--command-pannel-height));\n  height: var(--command-pannel-height);\n}\n.wrapper-game-event[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: auto;\n}\n.wrapper-event-main[_ngcontent-%COMP%] {\n  position: relative;\n  margin-top: calc(-1 * var(--command-pannel-height) * 2);\n  width: 100%;\n  min-height: fit-content;\n  padding-top: 1%;\n  padding-bottom: 100px;\n}\n.wrapper-event-top[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  width: 97%;\n  height: auto;\n  margin-left: 3%;\n  margin-top: var(--command-pannel-height);\n  min-height: var(--command-pannel-height);\n}\n.wrapper-builder[_ngcontent-%COMP%] {\n  position: sticky;\n  top: calc(var(--navbar-height));\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: start;\n  width: 40%;\n  height: fit-content;\n  padding-left: 0%;\n  padding-right: 0%;\n  padding-top: 0%;\n}\napp-card-builder-list[_ngcontent-%COMP%] {\n  height: fit-content;\n  width: 100%;\n}\n.wrapper-selectors[_ngcontent-%COMP%] {\n  display: flex;\n  height: fit-content;\n  flex-grow: 1;\n}\n.wrapper-event-description[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\napp-phase-card-upgrade-selector[_ngcontent-%COMP%] {\n  width: 100%;\n}\n/*# sourceMappingURL=game-event.component.css.map */"], data: { animation: [expandCollapseVertical, enterFromLeft] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i034.\u0275setClassDebugInfo(GameEventComponent, { className: "GameEventComponent", filePath: "src\\app\\components\\core-game\\game-event\\game-event.component.ts", lineNumber: 45 });
})();

// src/app/components/core-game/server-emulation/server-emulation.component.ts
import { Component as Component21 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule15 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i035 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i4 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
function ServerEmulationComponent_div_0_div_25_Template(rf, ctx) {
  if (rf & 1) {
    i035.\u0275\u0275elementStart(0, "div")(1, "p");
    i035.\u0275\u0275text(2);
    i035.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const event_r3 = ctx.$implicit;
    i035.\u0275\u0275advance(2);
    i035.\u0275\u0275textInterpolate5("[id]:", event_r3.id, " [type]:", event_r3.type, " [subtype]:", event_r3.subType, " [finalized]:", event_r3.finalized, " [autoFinalize]:", event_r3.autoFinalize, "");
  }
}
function ServerEmulationComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i035.\u0275\u0275getCurrentView();
    i035.\u0275\u0275elementStart(0, "div")(1, "h1");
    i035.\u0275\u0275text(2, "Server emulation - phase selection");
    i035.\u0275\u0275elementEnd();
    i035.\u0275\u0275elementStart(3, "h2");
    i035.\u0275\u0275text(4);
    i035.\u0275\u0275elementEnd();
    i035.\u0275\u0275elementStart(5, "div", 1)(6, "button", 2);
    i035.\u0275\u0275listener("click", function ServerEmulationComponent_div_0_Template_button_click_6_listener() {
      i035.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i035.\u0275\u0275nextContext();
      return i035.\u0275\u0275resetView(ctx_r1.printEventQueue());
    });
    i035.\u0275\u0275text(7, "Print eventqueue");
    i035.\u0275\u0275elementEnd();
    i035.\u0275\u0275elementStart(8, "button", 2);
    i035.\u0275\u0275listener("click", function ServerEmulationComponent_div_0_Template_button_click_8_listener() {
      i035.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i035.\u0275\u0275nextContext();
      return i035.\u0275\u0275resetView(ctx_r1.printDrawQueue());
    });
    i035.\u0275\u0275text(9, "Print drawQueu");
    i035.\u0275\u0275elementEnd();
    i035.\u0275\u0275elementStart(10, "button", 2);
    i035.\u0275\u0275listener("click", function ServerEmulationComponent_div_0_Template_button_click_10_listener() {
      i035.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i035.\u0275\u0275nextContext();
      return i035.\u0275\u0275resetView(ctx_r1.sendDrawNumber());
    });
    i035.\u0275\u0275text(11, "DrawNumber");
    i035.\u0275\u0275elementEnd();
    i035.\u0275\u0275elementStart(12, "button", 2);
    i035.\u0275\u0275listener("click", function ServerEmulationComponent_div_0_Template_button_click_12_listener() {
      i035.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i035.\u0275\u0275nextContext();
      return i035.\u0275\u0275resetView(ctx_r1.sendReady());
    });
    i035.\u0275\u0275text(13, "Ready");
    i035.\u0275\u0275elementEnd();
    i035.\u0275\u0275elementStart(14, "button", 2);
    i035.\u0275\u0275listener("click", function ServerEmulationComponent_div_0_Template_button_click_14_listener() {
      i035.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i035.\u0275\u0275nextContext();
      return i035.\u0275\u0275resetView(ctx_r1.sendNotReady());
    });
    i035.\u0275\u0275text(15, "Not Ready");
    i035.\u0275\u0275elementEnd();
    i035.\u0275\u0275elementStart(16, "button", 2);
    i035.\u0275\u0275listener("click", function ServerEmulationComponent_div_0_Template_button_click_16_listener() {
      i035.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i035.\u0275\u0275nextContext();
      return i035.\u0275\u0275resetView(ctx_r1.sendBotsReady());
    });
    i035.\u0275\u0275text(17, "Bots ready");
    i035.\u0275\u0275elementEnd();
    i035.\u0275\u0275elementStart(18, "button", 2);
    i035.\u0275\u0275listener("click", function ServerEmulationComponent_div_0_Template_button_click_18_listener() {
      i035.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i035.\u0275\u0275nextContext();
      return i035.\u0275\u0275resetView(ctx_r1.sendtest());
    });
    i035.\u0275\u0275text(19, "test");
    i035.\u0275\u0275elementEnd()();
    i035.\u0275\u0275elementStart(20, "div", 3)(21, "button", 4);
    i035.\u0275\u0275listener("click", function ServerEmulationComponent_div_0_Template_button_click_21_listener() {
      i035.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i035.\u0275\u0275nextContext();
      return i035.\u0275\u0275resetView(ctx_r1.printPlayersState());
    });
    i035.\u0275\u0275text(22, "players state");
    i035.\u0275\u0275elementEnd()();
    i035.\u0275\u0275elementStart(23, "p");
    i035.\u0275\u0275text(24, "eventQueue :");
    i035.\u0275\u0275elementEnd();
    i035.\u0275\u0275template(25, ServerEmulationComponent_div_0_div_25_Template, 3, 5, "div", 5);
    i035.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i035.\u0275\u0275nextContext();
    i035.\u0275\u0275advance(4);
    i035.\u0275\u0275textInterpolate1("Actual phase: ", ctx_r1.currentPhase, "");
    i035.\u0275\u0275advance(21);
    i035.\u0275\u0275property("ngForOf", ctx_r1.currentEventQueue);
  }
}
var ServerEmulationComponent = class _ServerEmulationComponent {
  constructor(gameStateService, cardInfoService, rxStompService) {
    this.gameStateService = gameStateService;
    this.cardInfoService = cardInfoService;
    this.rxStompService = rxStompService;
    this.debug = false;
    this.currentEventQueue = [];
    this.currentPhase = "planification";
    this.currentDrawQueue = [];
    this.currentGroupReady = [];
    this.cardsDeck = [];
    this.cardsDiscarded = [];
    this.phaseList = [SelectablePhaseEnum.development, SelectablePhaseEnum.construction, SelectablePhaseEnum.action, SelectablePhaseEnum.production, SelectablePhaseEnum.research];
    this.authorizedBotPhaseSelection = [SelectablePhaseEnum.development, SelectablePhaseEnum.construction, SelectablePhaseEnum.action, SelectablePhaseEnum.production, SelectablePhaseEnum.research];
  }
  ngOnInit() {
    this.cardsDeck = this.cardInfoService.getProjectCardIdList();
    this.gameStateService.addPlayer("joueur 1", "rgb(0, 0, 255)");
    this.gameStateService.addPlayer("joueur 2", "rgb(255, 0, 0)");
    this.gameStateService.addPlayer("joueur 3", "rgb(0, 255, 0)");
    this.gameStateService.addPlayer("joueur 4", "rgb(255, 255, 255)");
    this.gameStateService.currentPhase.subscribe((phase) => this.phaseChanged(phase));
    this.gameStateService.currentGroupPlayerState.subscribe((groupPlayerState) => this.currentGroupPlayerState = groupPlayerState);
    this.gameStateService.currentDrawQueue.subscribe(
      //drawQueue => this.handleDrawQueueRequest(drawQueue)
    );
    this.gameStateService.currentLoadingState.subscribe((loading) => this.loadingFinished(loading));
    this.gameStateService.currentEventQueue.subscribe((event) => this.currentEventQueue = event);
    this.gameStateService.currentGroupPlayerReady.subscribe((ready) => this.currentGroupReady = ready);
    let cardDrawList = [253];
  }
  ngAfterViewInit() {
    this.gameStateService.setPlayerIdList([0, 1, 2, 3]);
  }
  phaseChanged(phase) {
    if (this.gameStateService.loading.getValue() === true) {
      return;
    }
    this.currentPhase = phase;
    if (this.currentPhase === NonSelectablePhaseEnum.planification) {
      this.planificationPhaseBotSelection();
    }
    this.sendBotsReady();
  }
  planificationPhaseBotSelection() {
    for (let index of this.gameStateService.playerCount.getValue()) {
      if (index === this.gameStateService.clientPlayerId) {
        continue;
      }
    }
  }
  printPlayersState() {
    console.log(this.currentGroupPlayerState);
    console.log(this.gameStateService.groupPlayerReady.getValue());
  }
  loadingFinished(loading) {
    if (loading === true) {
      return;
    }
  }
  sendDrawNumber() {
    this.rxStompService.publishDraw(2, -1);
  }
  sendReady() {
    this.rxStompService.publishClientPlayerReady(true);
  }
  sendNotReady() {
    let message = JSON.stringify(WebsocketQueryMessageFactory.createReadyQuery(false));
    this.rxStompService.publish({ destination: "/app/player", body: message });
  }
  sendtest() {
    let message = JSON.stringify("test");
    this.rxStompService.publish({ destination: "/app/debug", body: message });
  }
  sendBotsReady() {
    this.rxStompService.publishDebugMessage({ content: "SET_BOTS_READY" });
    return;
    for (let index of this.gameStateService.playerCount.getValue()) {
      if (index === this.gameStateService.clientPlayerId) {
        continue;
      }
      this.botIdReady(index);
    }
  }
  botIdReady(id) {
    let message = { gameId: 1, playerId: id, contentEnum: MessageContentQueryEnum.ready, content: { ready: true } };
    this.rxStompService.publish({ destination: "/app/player", body: JSON.stringify(message) });
  }
  printEventQueue() {
    console.log(this.gameStateService.eventQueue.getValue());
  }
  printDrawQueue() {
    console.log(this.gameStateService.drawQueue.getValue());
  }
  static {
    this.\u0275fac = function ServerEmulationComponent_Factory(t) {
      return new (t || _ServerEmulationComponent)(i035.\u0275\u0275directiveInject(GameState), i035.\u0275\u0275directiveInject(ProjectCardInfoService), i035.\u0275\u0275directiveInject(RxStompService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i035.\u0275\u0275defineComponent({ type: _ServerEmulationComponent, selectors: [["app-server-emulation"]], standalone: true, features: [i035.\u0275\u0275StandaloneFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [1, "wrapper-phase-changer"], [1, "phase-research", "phase-selection-button", "clickable", 3, "click"], [1, "wrapper-game-state"], [3, "click"], [4, "ngFor", "ngForOf"]], template: function ServerEmulationComponent_Template(rf, ctx) {
      if (rf & 1) {
        i035.\u0275\u0275template(0, ServerEmulationComponent_div_0_Template, 26, 2, "div", 0);
      }
      if (rf & 2) {
        i035.\u0275\u0275property("ngIf", ctx.debug === true);
      }
    }, dependencies: [CommonModule15, i4.NgForOf, i4.NgIf], styles: ["\n\n.wrapper-phase-changer[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  border: grey solid 2px;\n}\n.phase-selection-button[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: black solid 1px;\n  padding: 2%;\n  border-radius: 10px;\n  min-width: 10%;\n  width: auto;\n}\n/*# sourceMappingURL=server-emulation.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i035.\u0275setClassDebugInfo(ServerEmulationComponent, { className: "ServerEmulationComponent", filePath: "src\\app\\components\\core-game\\server-emulation\\server-emulation.component.ts", lineNumber: 24 });
})();

// src/app/components/tools/layouts/horizontal-separator/horizontal-separator.component.ts
import { Component as Component22 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i036 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var HorizontalSeparatorComponent = class _HorizontalSeparatorComponent {
  static {
    this.\u0275fac = function HorizontalSeparatorComponent_Factory(t) {
      return new (t || _HorizontalSeparatorComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i036.\u0275\u0275defineComponent({ type: _HorizontalSeparatorComponent, selectors: [["app-horizontal-separator"]], standalone: true, features: [i036.\u0275\u0275StandaloneFeature], decls: 5, vars: 0, consts: [[1, "main"], [1, "line-mask"], [1, "line"], [1, "glow-mask"], [1, "glow"]], template: function HorizontalSeparatorComponent_Template(rf, ctx) {
      if (rf & 1) {
        i036.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        i036.\u0275\u0275element(2, "div", 2);
        i036.\u0275\u0275elementEnd();
        i036.\u0275\u0275elementStart(3, "div", 3);
        i036.\u0275\u0275element(4, "div", 4);
        i036.\u0275\u0275elementEnd()();
      }
    }, styles: ["\n\n.main[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n}\n.line[_ngcontent-%COMP%] {\n  width: 90%;\n  height: 15%;\n  background:\n    linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0) 0%,\n      white 20%,\n      white 80%,\n      rgba(255, 255, 255, 0) 100%);\n  border-radius: 50%;\n}\n.line-mask[_ngcontent-%COMP%] {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0) 0%,\n      white 40%,\n      white 60%,\n      rgba(255, 255, 255, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0) 0%,\n      white 40%,\n      white 60%,\n      rgba(255, 255, 255, 0) 100%);\n}\n.glow[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n  background:\n    linear-gradient(\n      to right,\n      rgba(255, 129, 25, 0) 0%,\n      rgba(255, 129, 25, 0.4) 10%,\n      rgba(255, 129, 25, 0.4) 90%,\n      rgba(255, 129, 25, 0) 100%);\n}\n.glow-mask[_ngcontent-%COMP%] {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(255, 129, 25, 0) 0%,\n      #ff8119 50%,\n      #ff8119 50%,\n      rgba(255, 129, 25, 0) 100%);\n  mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(255, 129, 25, 0) 0%,\n      #ff8119 50%,\n      #ff8119 50%,\n      rgba(255, 129, 25, 0) 100%);\n}\n/*# sourceMappingURL=horizontal-separator.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i036.\u0275setClassDebugInfo(HorizontalSeparatorComponent, { className: "HorizontalSeparatorComponent", filePath: "src\\app\\components\\tools\\layouts\\horizontal-separator\\horizontal-separator.component.ts", lineNumber: 10 });
})();

// src/app/models/core-game/websocket-handler.ts
import { Injectable as Injectable15 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i037 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var WebsocketHandler = class _WebsocketHandler {
  constructor(gameStateService) {
    this.gameStateService = gameStateService;
    this.clientPlayerId = this.gameStateService.clientPlayerId;
  }
  /*
  handleMessage(message: WsInputMessage){
      switch(message.subscription){
          case(SubscriptionEnum.player):{
              this.handlePlayerMessage(WebsocketResultMessageFactory.createPlayerMessageResult(message.message))
              break
          }
          case(SubscriptionEnum.group):{
              this.handleGroupMessage(WebsocketResultMessageFactory.createGroupMessageResult(message.message))
              break
          }
      }
  }
  */
  handlePlayerMessage(message) {
    Utils.logReceivedMessage(`[${message.contentEnum}] ON [PLAYER CHANNEL]`, message.content);
    switch (message.contentEnum) {
      case PlayerMessageContentResultEnum.draw: {
        this.handlePlayerMessageDrawResult(message.content);
        break;
      }
      case PlayerMessageContentResultEnum.gameState: {
        this.handleMessageGameState(message.content, "player");
        break;
      }
      case PlayerMessageContentResultEnum.startGame: {
        this.gameStateService.startGame();
        break;
      }
      case PlayerMessageContentResultEnum.playerConnect: {
        this.handleMessageConnection(message.content);
        break;
      }
      default: {
        console.log("UNHANDLED PLAYER MESSAGE RECEIVED: ", message);
      }
    }
  }
  handleGroupMessage(message) {
    Utils.logReceivedMessage(`[${message.contentEnum}] ON [GROUP CHANNEL]`, message.content);
    switch (message.contentEnum) {
      case GroupMessageContentResultEnum.debug: {
        break;
      }
      case GroupMessageContentResultEnum.ready: {
        this.handleGroupMessageReadyResult(WebsocketResultMessageFactory.inputToGroupReady(message.content));
        break;
      }
      case GroupMessageContentResultEnum.nextPhase: {
        this.handleMessageGameState(message.content, "group");
        break;
      }
      case GroupMessageContentResultEnum.serverSideUnhandled: {
        console.log("SERVER SIDE UNHANDLED MESSAGE RECEIVED: ", message.content);
        break;
      }
      default: {
        console.log("UNHANDLED GROUP MESSAGE RECEIVED: ", message);
      }
    }
  }
  //Player messages
  handlePlayerMessageDrawResult(content) {
    this.gameStateService.handleWsDrawResult(content);
  }
  handleMessageGameState(content, origin) {
    this.gameStateService.clearEventQueue();
    this.gameStateService.setCurrentPhase(content.currentPhase);
    this.handleGroupMessageReadyResult(WebsocketResultMessageFactory.inputToGroupReady(content.groupReady));
    this.handleGroupMessageGameState(WebsocketResultMessageFactory.inputToGroupStateDTO(content.groupPlayerStatePublic));
  }
  handleMessageConnection(content) {
    this.handleMessageGameState(content);
  }
  //Group messages
  handleGroupMessageReadyResult(groupReady) {
    this.gameStateService.setGroupReady(groupReady);
    switch (this.gameStateService.getClientReady()) {
      case false: {
        this.gameStateService.finalizeEventWaitingGroupReady();
        return;
      }
      case true: {
        this.gameStateService.clearEventQueue();
        this.gameStateService.addEventQueue(EventDesigner.createGeneric("waitingGroupReady"), "first");
        return;
      }
    }
  }
  handleGroupMessageGameState(groupState) {
    this.gameStateService.setGroupStateFromJson(groupState);
    this.gameStateService.setGameLoaded();
  }
  static {
    this.\u0275fac = function WebsocketHandler_Factory(t) {
      return new (t || _WebsocketHandler)(i037.\u0275\u0275inject(GameState));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i037.\u0275\u0275defineInjectable({ token: _WebsocketHandler, factory: _WebsocketHandler.\u0275fac });
  }
};

// src/app/components/core-game/navigation/navigation.component.ts
import { CommonModule as CommonModule24 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import { Component as Component31, Input as Input22 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/components/player-info/player-pannel/player-pannel.component.ts
import { CommonModule as CommonModule21 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import { Component as Component28, Input as Input20 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/components/player-info/global-pannel/global-pannel.component.ts
import { Component as Component23, Input as Input15 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule16 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i038 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i19 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
function GlobalPannelComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    i038.\u0275\u0275elementStart(0, "div", 7);
    i038.\u0275\u0275element(1, "img", 10);
    i038.\u0275\u0275elementEnd();
  }
}
function GlobalPannelComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    i038.\u0275\u0275elementStart(0, "div", 7);
    i038.\u0275\u0275element(1, "img", 11);
    i038.\u0275\u0275elementEnd();
  }
}
var GlobalPannelComponent = class _GlobalPannelComponent {
  static {
    this.\u0275fac = function GlobalPannelComponent_Factory(t) {
      return new (t || _GlobalPannelComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i038.\u0275\u0275defineComponent({ type: _GlobalPannelComponent, selectors: [["app-global-pannel"]], inputs: { playerId: "playerId", playerState: "playerState", playerIsReady: "playerIsReady", playerPhase: "playerPhase", currentPhase: "currentPhase" }, standalone: true, features: [i038.\u0275\u0275StandaloneFeature], decls: 29, vars: 6, consts: [[1, "wrapper-pannel", "ares-card"], [1, "wrapper-player-name"], [1, "pannel-card"], ["class", "pannel-text", 4, "ngIf"], [1, "pannel-image"], [1, "card-icon"], [1, "vp-icon"], [1, "pannel-text"], ["src", "/assets/other/tr.png", "alt", ""], ["src", "/assets/other/card.png", "alt", ""], ["src", "/assets/other/ready.png", "alt", ""], ["src", "/assets/other/hourglass.png", "alt", "", 1, "hourglass"]], template: function GlobalPannelComponent_Template(rf, ctx) {
      if (rf & 1) {
        i038.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "p");
        i038.\u0275\u0275text(3);
        i038.\u0275\u0275elementEnd()();
        i038.\u0275\u0275elementStart(4, "div", 2);
        i038.\u0275\u0275template(5, GlobalPannelComponent_div_5_Template, 2, 0, "div", 3)(6, GlobalPannelComponent_div_6_Template, 2, 0, "div", 3);
        i038.\u0275\u0275elementEnd();
        i038.\u0275\u0275elementStart(7, "div", 2);
        i038.\u0275\u0275element(8, "div", 4);
        i038.\u0275\u0275elementEnd();
        i038.\u0275\u0275elementStart(9, "div", 2)(10, "div", 5)(11, "div", 6)(12, "p");
        i038.\u0275\u0275text(13, "VP");
        i038.\u0275\u0275elementEnd()()();
        i038.\u0275\u0275elementStart(14, "div", 7)(15, "p");
        i038.\u0275\u0275text(16);
        i038.\u0275\u0275elementEnd()()();
        i038.\u0275\u0275elementStart(17, "div", 2)(18, "div", 5);
        i038.\u0275\u0275element(19, "img", 8);
        i038.\u0275\u0275elementEnd();
        i038.\u0275\u0275elementStart(20, "div", 7)(21, "p");
        i038.\u0275\u0275text(22);
        i038.\u0275\u0275elementEnd()()();
        i038.\u0275\u0275elementStart(23, "div", 2)(24, "div", 5);
        i038.\u0275\u0275element(25, "img", 9);
        i038.\u0275\u0275elementEnd();
        i038.\u0275\u0275elementStart(26, "div", 7)(27, "p");
        i038.\u0275\u0275text(28);
        i038.\u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        i038.\u0275\u0275advance(3);
        i038.\u0275\u0275textInterpolate(ctx.playerState.getName());
        i038.\u0275\u0275advance(2);
        i038.\u0275\u0275property("ngIf", ctx.playerIsReady);
        i038.\u0275\u0275advance();
        i038.\u0275\u0275property("ngIf", ctx.playerIsReady === false);
        i038.\u0275\u0275advance(10);
        i038.\u0275\u0275textInterpolate(ctx.playerState.getVP());
        i038.\u0275\u0275advance(6);
        i038.\u0275\u0275textInterpolate(ctx.playerState.getTR());
        i038.\u0275\u0275advance(6);
        i038.\u0275\u0275textInterpolate(ctx.playerState.getHandCurrentSize());
      }
    }, dependencies: [CommonModule16, i19.NgIf], styles: ["\n\n.wrapper-pannel[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 2px;\n  width: auto;\n  height: 100%;\n}\n.pannel-card[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  aspect-ratio: 1;\n}\n.pannel-image[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n}\n.pannel-image[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  max-height: 90%;\n  max-width: 90%;\n}\n.card-icon[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: auto;\n  height: 100%;\n  height: 55%;\n}\n.card-icon[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  max-height: 100%;\n}\n.pannel-text[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n.pannel-text[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  max-width: 100%;\n  max-height: 100%;\n}\n.vp-icon[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: relative;\n  border-radius: 25%;\n  border-width: 2px;\n  border-style: solid;\n  border-color: rgb(61, 61, 61);\n  outline: rgb(216, 216, 216) 1px solid;\n  outline-offset: 0px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 80%;\n  aspect-ratio: 1.5;\n  background:\n    linear-gradient(\n      0deg,\n      rgb(26, 17, 9) 0%,\n      rgb(143, 92, 63) 35%,\n      rgb(255, 239, 213) 100%);\n}\n.vp-icon[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-size: 15px;\n  font-weight: bold;\n  color: black;\n}\n.wrapper-player-name[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n  background-color: rgba(255, 0, 0, 0.3);\n  height: 100%;\n  padding-left: 3%;\n}\n.hourglass[_ngcontent-%COMP%] {\n  height: 75%;\n}\n/*# sourceMappingURL=global-pannel.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i038.\u0275setClassDebugInfo(GlobalPannelComponent, { className: "GlobalPannelComponent", filePath: "src\\app\\components\\player-info\\global-pannel\\global-pannel.component.ts", lineNumber: 14 });
})();

// src/app/components/player-info/ressource-pannel/ressource-pannel.component.ts
import { Component as Component25, Input as Input17 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule18 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";

// src/app/components/player-info/ressource-card/ressource-card.component.ts
import { Component as Component24, Input as Input16 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule17 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i039 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i110 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c012 = (a0) => ({ "img-card": a0 });
var _c16 = (a0) => [a0];
function RessourceCardComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    i039.\u0275\u0275elementStart(0, "div", 9)(1, "p", 8);
    i039.\u0275\u0275text(2);
    i039.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = i039.\u0275\u0275nextContext();
    i039.\u0275\u0275advance(2);
    i039.\u0275\u0275textInterpolate1(" ", ctx_r0.ressource.valueStock, "");
  }
}
function RessourceCardComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    i039.\u0275\u0275elementStart(0, "div", 10)(1, "div", 11);
    i039.\u0275\u0275element(2, "img", 12);
    i039.\u0275\u0275elementEnd();
    i039.\u0275\u0275elementStart(3, "div", 13)(4, "p", 14);
    i039.\u0275\u0275text(5);
    i039.\u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = i039.\u0275\u0275nextContext();
    i039.\u0275\u0275advance(5);
    i039.\u0275\u0275textInterpolate(ctx_r0.ressource.valueMod);
  }
}
var RessourceCardComponent = class _RessourceCardComponent {
  ngOnInit() {
    this.imageUrl = GlobalInfo.getUrlFromID(this.ressource.imageUrlId);
    switch (this.ressource.name) {
      case "card": {
        this._production = "blue";
        break;
      }
      case "steel":
      case "titanium": {
        this._production = "grey";
        break;
      }
      default: {
        this._production = "red";
      }
    }
  }
  static {
    this.\u0275fac = function RessourceCardComponent_Factory(t) {
      return new (t || _RessourceCardComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i039.\u0275\u0275defineComponent({ type: _RessourceCardComponent, selectors: [["app-ressource-card"]], inputs: { playerId: "playerId", ressource: "ressource" }, standalone: true, features: [i039.\u0275\u0275StandaloneFeature], decls: 10, vars: 11, consts: [[1, "main", "ares-card"], [1, "wrapper-ressource--stock"], [1, "box-ressource-icon"], [3, "ngClass", "src", "alt"], ["class", "box-stock", 4, "ngIf"], ["class", "wrapper-ressource-mod", 4, "ngIf"], [1, "wrapper-ressource--production"], [1, "box-production", 3, "ngClass"], [1, "center"], [1, "box-stock"], [1, "wrapper-ressource-mod"], [1, "box-ressource-mod-icon", "center"], ["src", "/assets/ressource/megacreditvoid.png", "alt", "ressourceCard.description"], [1, "box-ressource-mod-value"], [1, "text-cost-mod", "center"]], template: function RessourceCardComponent_Template(rf, ctx) {
      if (rf & 1) {
        i039.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2);
        i039.\u0275\u0275element(3, "img", 3);
        i039.\u0275\u0275elementEnd();
        i039.\u0275\u0275template(4, RessourceCardComponent_div_4_Template, 3, 1, "div", 4)(5, RessourceCardComponent_div_5_Template, 6, 1, "div", 5);
        i039.\u0275\u0275elementEnd();
        i039.\u0275\u0275elementStart(6, "div", 6)(7, "div", 7)(8, "p", 8);
        i039.\u0275\u0275text(9);
        i039.\u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        i039.\u0275\u0275advance(3);
        i039.\u0275\u0275property("ngClass", i039.\u0275\u0275pureFunction1(7, _c012, ctx.ressource.name == "card"))("src", ctx.imageUrl, i039.\u0275\u0275sanitizeUrl)("alt", ctx.ressource.name);
        i039.\u0275\u0275advance();
        i039.\u0275\u0275property("ngIf", ctx.ressource.hasStock);
        i039.\u0275\u0275advance();
        i039.\u0275\u0275property("ngIf", ctx.ressource.valueMod);
        i039.\u0275\u0275advance(2);
        i039.\u0275\u0275property("ngClass", i039.\u0275\u0275pureFunction1(9, _c16, "background-production--" + ctx._production));
        i039.\u0275\u0275advance(2);
        i039.\u0275\u0275textInterpolate(ctx.ressource.valueProd);
      }
    }, dependencies: [CommonModule17, i110.NgClass, i110.NgIf], styles: ["\n\np[_ngcontent-%COMP%] {\n  color: black;\n  font-size: 100%;\n  font-weight: 600;\n  text-shadow:\n    -1px 0 rgba(255, 255, 255, 0.3),\n    0 1px rgba(255, 255, 255, 0.3),\n    1px 0 rgba(255, 255, 255, 0.3),\n    0 -1px rgba(255, 255, 255, 0.3);\n  background:\n    radial-gradient(\n      rgba(255, 255, 255, 0.3) 0%,\n      rgba(255, 255, 255, 0.3) 20%,\n      rgba(0, 0, 0, 0) 25%);\n}\nimg[_ngcontent-%COMP%] {\n  max-width: 100%;\n  max-height: 100%;\n}\n.main[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  gap: 5%;\n  margin-left: 0%;\n  margin-right: 0%;\n  height: 100%;\n  aspect-ratio: 2;\n}\n.wrapper-ressource--stock[_ngcontent-%COMP%] {\n  position: relative;\n  aspect-ratio: 1;\n  height: 90%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.wrapper-ressource--production[_ngcontent-%COMP%] {\n  position: relative;\n  aspect-ratio: 1;\n  height: 90%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.box-ressource-icon[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n}\n.box-stock[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n.wrapper-ressource-mod[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 50%;\n  aspect-ratio: 1;\n  top: -4%;\n  left: 54%;\n}\n.wrapper-ressource-mod[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-size: 90%;\n}\n.wrapper-ressource-mod[_ngcontent-%COMP%]   .box-ressource-mod-icon[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n.wrapper-ressource-mod[_ngcontent-%COMP%]   .box-ressource-mod-value[_ngcontent-%COMP%] {\n  position: relative;\n  z-index: 10;\n  width: 100%;\n  height: 100%;\n}\n.box-production[_ngcontent-%COMP%] {\n  height: calc(100% - 4px);\n  aspect-ratio: 1;\n}\n.background-production--red[_ngcontent-%COMP%] {\n  border: grey 2px solid;\n  border-radius: 4px;\n  background-size: 80px 80px;\n}\n.background-production--blue[_ngcontent-%COMP%] {\n  border: grey 2px solid;\n  border-radius: 4px;\n  background-size: 80px 80px;\n}\n.background-production--grey[_ngcontent-%COMP%] {\n  border: grey 2px solid;\n  border-radius: 4px;\n  background-size: 80px 80px;\n}\n.img-card[_ngcontent-%COMP%] {\n  height: 95%;\n}\n/*# sourceMappingURL=ressource-card.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i039.\u0275setClassDebugInfo(RessourceCardComponent, { className: "RessourceCardComponent", filePath: "src\\app\\components\\player-info\\ressource-card\\ressource-card.component.ts", lineNumber: 17 });
})();

// src/app/components/player-info/ressource-pannel/ressource-pannel.component.ts
import * as i040 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i111 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
function RessourcePannelComponent_app_ressource_card_1_Template(rf, ctx) {
  if (rf & 1) {
    i040.\u0275\u0275element(0, "app-ressource-card", 2);
  }
  if (rf & 2) {
    const ressourceCard_r1 = ctx.$implicit;
    i040.\u0275\u0275property("ressource", ressourceCard_r1);
  }
}
var RessourcePannelComponent = class _RessourcePannelComponent {
  ngOnInit() {
  }
  static {
    this.\u0275fac = function RessourcePannelComponent_Factory(t) {
      return new (t || _RessourcePannelComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i040.\u0275\u0275defineComponent({ type: _RessourcePannelComponent, selectors: [["app-ressource-pannel"]], inputs: { playerId: "playerId", ressource: "ressource" }, standalone: true, features: [i040.\u0275\u0275StandaloneFeature], decls: 2, vars: 1, consts: [[1, "ressource-pannel"], [3, "ressource", 4, "ngFor", "ngForOf"], [3, "ressource"]], template: function RessourcePannelComponent_Template(rf, ctx) {
      if (rf & 1) {
        i040.\u0275\u0275elementStart(0, "div", 0);
        i040.\u0275\u0275template(1, RessourcePannelComponent_app_ressource_card_1_Template, 1, 1, "app-ressource-card", 1);
        i040.\u0275\u0275elementEnd();
      }
      if (rf & 2) {
        i040.\u0275\u0275advance();
        i040.\u0275\u0275property("ngForOf", ctx.ressource);
      }
    }, dependencies: [CommonModule18, i111.NgForOf, RessourceCardComponent], styles: ["\n\n.ressource-pannel[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 3px;\n  width: auto;\n  height: 100%;\n}\napp-ressource-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n/*# sourceMappingURL=ressource-pannel.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i040.\u0275setClassDebugInfo(RessourcePannelComponent, { className: "RessourcePannelComponent", filePath: "src\\app\\components\\player-info\\ressource-pannel\\ressource-pannel.component.ts", lineNumber: 16 });
})();

// src/app/components/player-info/tag-pannel/tag-pannel.component.ts
import { Component as Component27, Input as Input19 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule20 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";

// src/app/components/player-info/tag-card/tag-card.component.ts
import { Component as Component26, Input as Input18 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule19 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i041 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i112 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c013 = (a0) => ({ "full-greyed-filter": a0 });
function TagCardComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    i041.\u0275\u0275elementStart(0, "div", 7)(1, "div", 8);
    i041.\u0275\u0275element(2, "img", 9);
    i041.\u0275\u0275elementEnd();
    i041.\u0275\u0275elementStart(3, "div", 10)(4, "p", 6);
    i041.\u0275\u0275text(5);
    i041.\u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = i041.\u0275\u0275nextContext();
    i041.\u0275\u0275advance(5);
    i041.\u0275\u0275textInterpolate(ctx_r0.tagState.valueMod);
  }
}
var TagCardComponent = class _TagCardComponent {
  ngOnInit() {
    this.imageUrl = GlobalInfo.getUrlFromID(this.tagState.idImageUrl);
  }
  static {
    this.\u0275fac = function TagCardComponent_Factory(t) {
      return new (t || _TagCardComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i041.\u0275\u0275defineComponent({ type: _TagCardComponent, selectors: [["app-tag-card"]], inputs: { tagState: "tagState" }, standalone: true, features: [i041.\u0275\u0275StandaloneFeature], decls: 8, vars: 7, consts: [[1, "main"], [1, "wrapper-tag"], [1, "box-tag-icon"], [3, "ngClass", "src", "alt"], ["class", "box-tag-mod", 4, "ngIf"], [1, "wrapper-tag-text"], [1, "center"], [1, "box-tag-mod"], [1, "box-tag-mod-icon", "center"], ["src", "imageUrl", "alt", "tagState.name"], [1, "box-tag-mod-value"]], template: function TagCardComponent_Template(rf, ctx) {
      if (rf & 1) {
        i041.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2);
        i041.\u0275\u0275element(3, "img", 3);
        i041.\u0275\u0275elementEnd();
        i041.\u0275\u0275template(4, TagCardComponent_div_4_Template, 6, 1, "div", 4);
        i041.\u0275\u0275elementEnd();
        i041.\u0275\u0275elementStart(5, "div", 5)(6, "p", 6);
        i041.\u0275\u0275text(7);
        i041.\u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        i041.\u0275\u0275advance(3);
        i041.\u0275\u0275property("ngClass", i041.\u0275\u0275pureFunction1(5, _c013, ctx.tagState.valueCount === 0))("src", ctx.imageUrl, i041.\u0275\u0275sanitizeUrl)("alt", ctx.tagState.name);
        i041.\u0275\u0275advance();
        i041.\u0275\u0275property("ngIf", ctx.tagState.valueMod);
        i041.\u0275\u0275advance(3);
        i041.\u0275\u0275textInterpolate(ctx.tagState.valueCount);
      }
    }, dependencies: [CommonModule19, i112.NgClass, i112.NgIf], styles: ["\n\np[_ngcontent-%COMP%] {\n  color: black;\n  font-size: 90%;\n  font-weight: 600;\n  text-shadow:\n    -1px 0 rgba(255, 255, 255, 0.4),\n    0 1px rgba(255, 255, 255, 0.4),\n    1px 0 rgba(255, 255, 255, 0.4),\n    0 -1px rgba(255, 255, 255, 0.4);\n  background:\n    radial-gradient(\n      rgba(255, 255, 255, 0.3) 0%,\n      rgba(255, 255, 255, 0.3) 70%,\n      rgba(0, 0, 0, 0) 25%);\n}\nimg[_ngcontent-%COMP%] {\n  width: 100%;\n  aspect-ratio: 1;\n}\n.main[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n.wrapper-tag[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 80%;\n  aspect-ratio: 1;\n}\n.box-tag-icon[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  z-index: 1;\n  width: 100%;\n  aspect-ratio: 1;\n}\n.box-tag-mod[_ngcontent-%COMP%] {\n  z-index: 2;\n  display: grid;\n}\n.box-tag-mod[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 1;\n  grid-row-end: 2;\n}\n.wrapper-tag-text[_ngcontent-%COMP%] {\n  z-index: 1;\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n.wrapper-tag-text[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  top: 50%;\n  position: absolute;\n  width: auto;\n  height: auto;\n}\n/*# sourceMappingURL=tag-card.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i041.\u0275setClassDebugInfo(TagCardComponent, { className: "TagCardComponent", filePath: "src\\app\\components\\player-info\\tag-card\\tag-card.component.ts", lineNumber: 14 });
})();

// src/app/components/player-info/tag-pannel/tag-pannel.component.ts
import * as i042 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i113 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
function TagPannelComponent_app_tag_card_1_Template(rf, ctx) {
  if (rf & 1) {
    i042.\u0275\u0275element(0, "app-tag-card", 2);
  }
  if (rf & 2) {
    const tagCard_r1 = ctx.$implicit;
    i042.\u0275\u0275property("tagState", tagCard_r1);
  }
}
var TagPannelComponent = class _TagPannelComponent {
  ngOnInit() {
  }
  static {
    this.\u0275fac = function TagPannelComponent_Factory(t) {
      return new (t || _TagPannelComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i042.\u0275\u0275defineComponent({ type: _TagPannelComponent, selectors: [["app-tag-pannel"]], inputs: { playerId: "playerId", tagState: "tagState" }, standalone: true, features: [i042.\u0275\u0275StandaloneFeature], decls: 2, vars: 1, consts: [[1, "tag-pannel", "ares-card"], [3, "tagState", 4, "ngFor", "ngForOf"], [3, "tagState"]], template: function TagPannelComponent_Template(rf, ctx) {
      if (rf & 1) {
        i042.\u0275\u0275elementStart(0, "div", 0);
        i042.\u0275\u0275template(1, TagPannelComponent_app_tag_card_1_Template, 1, 1, "app-tag-card", 1);
        i042.\u0275\u0275elementEnd();
      }
      if (rf & 2) {
        i042.\u0275\u0275advance();
        i042.\u0275\u0275property("ngForOf", ctx.tagState);
      }
    }, dependencies: [CommonModule20, i113.NgForOf, TagCardComponent], styles: ["\n\n.tag-pannel[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 100%;\n}\napp-tag-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n/*# sourceMappingURL=tag-pannel.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i042.\u0275setClassDebugInfo(TagPannelComponent, { className: "TagPannelComponent", filePath: "src\\app\\components\\player-info\\tag-pannel\\tag-pannel.component.ts", lineNumber: 16 });
})();

// src/app/components/player-info/player-pannel/player-pannel.component.ts
import * as i043 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var PlayerPannelComponent = class _PlayerPannelComponent {
  constructor(gameStateService) {
    this.gameStateService = gameStateService;
  }
  ngOnInit() {
    this.gameStateService.currentGroupPlayerState.subscribe((playersState) => this.updatePlayerState());
    this.gameStateService.currentGroupPlayerReady.subscribe((playersReady) => this.updatePlayerReady());
    this.gameStateService.currentGroupPlayerSelectedPhase.subscribe((playerPhase) => this.updatePlayerPhase(playerPhase));
    this.gameStateService.currentPhase.subscribe((phase) => this.currentPhase = phase);
    this.updatePlayerState();
  }
  updatePlayerState() {
    var checkPlayerState = this.gameStateService.getPlayerStateFromId(this.playerId);
    if (checkPlayerState === void 0) {
      return;
    }
    if (checkPlayerState != this.playerState) {
      this.playerState = checkPlayerState;
      this.playerName = checkPlayerState.getName();
    }
  }
  updatePlayerReady() {
    this.playerIsReady = this.gameStateService.getPlayerReady(this.playerId);
  }
  updatePlayerPhase(playerPhase) {
    for (let phase of playerPhase) {
      if (phase.playerId === this.playerId) {
        this.playerPhase = phase;
        break;
      }
    }
  }
  static {
    this.\u0275fac = function PlayerPannelComponent_Factory(t) {
      return new (t || _PlayerPannelComponent)(i043.\u0275\u0275directiveInject(GameState));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i043.\u0275\u0275defineComponent({ type: _PlayerPannelComponent, selectors: [["app-player-pannel"]], inputs: { playerId: "playerId" }, standalone: true, features: [i043.\u0275\u0275StandaloneFeature], decls: 7, vars: 9, consts: [[1, "wrapper-player-pannel"], [1, "wrapper-global-pannel"], [3, "playerId", "playerState", "playerIsReady", "playerPhase", "currentPhase"], [1, "wrapper-ressource-pannel"], [3, "playerId", "ressource"], [1, "wrapper-tag-pannel"], [3, "playerId", "tagState"]], template: function PlayerPannelComponent_Template(rf, ctx) {
      if (rf & 1) {
        i043.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        i043.\u0275\u0275element(2, "app-global-pannel", 2);
        i043.\u0275\u0275elementEnd();
        i043.\u0275\u0275elementStart(3, "div", 3);
        i043.\u0275\u0275element(4, "app-ressource-pannel", 4);
        i043.\u0275\u0275elementEnd();
        i043.\u0275\u0275elementStart(5, "div", 5);
        i043.\u0275\u0275element(6, "app-tag-pannel", 6);
        i043.\u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        i043.\u0275\u0275advance(2);
        i043.\u0275\u0275property("playerId", ctx.playerId)("playerState", ctx.playerState)("playerIsReady", ctx.playerIsReady)("playerPhase", ctx.playerPhase)("currentPhase", ctx.currentPhase);
        i043.\u0275\u0275advance(2);
        i043.\u0275\u0275property("playerId", ctx.playerId)("ressource", ctx.playerState.getRessources());
        i043.\u0275\u0275advance(2);
        i043.\u0275\u0275property("playerId", ctx.playerId)("tagState", ctx.playerState.getTags());
      }
    }, dependencies: [
      CommonModule21,
      RessourcePannelComponent,
      TagPannelComponent,
      GlobalPannelComponent
    ], styles: ["\n\n.wrapper-player-pannel[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  height: 30px;\n  justify-content: space-around;\n  padding-right: 1%;\n  margin: 2px;\n  width: 100%;\n}\napp-global-pannel[_ngcontent-%COMP%], app-ressource-pannel[_ngcontent-%COMP%], app-tag-pannel[_ngcontent-%COMP%] {\n  height: 100%;\n  width: 25%;\n}\n.wrapper-tag-pannel[_ngcontent-%COMP%] {\n  height: 100%;\n  width: 22%;\n}\n.wrapper-ressource-pannel[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.wrapper-global-pannel[_ngcontent-%COMP%], app-global-pannel[_ngcontent-%COMP%] {\n  height: 100%;\n  width: auto;\n  flex-grow: 0.85;\n}\n/*# sourceMappingURL=player-pannel.component.css.map */"], data: { animation: [expandCollapseVertical] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i043.\u0275setClassDebugInfo(PlayerPannelComponent, { className: "PlayerPannelComponent", filePath: "src\\app\\components\\player-info\\player-pannel\\player-pannel.component.ts", lineNumber: 25 });
})();

// src/app/components/player-info/global-parameter-pannel/global-parameter-pannel.component.ts
import { Component as Component30 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";

// src/app/components/player-info/global-parameter-card/global-parameter-card.component.ts
import { Component as Component29, Input as Input21 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import { CommonModule as CommonModule22 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i044 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i114 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
function GlobalParameterCardComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    i044.\u0275\u0275element(0, "div", 5);
  }
  if (rf & 2) {
    const bubble_r1 = ctx.$implicit;
    const ctx_r1 = i044.\u0275\u0275nextContext();
    i044.\u0275\u0275classProp("current", bubble_r1 === ctx_r1._progressionList[ctx_r1._currentStep]);
  }
}
var GlobalParameterCardComponent = class _GlobalParameterCardComponent {
  constructor() {
    this._maxStep = 0;
    this._currentStep = 7;
  }
  ngOnInit() {
    switch (this.parameter) {
      case "ocean": {
        this._progressionList = [1, 2, 3, 4, 5, 6, 7, 8, 9];
        this._maxStep = this._progressionList.length;
        break;
      }
      case "oxygen": {
        this._progressionList = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14];
        this._maxStep = this._progressionList.length;
        break;
      }
      case "infrastructure": {
        this._progressionList = [0, 0.07, 0.14, 0.27, 0.28, 0.35, 0.42, 0.49, 0.56, 0.63, 0.7, 0.77, 0.85, 0.92, 1];
        this._maxStep = this._progressionList.length;
        break;
      }
      case "temperature": {
        this._progressionList = [-30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8];
        this._maxStep = this._progressionList.length;
      }
    }
  }
  static {
    this.\u0275fac = function GlobalParameterCardComponent_Factory(t) {
      return new (t || _GlobalParameterCardComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i044.\u0275\u0275defineComponent({ type: _GlobalParameterCardComponent, selectors: [["app-global-parameter-card"]], inputs: { parameter: "parameter" }, standalone: true, features: [i044.\u0275\u0275StandaloneFeature], decls: 5, vars: 2, consts: [[1, "main"], [1, "wrapper-icon", "ares-background"], [3, "rawText"], [1, "wrapper-progression-bar", "ares-border", "ares-background"], ["class", "wrapper-bubble", 3, "current", 4, "ngFor", "ngForOf"], [1, "wrapper-bubble"]], template: function GlobalParameterCardComponent_Template(rf, ctx) {
      if (rf & 1) {
        i044.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        i044.\u0275\u0275element(2, "app-text-with-image", 2);
        i044.\u0275\u0275elementEnd();
        i044.\u0275\u0275elementStart(3, "div", 3);
        i044.\u0275\u0275template(4, GlobalParameterCardComponent_div_4_Template, 1, 2, "div", 4);
        i044.\u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        i044.\u0275\u0275advance(2);
        i044.\u0275\u0275property("rawText", "$other_" + ctx.parameter + "$");
        i044.\u0275\u0275advance(2);
        i044.\u0275\u0275property("ngForOf", ctx._progressionList);
      }
    }, dependencies: [CommonModule22, i114.NgForOf, TextWithImageComponent], styles: ["\n\n[_nghost-%COMP%] {\n  height: 100%;\n  width: 100%;\n}\n.main[_ngcontent-%COMP%] {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n.wrapper-icon[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n  border: solid red 1px;\n  border-radius: 10%;\n}\n.wrapper-icon[_ngcontent-%COMP%]     app-text-with-image img {\n  width: 100%;\n  height: 100%;\n  max-width: 100%;\n  max-height: 100%;\n}\n.wrapper-icon[_ngcontent-%COMP%]     app-text-with-image * {\n  display: block;\n}\n.wrapper-icon[_ngcontent-%COMP%]     app-text-with-image img {\n  width: 100%;\n  aspect-ratio: 1;\n}\n.wrapper-progression-bar[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 2%;\n  padding: 1%;\n  padding-left: 3%;\n  padding-right: 2%;\n  top: 5%;\n  height: 50%;\n  flex-grow: 1;\n  border-left: 0;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.wrapper-bubble[_ngcontent-%COMP%] {\n  border-radius: 25%;\n  background-color: red;\n  height: 90%;\n  flex-grow: 1;\n}\n.wrapper-bubble.current[_ngcontent-%COMP%] {\n  outline: black 1px solid;\n  outline-offset: 2px;\n}\n/*# sourceMappingURL=global-parameter-card.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i044.\u0275setClassDebugInfo(GlobalParameterCardComponent, { className: "GlobalParameterCardComponent", filePath: "src\\app\\components\\player-info\\global-parameter-card\\global-parameter-card.component.ts", lineNumber: 16 });
})();

// src/app/components/player-info/global-parameter-pannel/global-parameter-pannel.component.ts
import { CommonModule as CommonModule23 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
import * as i045 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var GlobalParameterPannelComponent = class _GlobalParameterPannelComponent {
  constructor() {
    this._dummyId = [0, 1, 2, 3];
  }
  static {
    this.\u0275fac = function GlobalParameterPannelComponent_Factory(t) {
      return new (t || _GlobalParameterPannelComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i045.\u0275\u0275defineComponent({ type: _GlobalParameterPannelComponent, selectors: [["app-global-parameter-pannel"]], standalone: true, features: [i045.\u0275\u0275StandaloneFeature], decls: 9, vars: 4, consts: [[1, "main"], [1, "wrapper-parameter-card"], [3, "parameter"]], template: function GlobalParameterPannelComponent_Template(rf, ctx) {
      if (rf & 1) {
        i045.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        i045.\u0275\u0275element(2, "app-global-parameter-card", 2);
        i045.\u0275\u0275elementEnd();
        i045.\u0275\u0275elementStart(3, "div", 1);
        i045.\u0275\u0275element(4, "app-global-parameter-card", 2);
        i045.\u0275\u0275elementEnd();
        i045.\u0275\u0275elementStart(5, "div", 1);
        i045.\u0275\u0275element(6, "app-global-parameter-card", 2);
        i045.\u0275\u0275elementEnd();
        i045.\u0275\u0275elementStart(7, "div", 1);
        i045.\u0275\u0275element(8, "app-global-parameter-card", 2);
        i045.\u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        i045.\u0275\u0275advance(2);
        i045.\u0275\u0275property("parameter", "ocean");
        i045.\u0275\u0275advance(2);
        i045.\u0275\u0275property("parameter", "temperature");
        i045.\u0275\u0275advance(2);
        i045.\u0275\u0275property("parameter", "oxygen");
        i045.\u0275\u0275advance(2);
        i045.\u0275\u0275property("parameter", "infrastructure");
      }
    }, dependencies: [
      CommonModule23,
      GlobalParameterCardComponent
    ], styles: ["\n\n[_nghost-%COMP%] {\n  height: 100%;\n  width: 100%;\n}\n.main[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: start;\n  gap: 3%;\n  width: 100%;\n  height: 100%;\n}\n.wrapper-parameter-card[_ngcontent-%COMP%] {\n  width: 100%;\n  flex-grow: 1;\n}\napp-global-parameter-card[_ngcontent-%COMP%] {\n  width: 100%;\n  max-height: 100%;\n  display: block;\n}\n/*# sourceMappingURL=global-parameter-pannel.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i045.\u0275setClassDebugInfo(GlobalParameterPannelComponent, { className: "GlobalParameterPannelComponent", filePath: "src\\app\\components\\player-info\\global-parameter-pannel\\global-parameter-pannel.component.ts", lineNumber: 15 });
})();

// src/app/components/core-game/navigation/navigation.component.ts
import * as i046 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i26 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
function NavigationComponent_ng_container_5_app_player_pannel_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i046.\u0275\u0275getCurrentView();
    i046.\u0275\u0275elementStart(0, "app-player-pannel", 7);
    i046.\u0275\u0275listener("@expandCollapseVertical.done", function NavigationComponent_ng_container_5_app_player_pannel_1_Template_app_player_pannel_animation_expandCollapseVertical_done_0_listener() {
      i046.\u0275\u0275restoreView(_r1);
      const ctx_r1 = i046.\u0275\u0275nextContext(2);
      return i046.\u0275\u0275resetView(ctx_r1.updateNavHeight());
    });
    i046.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const id_r3 = i046.\u0275\u0275nextContext().$implicit;
    i046.\u0275\u0275property("@expandCollapseVertical", void 0)("playerId", id_r3);
  }
}
function NavigationComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    i046.\u0275\u0275elementContainerStart(0);
    i046.\u0275\u0275template(1, NavigationComponent_ng_container_5_app_player_pannel_1_Template, 1, 2, "app-player-pannel", 6);
    i046.\u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const id_r3 = ctx.$implicit;
    const ctx_r1 = i046.\u0275\u0275nextContext();
    i046.\u0275\u0275advance();
    i046.\u0275\u0275property("ngIf", ctx_r1._playerPannelIsHovered || !ctx_r1.isScrolled || id_r3 === ctx_r1.clientPlayerId);
  }
}
var NavigationComponent = class _NavigationComponent {
  constructor(elRef, gameStateService) {
    this.elRef = elRef;
    this.gameStateService = gameStateService;
    this.isScrolled = false;
    this._playerIdList = [];
    this._playerPannelIsHovered = false;
  }
  ngOnInit() {
    this.gameStateService.currentPlayerCount.subscribe((playerCount) => this.updatePlayerList(playerCount));
  }
  ngAfterViewInit() {
    const navbar = this.elRef.nativeElement.querySelector("animated");
    console.log("afterviewinit", navbar);
    if (navbar) {
      navbar.addEventListener("transitionend", () => {
        this.updateNavHeight();
      });
      this.updateNavHeight();
    }
  }
  onAnimationDone(event) {
    this.updateNavHeight();
  }
  updateNavHeight() {
    const navbar = this.elRef.nativeElement.querySelector("#nav");
    if (navbar && navbar.offsetHeight) {
      const navbarHeight = navbar.offsetHeight;
      document.documentElement.style.setProperty("--navbar-height", `${navbarHeight}px`);
    }
  }
  updatePlayerList(playerIdList) {
    this._playerIdList = playerIdList;
    this.updateNavHeight();
  }
  static {
    this.\u0275fac = function NavigationComponent_Factory(t) {
      return new (t || _NavigationComponent)(i046.\u0275\u0275directiveInject(i046.ElementRef), i046.\u0275\u0275directiveInject(GameState));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i046.\u0275\u0275defineComponent({ type: _NavigationComponent, selectors: [["app-navigation"]], inputs: { isScrolled: "isScrolled", clientPlayerId: "clientPlayerId" }, standalone: true, features: [i046.\u0275\u0275StandaloneFeature], decls: 9, vars: 3, consts: [["id", "nav"], [1, "wrapper-global-parameter", 3, "mouseenter", "mouseleave"], ["src", "/assets/other/mars_planet.png", "alt", "awards here"], [1, "wrapper-player-pannel", "ares-background", "ares-border", 3, "mouseenter", "mouseleave"], [4, "ngFor", "ngForOf"], [1, "wrapper-awards", "ares-background", "ares", "ares-border", 3, "mouseenter", "mouseleave"], ["class", "animated", 3, "playerId", 4, "ngIf"], [1, "animated", 3, "playerId"]], template: function NavigationComponent_Template(rf, ctx) {
      if (rf & 1) {
        i046.\u0275\u0275elementStart(0, "nav", 0);
        i046.\u0275\u0275listener("@expandCollapseVertical.done", function NavigationComponent_Template_nav_animation_expandCollapseVertical_done_0_listener() {
          return ctx.updateNavHeight();
        });
        i046.\u0275\u0275elementStart(1, "div", 1);
        i046.\u0275\u0275listener("mouseenter", function NavigationComponent_Template_div_mouseenter_1_listener() {
          return ctx._playerPannelIsHovered = true;
        })("mouseleave", function NavigationComponent_Template_div_mouseleave_1_listener() {
          return ctx._playerPannelIsHovered = false;
        });
        i046.\u0275\u0275element(2, "img", 2)(3, "app-global-parameter-pannel");
        i046.\u0275\u0275elementEnd();
        i046.\u0275\u0275elementStart(4, "div", 3);
        i046.\u0275\u0275listener("mouseenter", function NavigationComponent_Template_div_mouseenter_4_listener() {
          return ctx._playerPannelIsHovered = true;
        })("mouseleave", function NavigationComponent_Template_div_mouseleave_4_listener() {
          return ctx._playerPannelIsHovered = false;
        });
        i046.\u0275\u0275template(5, NavigationComponent_ng_container_5_Template, 2, 1, "ng-container", 4);
        i046.\u0275\u0275elementEnd();
        i046.\u0275\u0275elementStart(6, "div", 5);
        i046.\u0275\u0275listener("mouseenter", function NavigationComponent_Template_div_mouseenter_6_listener() {
          return ctx._playerPannelIsHovered = true;
        })("mouseleave", function NavigationComponent_Template_div_mouseleave_6_listener() {
          return ctx._playerPannelIsHovered = false;
        });
        i046.\u0275\u0275elementStart(7, "h1");
        i046.\u0275\u0275text(8, "awards here");
        i046.\u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        i046.\u0275\u0275property("@expandCollapseVertical", void 0);
        i046.\u0275\u0275advance(4);
        i046.\u0275\u0275property("@expandCollapseVertical", void 0);
        i046.\u0275\u0275advance();
        i046.\u0275\u0275property("ngForOf", ctx._playerIdList);
      }
    }, dependencies: [
      CommonModule24,
      i26.NgForOf,
      i26.NgIf,
      PlayerPannelComponent,
      GlobalParameterPannelComponent
    ], styles: ['@charset "UTF-8";\n\n\n\n[_ngcontent-%COMP%]:root {\n  --navbar-height: 0px;\n}\n#nav[_ngcontent-%COMP%] {\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: start;\n}\n.wrapper-player-pannel[_ngcontent-%COMP%] {\n  width: 60%;\n}\n.app-player-pannel[_ngcontent-%COMP%] {\n  z-index: 10;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  width: 100%;\n  left: 0;\n}\nimg[_ngcontent-%COMP%] {\n  height: 70%;\n  aspect-ratio: 1;\n  max-width: 100%;\n  max-height: 100%;\n}\n.wrapper-global-parameter[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  height: 100%;\n  width: calc(20% - 10px);\n}\n.wrapper-global-parameter[_ngcontent-%COMP%]    > h1[_ngcontent-%COMP%] {\n  display: inline-block;\n  text-align: center;\n}\n.wrapper-global-parameter[_ngcontent-%COMP%]   app-global-parameter-pannel[_ngcontent-%COMP%] {\n  height: 100%;\n  flex-grow: 1;\n}\n.wrapper-awards[_ngcontent-%COMP%] {\n  position: sticky;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  top: 0;\n  width: calc(20% - 10px);\n}\n.wrapper-awards[_ngcontent-%COMP%]    > h1[_ngcontent-%COMP%] {\n  display: inline-block;\n  text-align: center;\n}\n/*# sourceMappingURL=navigation.component.css.map */'], data: { animation: [expandCollapseVertical] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i046.\u0275setClassDebugInfo(NavigationComponent, { className: "NavigationComponent", filePath: "src\\app\\components\\core-game\\navigation\\navigation.component.ts", lineNumber: 21 });
})();

// src/app/components/core-game/settings/settings.component.ts
import { Component as Component32, Output as Output12, EventEmitter as EventEmitter12 } from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i047 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
var SettingsComponent = class _SettingsComponent {
  constructor() {
    this.closeSettings = new EventEmitter12();
  }
  ngOnInit() {
    this.closeButton = ButtonDesigner.createNonEventButton("closeSettings");
  }
  closeSettingsPannel() {
    console.log("close settings pannel:");
    this.closeSettings.emit();
  }
  nonEventButtonClicked(button) {
    console.log("button clicked in settings:", button);
    switch (button.name) {
    }
  }
  static {
    this.\u0275fac = function SettingsComponent_Factory(t) {
      return new (t || _SettingsComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i047.\u0275\u0275defineComponent({ type: _SettingsComponent, selectors: [["app-settings"]], outputs: { closeSettings: "closeSettings" }, standalone: true, features: [i047.\u0275\u0275StandaloneFeature], decls: 7, vars: 2, consts: [[1, "background", 3, "click"], [1, "inner-window", "ares-background", "ares-border"], [1, "main"], [1, "wrapper-title", "ares-title"], [1, "button-close", 3, "buttonClicked", "button", "shape"]], template: function SettingsComponent_Template(rf, ctx) {
      if (rf & 1) {
        i047.\u0275\u0275elementStart(0, "div", 0);
        i047.\u0275\u0275listener("click", function SettingsComponent_Template_div_click_0_listener() {
          return ctx.closeSettingsPannel();
        });
        i047.\u0275\u0275elementEnd();
        i047.\u0275\u0275elementStart(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "h1");
        i047.\u0275\u0275text(5, "SETTINGS");
        i047.\u0275\u0275elementEnd()()();
        i047.\u0275\u0275elementStart(6, "app-non-event-button", 4);
        i047.\u0275\u0275listener("buttonClicked", function SettingsComponent_Template_app_non_event_button_buttonClicked_6_listener() {
          return ctx.closeSettingsPannel();
        });
        i047.\u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        i047.\u0275\u0275advance(6);
        i047.\u0275\u0275property("button", ctx.closeButton)("shape", "hex");
      }
    }, dependencies: [NonEventButtonComponent], styles: ["\n\n[_nghost-%COMP%] {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n}\n.inner-window[_ngcontent-%COMP%] {\n  position: relative;\n  z-index: 1000;\n  display: flex;\n  width: 50%;\n  height: 50%;\n  padding: 5px;\n}\n.main[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n.button-close[_ngcontent-%COMP%] {\n  position: absolute;\n  left: calc(95% - 5px);\n  width: 5%;\n  aspect-ratio: 1;\n}\n.background[_ngcontent-%COMP%] {\n  z-index: 999;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n}\n.wrapper-title[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  width: 40%;\n  height: fit-content;\n  border-color: var(--color-ares-orange);\n}\n.wrapper-title[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\n  color: var(--color-ares-orange);\n}\n/*# sourceMappingURL=settings.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i047.\u0275setClassDebugInfo(SettingsComponent, { className: "SettingsComponent", filePath: "src\\app\\components\\core-game\\settings\\settings.component.ts", lineNumber: 14 });
})();

// src/app/app.component.ts
import * as i048 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_core.js?v=ba073120";
import * as i42 from "/@fs/C:/Users/alexa/Documents/Dev/AresExpedition/front/.angular/cache/17.3.11/vite/deps/@angular_common.js?v=ba073120";
var _c014 = ["hand"];
function AppComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    i048.\u0275\u0275elementStart(0, "div", 6)(1, "h1", 7);
    i048.\u0275\u0275text(2, "CONNECTION LOST");
    i048.\u0275\u0275elementEnd()();
  }
}
function AppComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i048.\u0275\u0275elementStart(0, "div", 6)(1, "h1", 7);
    i048.\u0275\u0275text(2, "LOADING");
    i048.\u0275\u0275elementEnd()();
  }
}
function AppComponent_nav_3_Template(rf, ctx) {
  if (rf & 1) {
    i048.\u0275\u0275elementStart(0, "nav", 8);
    i048.\u0275\u0275element(1, "app-navigation", 9);
    i048.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = i048.\u0275\u0275nextContext();
    i048.\u0275\u0275advance();
    i048.\u0275\u0275property("clientPlayerId", ctx_r0.clientPlayerId)("isScrolled", ctx_r0.isScrolled);
  }
}
function AppComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = i048.\u0275\u0275getCurrentView();
    i048.\u0275\u0275elementStart(0, "div", 10)(1, "app-settings", 11);
    i048.\u0275\u0275listener("closeSettings", function AppComponent_div_4_Template_app_settings_closeSettings_1_listener() {
      i048.\u0275\u0275restoreView(_r2);
      const ctx_r0 = i048.\u0275\u0275nextContext();
      return i048.\u0275\u0275resetView(ctx_r0.closeSettings());
    });
    i048.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    i048.\u0275\u0275property("@expandCollapseVertical", void 0);
  }
}
function AppComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = i048.\u0275\u0275getCurrentView();
    i048.\u0275\u0275elementStart(0, "div", 12)(1, "div", 13)(2, "div", 14)(3, "div", 15)(4, "app-non-event-button", 16);
    i048.\u0275\u0275listener("buttonClicked", function AppComponent_div_5_Template_app_non_event_button_buttonClicked_4_listener() {
      i048.\u0275\u0275restoreView(_r3);
      const ctx_r0 = i048.\u0275\u0275nextContext();
      return i048.\u0275\u0275resetView(ctx_r0.nonEventButtonClicked(ctx_r0.settingsButton));
    });
    i048.\u0275\u0275elementEnd()();
    i048.\u0275\u0275element(5, "app-server-emulation")(6, "app-game-event");
    i048.\u0275\u0275elementStart(7, "div", 17);
    i048.\u0275\u0275element(8, "app-horizontal-separator");
    i048.\u0275\u0275elementEnd();
    i048.\u0275\u0275elementStart(9, "div", 7)(10, "h1");
    i048.\u0275\u0275text(11, "Cards Played:");
    i048.\u0275\u0275elementEnd()();
    i048.\u0275\u0275elementStart(12, "div", 18);
    i048.\u0275\u0275element(13, "app-project-card-list", 19, 0);
    i048.\u0275\u0275elementEnd()()();
    i048.\u0275\u0275elementStart(15, "div", 20);
    i048.\u0275\u0275listener("mouseenter", function AppComponent_div_5_Template_div_mouseenter_15_listener() {
      i048.\u0275\u0275restoreView(_r3);
      const ctx_r0 = i048.\u0275\u0275nextContext();
      return i048.\u0275\u0275resetView(ctx_r0._handIsHovered = true);
    })("mouseleave", function AppComponent_div_5_Template_div_mouseleave_15_listener() {
      i048.\u0275\u0275restoreView(_r3);
      const ctx_r0 = i048.\u0275\u0275nextContext();
      return i048.\u0275\u0275resetView(ctx_r0._handIsHovered = false);
    });
    i048.\u0275\u0275elementStart(16, "div", 21);
    i048.\u0275\u0275element(17, "app-project-card-list", 22);
    i048.\u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = i048.\u0275\u0275nextContext();
    i048.\u0275\u0275property("@expandCollapseVertical", void 0);
    i048.\u0275\u0275advance(4);
    i048.\u0275\u0275property("button", ctx_r0.settingsButton)("shape", "hex_floating");
    i048.\u0275\u0275advance(9);
    i048.\u0275\u0275property("cardList", ctx_r0.playerPlayed)("listType", "played")("cardListId", "app");
    i048.\u0275\u0275advance(2);
    i048.\u0275\u0275classProp("hovered", ctx_r0._handIsHovered);
    i048.\u0275\u0275advance();
    i048.\u0275\u0275classProp("masked", ctx_r0._handIsHovered === false);
    i048.\u0275\u0275advance();
    i048.\u0275\u0275property("hovered", ctx_r0._handIsHovered)("background", false)("listType", "hand")("cardList", ctx_r0.playerHand);
  }
}
var AppComponent = class _AppComponent {
  constructor(elRef, gameStateService, cardInfoService, rxStompService) {
    this.elRef = elRef;
    this.gameStateService = gameStateService;
    this.cardInfoService = cardInfoService;
    this.rxStompService = rxStompService;
    this.title = "AresExpedition";
    this.playerHand = [];
    this.playerPlayed = [];
    this.playerIdList = [];
    this.loaded = false;
    this.isScrolled = false;
    this._handIsHovered = false;
    this._playerPannelIsHovered = false;
    this._settings = false;
    this._lastScrollY = 0;
    this._connected = false;
    this.wsHandler = inject3(WebsocketHandler);
  }
  ngOnInit() {
    this.clientPlayerId = this.gameStateService.clientPlayerId;
    this.settingsButton = ButtonDesigner.createNonEventButton("settings");
    console.log(this.settingsButton);
    this.gameStateService.currentLoadingState.subscribe((loading) => this.loadingFinished(loading));
    this.groupSubscription = this.rxStompService.watch(GLOBAL_WS_GROUP).subscribe((message) => {
      this.handleGroupMessage(message.body);
    });
    this.playerSubscription = this.rxStompService.watch(GLOBAL_WS_PLAYER).subscribe((message) => {
      this.handlePlayerMessage(message.body);
    });
    this.acknowledgeSubscription = this.rxStompService.watch(GLOBAL_WS_ACKNOWLEDGE).subscribe((message) => {
      this.handleAcknowledgeMessage(message.body);
    });
    this.rxStompService.connectionState$.subscribe(() => {
      this._connected = this.rxStompService.connectionState$.getValue() === 1;
    });
  }
  updateHandOnStateChange(state) {
    let clientState = this.gameStateService.getClientState();
    this.playerHand = this.cardInfoService.getProjectCardList(clientState.getProjectHandIdList());
    this.playerPlayed = clientState.getProjectPlayedModelList();
    if (!this.handProjectList) {
      return;
    }
    this.handProjectList.updatePlayedCardList(clientState.getProjectPlayedModelList());
  }
  updatePlayerList(playerIdList) {
    this.playerIdList = playerIdList;
  }
  loadingFinished(loading) {
    if (loading === true) {
      return;
    }
    this.loaded = loading === false;
    this.gameStateService.currentPlayerCount.subscribe((playerCount) => this.updatePlayerList(playerCount));
    this.gameStateService.currentGroupPlayerState.subscribe((state) => this.updateHandOnStateChange(state));
  }
  handleGroupMessage(message) {
    this.wsHandler.handleGroupMessage(WebsocketResultMessageFactory.createGroupMessageResult(message));
  }
  handlePlayerMessage(message) {
    let parsedMessage = WebsocketResultMessageFactory.createPlayerMessageResult(message);
    if (parsedMessage.contentEnum === PlayerMessageContentResultEnum.acknowledge) {
      this.rxStompService.handleAck({ ackUuid: parsedMessage.uuid });
      return;
    }
    this.wsHandler.handlePlayerMessage(parsedMessage);
  }
  handleAcknowledgeMessage(message) {
    console.log("ack received:", WebsocketResultMessageFactory.createAckMessage(message));
    this.rxStompService.handleAck({ ackUuid: WebsocketResultMessageFactory.createAckMessage(message).uuid });
  }
  nonEventButtonClicked(button) {
    switch (button.name) {
      case "settings": {
        this.openSettings();
      }
    }
  }
  openSettings() {
    this._settings = true;
    document.body.style.overflow = "hidden";
  }
  closeSettings() {
    this._settings = false;
    document.body.style.overflow = "";
  }
  handleKeyDown(event) {
    if (event.key === "Escape") {
      if (this._settings) {
        this.closeSettings();
        return;
      }
    }
  }
  onScroll() {
    let scrollChanged = window.scrollY > 0;
    if (window.scrollY === (document.documentElement.scrollTop || document.body.scrollTop) + document.documentElement.offsetHeight) {
      console.log("max scroll");
    }
    if (scrollChanged === this.isScrolled) {
      return;
    }
    this.isScrolled = window.scrollY > 0;
  }
  static {
    this.\u0275fac = function AppComponent_Factory(t) {
      return new (t || _AppComponent)(i048.\u0275\u0275directiveInject(i048.ElementRef), i048.\u0275\u0275directiveInject(GameState), i048.\u0275\u0275directiveInject(ProjectCardInfoService), i048.\u0275\u0275directiveInject(RxStompService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i048.\u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], viewQuery: function AppComponent_Query(rf, ctx) {
      if (rf & 1) {
        i048.\u0275\u0275viewQuery(_c014, 5);
      }
      if (rf & 2) {
        let _t;
        i048.\u0275\u0275queryRefresh(_t = i048.\u0275\u0275loadQuery()) && (ctx.handProjectList = _t.first);
      }
    }, hostBindings: function AppComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        i048.\u0275\u0275listener("keydown", function AppComponent_keydown_HostBindingHandler($event) {
          return ctx.handleKeyDown($event);
        }, false, i048.\u0275\u0275resolveWindow)("scroll", function AppComponent_scroll_HostBindingHandler() {
          return ctx.onScroll();
        }, false, i048.\u0275\u0275resolveWindow);
      }
    }, standalone: true, features: [i048.\u0275\u0275ProvidersFeature([
      WebsocketHandler
    ]), i048.\u0275\u0275StandaloneFeature], decls: 6, vars: 5, consts: [["hand", ""], [1, "background-image"], ["class", "wrapper-loading", 4, "ngIf"], ["id", "navbar", 4, "ngIf"], ["id", "settings", 4, "ngIf"], ["class", "wrapper-app", 4, "ngIf"], [1, "wrapper-loading"], [1, "ares-title"], ["id", "navbar"], [3, "clientPlayerId", "isScrolled"], ["id", "settings"], [3, "closeSettings"], [1, "wrapper-app"], [1, "wrapper-main"], [1, "wrapper-other"], [1, "wrapper-settings"], [3, "buttonClicked", "button", "shape"], [1, "horizontal-separator"], [1, "wrapper-played"], [3, "cardList", "listType", "cardListId"], [1, "wrapper-hand", 3, "mouseenter", "mouseleave"], [1, "hand-mask"], [3, "hovered", "background", "listType", "cardList"]], template: function AppComponent_Template(rf, ctx) {
      if (rf & 1) {
        i048.\u0275\u0275element(0, "div", 1);
        i048.\u0275\u0275template(1, AppComponent_div_1_Template, 3, 0, "div", 2)(2, AppComponent_div_2_Template, 3, 0, "div", 2)(3, AppComponent_nav_3_Template, 2, 2, "nav", 3)(4, AppComponent_div_4_Template, 2, 1, "div", 4)(5, AppComponent_div_5_Template, 18, 14, "div", 5);
      }
      if (rf & 2) {
        i048.\u0275\u0275advance();
        i048.\u0275\u0275property("ngIf", ctx._connected === false);
        i048.\u0275\u0275advance();
        i048.\u0275\u0275property("ngIf", ctx.loaded === false && ctx._connected);
        i048.\u0275\u0275advance();
        i048.\u0275\u0275property("ngIf", ctx.loaded && ctx._connected);
        i048.\u0275\u0275advance();
        i048.\u0275\u0275property("ngIf", ctx._settings);
        i048.\u0275\u0275advance();
        i048.\u0275\u0275property("ngIf", ctx.loaded && ctx._connected);
      }
    }, dependencies: [
      CommonModule25,
      i42.NgIf,
      ServerEmulationComponent,
      GameEventComponent,
      ProjectCardListComponent,
      NavigationComponent,
      HorizontalSeparatorComponent,
      NonEventButtonComponent,
      SettingsComponent
    ], styles: ['@charset "UTF-8";\n\n\n\n[_ngcontent-%COMP%]:root {\n  --navbar-height: 0px;\n}\n#navbar[_ngcontent-%COMP%] {\n  z-index: 100;\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 15%;\n  top: 0;\n}\napp-navigation[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n}\n#settings[_ngcontent-%COMP%] {\n  z-index: 1000;\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  -webkit-backdrop-filter: blur(10px) grayscale(20%);\n  backdrop-filter: blur(10px) grayscale(20%);\n}\n.wrapper-app[_ngcontent-%COMP%] {\n  margin-top: var(--navbar-height);\n  position: relative;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  padding-bottom: calc(var(--card-height) * 1.1);\n}\n.wrapper-main[_ngcontent-%COMP%] {\n  flex-grow: 1;\n  margin-left: 0;\n  display: flex;\n  align-items: left;\n  flex-direction: column;\n  top: 0;\n}\n.wrapper-other[_ngcontent-%COMP%] {\n  z-index: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.background-image[_ngcontent-%COMP%] {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: url(/assets/other/background.jpg) no-repeat center center;\n  background-size: cover;\n  -webkit-mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0.8),\n      white);\n  mask-image:\n    linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0.8),\n      white);\n}\napp-self-info[_ngcontent-%COMP%] {\n  z-index: 10;\n  top: 0;\n}\napp-game-event[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.wrapper-hand[_ngcontent-%COMP%] {\n  z-index: 100;\n  position: fixed;\n  display: flex;\n  justify-content: left;\n  align-items: top;\n  max-width: 90%;\n  left: 5%;\n  top: calc(100% - var(--card-height) * 0.23);\n  transition: top 0.2s ease;\n}\n.wrapper-hand.hovered[_ngcontent-%COMP%] {\n  top: calc(100% - var(--card-height) * 1.05);\n  transition: top 0.2s ease;\n}\n.wrapper-hand[_ngcontent-%COMP%]   .hand-mask.masked[_ngcontent-%COMP%] {\n  -webkit-mask-image: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.8));\n  mask-image: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.8));\n}\napp-project-card-list[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n}\n.wrapper-played[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: left;\n  margin-top: 2%;\n}\n.horizontal-separator[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 30px;\n  margin-top: 3%;\n  margin-bottom: 3%;\n}\n.wrapper-settings[_ngcontent-%COMP%] {\n  z-index: 100000000;\n  position: fixed;\n  top: 94%;\n  left: 0;\n  height: 6%;\n  aspect-ratio: 1;\n  transform: translate(30%, -30%);\n}\n.wrapper-loading[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n}\n.wrapper-loading[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\n  color: white;\n  padding: 20px;\n}\n/*# sourceMappingURL=app.component.css.map */'], data: { animation: [expandCollapseVertical] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i048.\u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src\\app\\app.component.ts", lineNumber: 45 });
})();

// src/main.ts
bootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));


//# sourceMappingURL=data:application/json;base64,